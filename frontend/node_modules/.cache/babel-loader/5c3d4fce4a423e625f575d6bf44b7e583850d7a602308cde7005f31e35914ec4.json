{"ast":null,"code":"import Symbol from'./_Symbol.js';import arrayMap from'./_arrayMap.js';import isArray from'./isArray.js';import isSymbol from'./isSymbol.js';/** Used as references for various `Number` constants. */var INFINITY=1/0;/** Used to convert symbols to primitives and strings. */var symbolProto=Symbol?Symbol.prototype:undefined,symbolToString=symbolProto?symbolProto.toString:undefined;/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */function baseToString(value){// Exit early for strings to avoid a performance hit in some environments.\nif(typeof value=='string'){return value;}if(isArray(value)){// Recursively convert values (susceptible to call stack limits).\nreturn arrayMap(value,baseToString)+'';}if(isSymbol(value)){return symbolToString?symbolToString.call(value):'';}var result=value+'';return result=='0'&&1/value==-INFINITY?'-0':result;}export default baseToString;","map":{"version":3,"names":["Symbol","arrayMap","isArray","isSymbol","INFINITY","symbolProto","prototype","undefined","symbolToString","toString","baseToString","value","call","result"],"sources":["C:/Users/Rama Krishna/videolibrary-app/frontend/src/node_modules/lodash-es/_baseToString.js"],"sourcesContent":["import Symbol from './_Symbol.js';\nimport arrayMap from './_arrayMap.js';\nimport isArray from './isArray.js';\nimport isSymbol from './isSymbol.js';\n\n/** Used as references for various `Number` constants. */\nvar INFINITY = 1 / 0;\n\n/** Used to convert symbols to primitives and strings. */\nvar symbolProto = Symbol ? Symbol.prototype : undefined,\n    symbolToString = symbolProto ? symbolProto.toString : undefined;\n\n/**\n * The base implementation of `_.toString` which doesn't convert nullish\n * values to empty strings.\n *\n * @private\n * @param {*} value The value to process.\n * @returns {string} Returns the string.\n */\nfunction baseToString(value) {\n  // Exit early for strings to avoid a performance hit in some environments.\n  if (typeof value == 'string') {\n    return value;\n  }\n  if (isArray(value)) {\n    // Recursively convert values (susceptible to call stack limits).\n    return arrayMap(value, baseToString) + '';\n  }\n  if (isSymbol(value)) {\n    return symbolToString ? symbolToString.call(value) : '';\n  }\n  var result = (value + '');\n  return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;\n}\n\nexport default baseToString;\n"],"mappings":"AAAA,MAAO,CAAAA,MAAM,KAAM,cAAc,CACjC,MAAO,CAAAC,QAAQ,KAAM,gBAAgB,CACrC,MAAO,CAAAC,OAAO,KAAM,cAAc,CAClC,MAAO,CAAAC,QAAQ,KAAM,eAAe,CAEpC,yDACA,GAAI,CAAAC,QAAQ,CAAG,CAAC,CAAG,CAAC,CAEpB,yDACA,GAAI,CAAAC,WAAW,CAAGL,MAAM,CAAGA,MAAM,CAACM,SAAS,CAAGC,SAAS,CACnDC,cAAc,CAAGH,WAAW,CAAGA,WAAW,CAACI,QAAQ,CAAGF,SAAS,CAEnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAAS,CAAAG,YAAYA,CAACC,KAAK,CAAE,CAC3B;AACA,GAAI,MAAO,CAAAA,KAAK,EAAI,QAAQ,CAAE,CAC5B,MAAO,CAAAA,KAAK,CACd,CACA,GAAIT,OAAO,CAACS,KAAK,CAAC,CAAE,CAClB;AACA,MAAO,CAAAV,QAAQ,CAACU,KAAK,CAAED,YAAY,CAAC,CAAG,EAAE,CAC3C,CACA,GAAIP,QAAQ,CAACQ,KAAK,CAAC,CAAE,CACnB,MAAO,CAAAH,cAAc,CAAGA,cAAc,CAACI,IAAI,CAACD,KAAK,CAAC,CAAG,EAAE,CACzD,CACA,GAAI,CAAAE,MAAM,CAAIF,KAAK,CAAG,EAAG,CACzB,MAAQ,CAAAE,MAAM,EAAI,GAAG,EAAK,CAAC,CAAGF,KAAK,EAAK,CAACP,QAAQ,CAAI,IAAI,CAAGS,MAAM,CACpE,CAEA,cAAe,CAAAH,YAAY","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}