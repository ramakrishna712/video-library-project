{"ast":null,"code":"import _objectSpread from\"C:/Users/Rama Krishna/videolibrary-app/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// src/utils/formatProdErrorMessage.ts\nfunction formatProdErrorMessage(code){return\"Minified Redux error #\".concat(code,\"; visit https://redux.js.org/Errors?code=\").concat(code,\" for the full message or use the non-minified dev environment for full errors. \");}// src/utils/symbol-observable.ts\nvar $$observable=/* @__PURE__ */(()=>typeof Symbol===\"function\"&&Symbol.observable||\"@@observable\")();var symbol_observable_default=$$observable;// src/utils/actionTypes.ts\nvar randomString=()=>Math.random().toString(36).substring(7).split(\"\").join(\".\");var ActionTypes={INIT:\"@@redux/INIT\".concat(/* @__PURE__ */randomString()),REPLACE:\"@@redux/REPLACE\".concat(/* @__PURE__ */randomString()),PROBE_UNKNOWN_ACTION:()=>\"@@redux/PROBE_UNKNOWN_ACTION\".concat(randomString())};var actionTypes_default=ActionTypes;// src/utils/isPlainObject.ts\nfunction isPlainObject(obj){if(typeof obj!==\"object\"||obj===null)return false;let proto=obj;while(Object.getPrototypeOf(proto)!==null){proto=Object.getPrototypeOf(proto);}return Object.getPrototypeOf(obj)===proto||Object.getPrototypeOf(obj)===null;}// src/utils/kindOf.ts\nfunction miniKindOf(val){if(val===void 0)return\"undefined\";if(val===null)return\"null\";const type=typeof val;switch(type){case\"boolean\":case\"string\":case\"number\":case\"symbol\":case\"function\":{return type;}}if(Array.isArray(val))return\"array\";if(isDate(val))return\"date\";if(isError(val))return\"error\";const constructorName=ctorName(val);switch(constructorName){case\"Symbol\":case\"Promise\":case\"WeakMap\":case\"WeakSet\":case\"Map\":case\"Set\":return constructorName;}return Object.prototype.toString.call(val).slice(8,-1).toLowerCase().replace(/\\s/g,\"\");}function ctorName(val){return typeof val.constructor===\"function\"?val.constructor.name:null;}function isError(val){return val instanceof Error||typeof val.message===\"string\"&&val.constructor&&typeof val.constructor.stackTraceLimit===\"number\";}function isDate(val){if(val instanceof Date)return true;return typeof val.toDateString===\"function\"&&typeof val.getDate===\"function\"&&typeof val.setDate===\"function\";}function kindOf(val){let typeOfVal=typeof val;if(process.env.NODE_ENV!==\"production\"){typeOfVal=miniKindOf(val);}return typeOfVal;}// src/createStore.ts\nfunction createStore(reducer,preloadedState,enhancer){if(typeof reducer!==\"function\"){throw new Error(process.env.NODE_ENV===\"production\"?formatProdErrorMessage(2):\"Expected the root reducer to be a function. Instead, received: '\".concat(kindOf(reducer),\"'\"));}if(typeof preloadedState===\"function\"&&typeof enhancer===\"function\"||typeof enhancer===\"function\"&&typeof arguments[3]===\"function\"){throw new Error(process.env.NODE_ENV===\"production\"?formatProdErrorMessage(0):\"It looks like you are passing several store enhancers to createStore(). This is not supported. Instead, compose them together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.\");}if(typeof preloadedState===\"function\"&&typeof enhancer===\"undefined\"){enhancer=preloadedState;preloadedState=void 0;}if(typeof enhancer!==\"undefined\"){if(typeof enhancer!==\"function\"){throw new Error(process.env.NODE_ENV===\"production\"?formatProdErrorMessage(1):\"Expected the enhancer to be a function. Instead, received: '\".concat(kindOf(enhancer),\"'\"));}return enhancer(createStore)(reducer,preloadedState);}let currentReducer=reducer;let currentState=preloadedState;let currentListeners=/* @__PURE__ */new Map();let nextListeners=currentListeners;let listenerIdCounter=0;let isDispatching=false;function ensureCanMutateNextListeners(){if(nextListeners===currentListeners){nextListeners=/* @__PURE__ */new Map();currentListeners.forEach((listener,key)=>{nextListeners.set(key,listener);});}}function getState(){if(isDispatching){throw new Error(process.env.NODE_ENV===\"production\"?formatProdErrorMessage(3):\"You may not call store.getState() while the reducer is executing. The reducer has already received the state as an argument. Pass it down from the top reducer instead of reading it from the store.\");}return currentState;}function subscribe(listener){if(typeof listener!==\"function\"){throw new Error(process.env.NODE_ENV===\"production\"?formatProdErrorMessage(4):\"Expected the listener to be a function. Instead, received: '\".concat(kindOf(listener),\"'\"));}if(isDispatching){throw new Error(process.env.NODE_ENV===\"production\"?formatProdErrorMessage(5):\"You may not call store.subscribe() while the reducer is executing. If you would like to be notified after the store has been updated, subscribe from a component and invoke store.getState() in the callback to access the latest state. See https://redux.js.org/api/store#subscribelistener for more details.\");}let isSubscribed=true;ensureCanMutateNextListeners();const listenerId=listenerIdCounter++;nextListeners.set(listenerId,listener);return function unsubscribe(){if(!isSubscribed){return;}if(isDispatching){throw new Error(process.env.NODE_ENV===\"production\"?formatProdErrorMessage(6):\"You may not unsubscribe from a store listener while the reducer is executing. See https://redux.js.org/api/store#subscribelistener for more details.\");}isSubscribed=false;ensureCanMutateNextListeners();nextListeners.delete(listenerId);currentListeners=null;};}function dispatch(action){if(!isPlainObject(action)){throw new Error(process.env.NODE_ENV===\"production\"?formatProdErrorMessage(7):\"Actions must be plain objects. Instead, the actual type was: '\".concat(kindOf(action),\"'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.\"));}if(typeof action.type===\"undefined\"){throw new Error(process.env.NODE_ENV===\"production\"?formatProdErrorMessage(8):'Actions may not have an undefined \"type\" property. You may have misspelled an action type string constant.');}if(typeof action.type!==\"string\"){throw new Error(process.env.NODE_ENV===\"production\"?formatProdErrorMessage(17):\"Action \\\"type\\\" property must be a string. Instead, the actual type was: '\".concat(kindOf(action.type),\"'. Value was: '\").concat(action.type,\"' (stringified)\"));}if(isDispatching){throw new Error(process.env.NODE_ENV===\"production\"?formatProdErrorMessage(9):\"Reducers may not dispatch actions.\");}try{isDispatching=true;currentState=currentReducer(currentState,action);}finally{isDispatching=false;}const listeners=currentListeners=nextListeners;listeners.forEach(listener=>{listener();});return action;}function replaceReducer(nextReducer){if(typeof nextReducer!==\"function\"){throw new Error(process.env.NODE_ENV===\"production\"?formatProdErrorMessage(10):\"Expected the nextReducer to be a function. Instead, received: '\".concat(kindOf(nextReducer)));}currentReducer=nextReducer;dispatch({type:actionTypes_default.REPLACE});}function observable(){const outerSubscribe=subscribe;return{/**\n       * The minimal observable subscription method.\n       * @param observer Any object that can be used as an observer.\n       * The observer object should have a `next` method.\n       * @returns An object with an `unsubscribe` method that can\n       * be used to unsubscribe the observable from the store, and prevent further\n       * emission of values from the observable.\n       */subscribe(observer){if(typeof observer!==\"object\"||observer===null){throw new Error(process.env.NODE_ENV===\"production\"?formatProdErrorMessage(11):\"Expected the observer to be an object. Instead, received: '\".concat(kindOf(observer),\"'\"));}function observeState(){const observerAsObserver=observer;if(observerAsObserver.next){observerAsObserver.next(getState());}}observeState();const unsubscribe=outerSubscribe(observeState);return{unsubscribe};},[symbol_observable_default](){return this;}};}dispatch({type:actionTypes_default.INIT});const store={dispatch,subscribe,getState,replaceReducer,[symbol_observable_default]:observable};return store;}function legacy_createStore(reducer,preloadedState,enhancer){return createStore(reducer,preloadedState,enhancer);}// src/utils/warning.ts\nfunction warning(message){if(typeof console!==\"undefined\"&&typeof console.error===\"function\"){console.error(message);}try{throw new Error(message);}catch(e){}}// src/combineReducers.ts\nfunction getUnexpectedStateShapeWarningMessage(inputState,reducers,action,unexpectedKeyCache){const reducerKeys=Object.keys(reducers);const argumentName=action&&action.type===actionTypes_default.INIT?\"preloadedState argument passed to createStore\":\"previous state received by the reducer\";if(reducerKeys.length===0){return\"Store does not have a valid reducer. Make sure the argument passed to combineReducers is an object whose values are reducers.\";}if(!isPlainObject(inputState)){return\"The \".concat(argumentName,\" has unexpected type of \\\"\").concat(kindOf(inputState),\"\\\". Expected argument to be an object with the following keys: \\\"\").concat(reducerKeys.join('\", \"'),\"\\\"\");}const unexpectedKeys=Object.keys(inputState).filter(key=>!reducers.hasOwnProperty(key)&&!unexpectedKeyCache[key]);unexpectedKeys.forEach(key=>{unexpectedKeyCache[key]=true;});if(action&&action.type===actionTypes_default.REPLACE)return;if(unexpectedKeys.length>0){return\"Unexpected \".concat(unexpectedKeys.length>1?\"keys\":\"key\",\" \\\"\").concat(unexpectedKeys.join('\", \"'),\"\\\" found in \").concat(argumentName,\". Expected to find one of the known reducer keys instead: \\\"\").concat(reducerKeys.join('\", \"'),\"\\\". Unexpected keys will be ignored.\");}}function assertReducerShape(reducers){Object.keys(reducers).forEach(key=>{const reducer=reducers[key];const initialState=reducer(void 0,{type:actionTypes_default.INIT});if(typeof initialState===\"undefined\"){throw new Error(process.env.NODE_ENV===\"production\"?formatProdErrorMessage(12):\"The slice reducer for key \\\"\".concat(key,\"\\\" returned undefined during initialization. If the state passed to the reducer is undefined, you must explicitly return the initial state. The initial state may not be undefined. If you don't want to set a value for this reducer, you can use null instead of undefined.\"));}if(typeof reducer(void 0,{type:actionTypes_default.PROBE_UNKNOWN_ACTION()})===\"undefined\"){throw new Error(process.env.NODE_ENV===\"production\"?formatProdErrorMessage(13):\"The slice reducer for key \\\"\".concat(key,\"\\\" returned undefined when probed with a random type. Don't try to handle '\").concat(actionTypes_default.INIT,\"' or other actions in \\\"redux/*\\\" namespace. They are considered private. Instead, you must return the current state for any unknown actions, unless it is undefined, in which case you must return the initial state, regardless of the action type. The initial state may not be undefined, but can be null.\"));}});}function combineReducers(reducers){const reducerKeys=Object.keys(reducers);const finalReducers={};for(let i=0;i<reducerKeys.length;i++){const key=reducerKeys[i];if(process.env.NODE_ENV!==\"production\"){if(typeof reducers[key]===\"undefined\"){warning(\"No reducer provided for key \\\"\".concat(key,\"\\\"\"));}}if(typeof reducers[key]===\"function\"){finalReducers[key]=reducers[key];}}const finalReducerKeys=Object.keys(finalReducers);let unexpectedKeyCache;if(process.env.NODE_ENV!==\"production\"){unexpectedKeyCache={};}let shapeAssertionError;try{assertReducerShape(finalReducers);}catch(e){shapeAssertionError=e;}return function combination(){let state=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};let action=arguments.length>1?arguments[1]:undefined;if(shapeAssertionError){throw shapeAssertionError;}if(process.env.NODE_ENV!==\"production\"){const warningMessage=getUnexpectedStateShapeWarningMessage(state,finalReducers,action,unexpectedKeyCache);if(warningMessage){warning(warningMessage);}}let hasChanged=false;const nextState={};for(let i=0;i<finalReducerKeys.length;i++){const key=finalReducerKeys[i];const reducer=finalReducers[key];const previousStateForKey=state[key];const nextStateForKey=reducer(previousStateForKey,action);if(typeof nextStateForKey===\"undefined\"){const actionType=action&&action.type;throw new Error(process.env.NODE_ENV===\"production\"?formatProdErrorMessage(14):\"When called with an action of type \".concat(actionType?\"\\\"\".concat(String(actionType),\"\\\"\"):\"(unknown type)\",\", the slice reducer for key \\\"\").concat(key,\"\\\" returned undefined. To ignore an action, you must explicitly return the previous state. If you want this reducer to hold no value, you can return null instead of undefined.\"));}nextState[key]=nextStateForKey;hasChanged=hasChanged||nextStateForKey!==previousStateForKey;}hasChanged=hasChanged||finalReducerKeys.length!==Object.keys(state).length;return hasChanged?nextState:state;};}// src/bindActionCreators.ts\nfunction bindActionCreator(actionCreator,dispatch){return function(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}return dispatch(actionCreator.apply(this,args));};}function bindActionCreators(actionCreators,dispatch){if(typeof actionCreators===\"function\"){return bindActionCreator(actionCreators,dispatch);}if(typeof actionCreators!==\"object\"||actionCreators===null){throw new Error(process.env.NODE_ENV===\"production\"?formatProdErrorMessage(16):\"bindActionCreators expected an object or a function, but instead received: '\".concat(kindOf(actionCreators),\"'. Did you write \\\"import ActionCreators from\\\" instead of \\\"import * as ActionCreators from\\\"?\"));}const boundActionCreators={};for(const key in actionCreators){const actionCreator=actionCreators[key];if(typeof actionCreator===\"function\"){boundActionCreators[key]=bindActionCreator(actionCreator,dispatch);}}return boundActionCreators;}// src/compose.ts\nfunction compose(){for(var _len2=arguments.length,funcs=new Array(_len2),_key2=0;_key2<_len2;_key2++){funcs[_key2]=arguments[_key2];}if(funcs.length===0){return arg=>arg;}if(funcs.length===1){return funcs[0];}return funcs.reduce((a,b)=>function(){return a(b(...arguments));});}// src/applyMiddleware.ts\nfunction applyMiddleware(){for(var _len3=arguments.length,middlewares=new Array(_len3),_key3=0;_key3<_len3;_key3++){middlewares[_key3]=arguments[_key3];}return createStore2=>(reducer,preloadedState)=>{const store=createStore2(reducer,preloadedState);let dispatch=()=>{throw new Error(process.env.NODE_ENV===\"production\"?formatProdErrorMessage(15):\"Dispatching while constructing your middleware is not allowed. Other middleware would not be applied to this dispatch.\");};const middlewareAPI={getState:store.getState,dispatch:function(action){for(var _len4=arguments.length,args=new Array(_len4>1?_len4-1:0),_key4=1;_key4<_len4;_key4++){args[_key4-1]=arguments[_key4];}return dispatch(action,...args);}};const chain=middlewares.map(middleware=>middleware(middlewareAPI));dispatch=compose(...chain)(store.dispatch);return _objectSpread(_objectSpread({},store),{},{dispatch});};}// src/utils/isAction.ts\nfunction isAction(action){return isPlainObject(action)&&\"type\"in action&&typeof action.type===\"string\";}export{actionTypes_default as __DO_NOT_USE__ActionTypes,applyMiddleware,bindActionCreators,combineReducers,compose,createStore,isAction,isPlainObject,legacy_createStore};","map":{"version":3,"names":["formatProdErrorMessage","code","concat","$$observable","Symbol","observable","symbol_observable_default","randomString","Math","random","toString","substring","split","join","ActionTypes","INIT","REPLACE","PROBE_UNKNOWN_ACTION","actionTypes_default","isPlainObject","obj","proto","Object","getPrototypeOf","miniKindOf","val","type","Array","isArray","isDate","isError","constructorName","ctorName","prototype","call","slice","toLowerCase","replace","constructor","name","Error","message","stackTraceLimit","Date","toDateString","getDate","setDate","kindOf","typeOfVal","process","env","NODE_ENV","createStore","reducer","preloadedState","enhancer","arguments","currentReducer","currentState","currentListeners","Map","nextListeners","listenerIdCounter","isDispatching","ensureCanMutateNextListeners","forEach","listener","key","set","getState","subscribe","isSubscribed","listenerId","unsubscribe","delete","dispatch","action","listeners","replaceReducer","nextReducer","outerSubscribe","observer","observeState","observerAsObserver","next","store","legacy_createStore","warning","console","error","e","getUnexpectedStateShapeWarningMessage","inputState","reducers","unexpectedKeyCache","reducerKeys","keys","argumentName","length","unexpectedKeys","filter","hasOwnProperty","assertReducerShape","initialState","combineReducers","finalReducers","i","finalReducerKeys","shapeAssertionError","combination","state","undefined","warningMessage","hasChanged","nextState","previousStateForKey","nextStateForKey","actionType","String","bindActionCreator","actionCreator","_len","args","_key","apply","bindActionCreators","actionCreators","boundActionCreators","compose","_len2","funcs","_key2","arg","reduce","a","b","applyMiddleware","_len3","middlewares","_key3","createStore2","middlewareAPI","_len4","_key4","chain","map","middleware","_objectSpread","isAction"],"sources":["C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\redux\\src\\utils\\formatProdErrorMessage.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\redux\\src\\utils\\symbol-observable.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\redux\\src\\utils\\actionTypes.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\redux\\src\\utils\\isPlainObject.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\redux\\src\\utils\\kindOf.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\redux\\src\\createStore.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\redux\\src\\utils\\warning.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\redux\\src\\combineReducers.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\redux\\src\\bindActionCreators.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\redux\\src\\compose.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\redux\\src\\applyMiddleware.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\redux\\src\\utils\\isAction.ts"],"sourcesContent":["/**\n * Adapted from React: https://github.com/facebook/react/blob/master/packages/shared/formatProdErrorMessage.js\n *\n * Do not require this module directly! Use normal throw error calls. These messages will be replaced with error codes\n * during build.\n * @param {number} code\n */\nexport function formatProdErrorMessage(code: number) {\n  return `Minified Redux error #${code}; visit https://redux.js.org/Errors?code=${code} for the full message or ` + 'use the non-minified dev environment for full errors. ';\n}","declare global {\n  interface SymbolConstructor {\n    readonly observable: symbol;\n  }\n}\nconst $$observable = /* #__PURE__ */(() => typeof Symbol === 'function' && Symbol.observable || '@@observable')();\nexport default $$observable;","/**\n * These are private action types reserved by Redux.\n * For any unknown actions, you must return the current state.\n * If the current state is undefined, you must return the initial state.\n * Do not reference these action types directly in your code.\n */\n\nconst randomString = () => Math.random().toString(36).substring(7).split('').join('.');\nconst ActionTypes = {\n  INIT: `@@redux/INIT${/* #__PURE__ */randomString()}`,\n  REPLACE: `@@redux/REPLACE${/* #__PURE__ */randomString()}`,\n  PROBE_UNKNOWN_ACTION: () => `@@redux/PROBE_UNKNOWN_ACTION${randomString()}`\n};\nexport default ActionTypes;","/**\n * @param obj The object to inspect.\n * @returns True if the argument appears to be a plain object.\n */\nexport default function isPlainObject(obj: any): obj is object {\n  if (typeof obj !== 'object' || obj === null) return false;\n  let proto = obj;\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto);\n  }\n  return Object.getPrototypeOf(obj) === proto || Object.getPrototypeOf(obj) === null;\n}","// Inlined / shortened version of `kindOf` from https://github.com/jonschlinkert/kind-of\nexport function miniKindOf(val: any): string {\n  if (val === void 0) return 'undefined';\n  if (val === null) return 'null';\n  const type = typeof val;\n  switch (type) {\n    case 'boolean':\n    case 'string':\n    case 'number':\n    case 'symbol':\n    case 'function':\n      {\n        return type;\n      }\n  }\n  if (Array.isArray(val)) return 'array';\n  if (isDate(val)) return 'date';\n  if (isError(val)) return 'error';\n  const constructorName = ctorName(val);\n  switch (constructorName) {\n    case 'Symbol':\n    case 'Promise':\n    case 'WeakMap':\n    case 'WeakSet':\n    case 'Map':\n    case 'Set':\n      return constructorName;\n  }\n\n  // other\n  return Object.prototype.toString.call(val).slice(8, -1).toLowerCase().replace(/\\s/g, '');\n}\nfunction ctorName(val: any): string | null {\n  return typeof val.constructor === 'function' ? val.constructor.name : null;\n}\nfunction isError(val: any) {\n  return val instanceof Error || typeof val.message === 'string' && val.constructor && typeof val.constructor.stackTraceLimit === 'number';\n}\nfunction isDate(val: any) {\n  if (val instanceof Date) return true;\n  return typeof val.toDateString === 'function' && typeof val.getDate === 'function' && typeof val.setDate === 'function';\n}\nexport function kindOf(val: any) {\n  let typeOfVal: string = typeof val;\n  if (process.env.NODE_ENV !== 'production') {\n    typeOfVal = miniKindOf(val);\n  }\n  return typeOfVal;\n}","import { formatProdErrorMessage as _formatProdErrorMessage13 } from \"src/utils/formatProdErrorMessage\";\nimport { formatProdErrorMessage as _formatProdErrorMessage12 } from \"src/utils/formatProdErrorMessage\";\nimport { formatProdErrorMessage as _formatProdErrorMessage11 } from \"src/utils/formatProdErrorMessage\";\nimport { formatProdErrorMessage as _formatProdErrorMessage10 } from \"src/utils/formatProdErrorMessage\";\nimport { formatProdErrorMessage as _formatProdErrorMessage9 } from \"src/utils/formatProdErrorMessage\";\nimport { formatProdErrorMessage as _formatProdErrorMessage8 } from \"src/utils/formatProdErrorMessage\";\nimport { formatProdErrorMessage as _formatProdErrorMessage7 } from \"src/utils/formatProdErrorMessage\";\nimport { formatProdErrorMessage as _formatProdErrorMessage6 } from \"src/utils/formatProdErrorMessage\";\nimport { formatProdErrorMessage as _formatProdErrorMessage5 } from \"src/utils/formatProdErrorMessage\";\nimport { formatProdErrorMessage as _formatProdErrorMessage4 } from \"src/utils/formatProdErrorMessage\";\nimport { formatProdErrorMessage as _formatProdErrorMessage3 } from \"src/utils/formatProdErrorMessage\";\nimport { formatProdErrorMessage as _formatProdErrorMessage2 } from \"src/utils/formatProdErrorMessage\";\nimport { formatProdErrorMessage as _formatProdErrorMessage } from \"src/utils/formatProdErrorMessage\";\nimport $$observable from './utils/symbol-observable';\nimport { Store, StoreEnhancer, Dispatch, Observer, ListenerCallback, UnknownIfNonSpecific } from './types/store';\nimport { Action } from './types/actions';\nimport { Reducer } from './types/reducers';\nimport ActionTypes from './utils/actionTypes';\nimport isPlainObject from './utils/isPlainObject';\nimport { kindOf } from './utils/kindOf';\n\n/**\n * @deprecated\n *\n * **We recommend using the `configureStore` method\n * of the `@reduxjs/toolkit` package**, which replaces `createStore`.\n *\n * Redux Toolkit is our recommended approach for writing Redux logic today,\n * including store setup, reducers, data fetching, and more.\n *\n * **For more details, please read this Redux docs page:**\n * **https://redux.js.org/introduction/why-rtk-is-redux-today**\n *\n * `configureStore` from Redux Toolkit is an improved version of `createStore` that\n * simplifies setup and helps avoid common bugs.\n *\n * You should not be using the `redux` core package by itself today, except for learning purposes.\n * The `createStore` method from the core `redux` package will not be removed, but we encourage\n * all users to migrate to using Redux Toolkit for all Redux code.\n *\n * If you want to use `createStore` without this visual deprecation warning, use\n * the `legacy_createStore` import instead:\n *\n * `import { legacy_createStore as createStore} from 'redux'`\n *\n */\nexport function createStore<S, A extends Action, Ext extends {} = {}, StateExt extends {} = {}>(reducer: Reducer<S, A>, enhancer?: StoreEnhancer<Ext, StateExt>): Store<S, A, UnknownIfNonSpecific<StateExt>> & Ext;\n/**\n * @deprecated\n *\n * **We recommend using the `configureStore` method\n * of the `@reduxjs/toolkit` package**, which replaces `createStore`.\n *\n * Redux Toolkit is our recommended approach for writing Redux logic today,\n * including store setup, reducers, data fetching, and more.\n *\n * **For more details, please read this Redux docs page:**\n * **https://redux.js.org/introduction/why-rtk-is-redux-today**\n *\n * `configureStore` from Redux Toolkit is an improved version of `createStore` that\n * simplifies setup and helps avoid common bugs.\n *\n * You should not be using the `redux` core package by itself today, except for learning purposes.\n * The `createStore` method from the core `redux` package will not be removed, but we encourage\n * all users to migrate to using Redux Toolkit for all Redux code.\n *\n * If you want to use `createStore` without this visual deprecation warning, use\n * the `legacy_createStore` import instead:\n *\n * `import { legacy_createStore as createStore} from 'redux'`\n *\n */\nexport function createStore<S, A extends Action, Ext extends {} = {}, StateExt extends {} = {}, PreloadedState = S>(reducer: Reducer<S, A, PreloadedState>, preloadedState?: PreloadedState | undefined, enhancer?: StoreEnhancer<Ext, StateExt>): Store<S, A, UnknownIfNonSpecific<StateExt>> & Ext;\nexport function createStore<S, A extends Action, Ext extends {} = {}, StateExt extends {} = {}, PreloadedState = S>(reducer: Reducer<S, A, PreloadedState>, preloadedState?: PreloadedState | StoreEnhancer<Ext, StateExt> | undefined, enhancer?: StoreEnhancer<Ext, StateExt>): Store<S, A, UnknownIfNonSpecific<StateExt>> & Ext {\n  if (typeof reducer !== 'function') {\n    throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage(2) : `Expected the root reducer to be a function. Instead, received: '${kindOf(reducer)}'`);\n  }\n  if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {\n    throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage2(0) : 'It looks like you are passing several store enhancers to ' + 'createStore(). This is not supported. Instead, compose them ' + 'together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.');\n  }\n  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {\n    enhancer = (preloadedState as StoreEnhancer<Ext, StateExt>);\n    preloadedState = undefined;\n  }\n  if (typeof enhancer !== 'undefined') {\n    if (typeof enhancer !== 'function') {\n      throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage3(1) : `Expected the enhancer to be a function. Instead, received: '${kindOf(enhancer)}'`);\n    }\n    return enhancer(createStore)(reducer, (preloadedState as PreloadedState | undefined));\n  }\n  let currentReducer = reducer;\n  let currentState: S | PreloadedState | undefined = (preloadedState as PreloadedState | undefined);\n  let currentListeners: Map<number, ListenerCallback> | null = new Map();\n  let nextListeners = currentListeners;\n  let listenerIdCounter = 0;\n  let isDispatching = false;\n\n  /**\n   * This makes a shallow copy of currentListeners so we can use\n   * nextListeners as a temporary list while dispatching.\n   *\n   * This prevents any bugs around consumers calling\n   * subscribe/unsubscribe in the middle of a dispatch.\n   */\n  function ensureCanMutateNextListeners() {\n    if (nextListeners === currentListeners) {\n      nextListeners = new Map();\n      currentListeners.forEach((listener, key) => {\n        nextListeners.set(key, listener);\n      });\n    }\n  }\n\n  /**\n   * Reads the state tree managed by the store.\n   *\n   * @returns The current state tree of your application.\n   */\n  function getState(): S {\n    if (isDispatching) {\n      throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage4(3) : 'You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');\n    }\n    return (currentState as S);\n  }\n\n  /**\n   * Adds a change listener. It will be called any time an action is dispatched,\n   * and some part of the state tree may potentially have changed. You may then\n   * call `getState()` to read the current state tree inside the callback.\n   *\n   * You may call `dispatch()` from a change listener, with the following\n   * caveats:\n   *\n   * 1. The subscriptions are snapshotted just before every `dispatch()` call.\n   * If you subscribe or unsubscribe while the listeners are being invoked, this\n   * will not have any effect on the `dispatch()` that is currently in progress.\n   * However, the next `dispatch()` call, whether nested or not, will use a more\n   * recent snapshot of the subscription list.\n   *\n   * 2. The listener should not expect to see all state changes, as the state\n   * might have been updated multiple times during a nested `dispatch()` before\n   * the listener is called. It is, however, guaranteed that all subscribers\n   * registered before the `dispatch()` started will be called with the latest\n   * state by the time it exits.\n   *\n   * @param listener A callback to be invoked on every dispatch.\n   * @returns A function to remove this change listener.\n   */\n  function subscribe(listener: () => void) {\n    if (typeof listener !== 'function') {\n      throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage5(4) : `Expected the listener to be a function. Instead, received: '${kindOf(listener)}'`);\n    }\n    if (isDispatching) {\n      throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage6(5) : 'You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api/store#subscribelistener for more details.');\n    }\n    let isSubscribed = true;\n    ensureCanMutateNextListeners();\n    const listenerId = listenerIdCounter++;\n    nextListeners.set(listenerId, listener);\n    return function unsubscribe() {\n      if (!isSubscribed) {\n        return;\n      }\n      if (isDispatching) {\n        throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage7(6) : 'You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api/store#subscribelistener for more details.');\n      }\n      isSubscribed = false;\n      ensureCanMutateNextListeners();\n      nextListeners.delete(listenerId);\n      currentListeners = null;\n    };\n  }\n\n  /**\n   * Dispatches an action. It is the only way to trigger a state change.\n   *\n   * The `reducer` function, used to create the store, will be called with the\n   * current state tree and the given `action`. Its return value will\n   * be considered the **next** state of the tree, and the change listeners\n   * will be notified.\n   *\n   * The base implementation only supports plain object actions. If you want to\n   * dispatch a Promise, an Observable, a thunk, or something else, you need to\n   * wrap your store creating function into the corresponding middleware. For\n   * example, see the documentation for the `redux-thunk` package. Even the\n   * middleware will eventually dispatch plain object actions using this method.\n   *\n   * @param action A plain object representing “what changed”. It is\n   * a good idea to keep actions serializable so you can record and replay user\n   * sessions, or use the time travelling `redux-devtools`. An action must have\n   * a `type` property which may not be `undefined`. It is a good idea to use\n   * string constants for action types.\n   *\n   * @returns For convenience, the same action object you dispatched.\n   *\n   * Note that, if you use a custom middleware, it may wrap `dispatch()` to\n   * return something else (for example, a Promise you can await).\n   */\n  function dispatch(action: A) {\n    if (!isPlainObject(action)) {\n      throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage8(7) : `Actions must be plain objects. Instead, the actual type was: '${kindOf(action)}'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.`);\n    }\n    if (typeof action.type === 'undefined') {\n      throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage9(8) : 'Actions may not have an undefined \"type\" property. You may have misspelled an action type string constant.');\n    }\n    if (typeof action.type !== 'string') {\n      throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage10(17) : `Action \"type\" property must be a string. Instead, the actual type was: '${kindOf(action.type)}'. Value was: '${action.type}' (stringified)`);\n    }\n    if (isDispatching) {\n      throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage11(9) : 'Reducers may not dispatch actions.');\n    }\n    try {\n      isDispatching = true;\n      currentState = currentReducer(currentState, action);\n    } finally {\n      isDispatching = false;\n    }\n    const listeners = currentListeners = nextListeners;\n    listeners.forEach(listener => {\n      listener();\n    });\n    return action;\n  }\n\n  /**\n   * Replaces the reducer currently used by the store to calculate the state.\n   *\n   * You might need this if your app implements code splitting and you want to\n   * load some of the reducers dynamically. You might also need this if you\n   * implement a hot reloading mechanism for Redux.\n   *\n   * @param nextReducer The reducer for the store to use instead.\n   */\n  function replaceReducer(nextReducer: Reducer<S, A>): void {\n    if (typeof nextReducer !== 'function') {\n      throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage12(10) : `Expected the nextReducer to be a function. Instead, received: '${kindOf(nextReducer)}`);\n    }\n    currentReducer = ((nextReducer as unknown) as Reducer<S, A, PreloadedState>);\n\n    // This action has a similar effect to ActionTypes.INIT.\n    // Any reducers that existed in both the new and old rootReducer\n    // will receive the previous state. This effectively populates\n    // the new state tree with any relevant data from the old one.\n    dispatch(({\n      type: ActionTypes.REPLACE\n    } as A));\n  }\n\n  /**\n   * Interoperability point for observable/reactive libraries.\n   * @returns A minimal observable of state changes.\n   * For more information, see the observable proposal:\n   * https://github.com/tc39/proposal-observable\n   */\n  function observable() {\n    const outerSubscribe = subscribe;\n    return {\n      /**\n       * The minimal observable subscription method.\n       * @param observer Any object that can be used as an observer.\n       * The observer object should have a `next` method.\n       * @returns An object with an `unsubscribe` method that can\n       * be used to unsubscribe the observable from the store, and prevent further\n       * emission of values from the observable.\n       */\n      subscribe(observer: unknown) {\n        if (typeof observer !== 'object' || observer === null) {\n          throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage13(11) : `Expected the observer to be an object. Instead, received: '${kindOf(observer)}'`);\n        }\n        function observeState() {\n          const observerAsObserver = (observer as Observer<S>);\n          if (observerAsObserver.next) {\n            observerAsObserver.next(getState());\n          }\n        }\n        observeState();\n        const unsubscribe = outerSubscribe(observeState);\n        return {\n          unsubscribe\n        };\n      },\n      [$$observable]() {\n        return this;\n      }\n    };\n  }\n\n  // When a store is created, an \"INIT\" action is dispatched so that every\n  // reducer returns their initial state. This effectively populates\n  // the initial state tree.\n  dispatch(({\n    type: ActionTypes.INIT\n  } as A));\n  const store = (({\n    dispatch: (dispatch as Dispatch<A>),\n    subscribe,\n    getState,\n    replaceReducer,\n    [$$observable]: observable\n  } as unknown) as Store<S, A, StateExt> & Ext);\n  return store;\n}\n\n/**\n * Creates a Redux store that holds the state tree.\n *\n * **We recommend using `configureStore` from the\n * `@reduxjs/toolkit` package**, which replaces `createStore`:\n * **https://redux.js.org/introduction/why-rtk-is-redux-today**\n *\n * The only way to change the data in the store is to call `dispatch()` on it.\n *\n * There should only be a single store in your app. To specify how different\n * parts of the state tree respond to actions, you may combine several reducers\n * into a single reducer function by using `combineReducers`.\n *\n * @param {Function} reducer A function that returns the next state tree, given\n * the current state tree and the action to handle.\n *\n * @param {any} [preloadedState] The initial state. You may optionally specify it\n * to hydrate the state from the server in universal apps, or to restore a\n * previously serialized user session.\n * If you use `combineReducers` to produce the root reducer function, this must be\n * an object with the same shape as `combineReducers` keys.\n *\n * @param {Function} [enhancer] The store enhancer. You may optionally specify it\n * to enhance the store with third-party capabilities such as middleware,\n * time travel, persistence, etc. The only store enhancer that ships with Redux\n * is `applyMiddleware()`.\n *\n * @returns {Store} A Redux store that lets you read the state, dispatch actions\n * and subscribe to changes.\n */\nexport function legacy_createStore<S, A extends Action, Ext extends {} = {}, StateExt extends {} = {}>(reducer: Reducer<S, A>, enhancer?: StoreEnhancer<Ext, StateExt>): Store<S, A, UnknownIfNonSpecific<StateExt>> & Ext;\n/**\n * Creates a Redux store that holds the state tree.\n *\n * **We recommend using `configureStore` from the\n * `@reduxjs/toolkit` package**, which replaces `createStore`:\n * **https://redux.js.org/introduction/why-rtk-is-redux-today**\n *\n * The only way to change the data in the store is to call `dispatch()` on it.\n *\n * There should only be a single store in your app. To specify how different\n * parts of the state tree respond to actions, you may combine several reducers\n * into a single reducer function by using `combineReducers`.\n *\n * @param {Function} reducer A function that returns the next state tree, given\n * the current state tree and the action to handle.\n *\n * @param {any} [preloadedState] The initial state. You may optionally specify it\n * to hydrate the state from the server in universal apps, or to restore a\n * previously serialized user session.\n * If you use `combineReducers` to produce the root reducer function, this must be\n * an object with the same shape as `combineReducers` keys.\n *\n * @param {Function} [enhancer] The store enhancer. You may optionally specify it\n * to enhance the store with third-party capabilities such as middleware,\n * time travel, persistence, etc. The only store enhancer that ships with Redux\n * is `applyMiddleware()`.\n *\n * @returns {Store} A Redux store that lets you read the state, dispatch actions\n * and subscribe to changes.\n */\nexport function legacy_createStore<S, A extends Action, Ext extends {} = {}, StateExt extends {} = {}, PreloadedState = S>(reducer: Reducer<S, A, PreloadedState>, preloadedState?: PreloadedState | undefined, enhancer?: StoreEnhancer<Ext, StateExt>): Store<S, A, UnknownIfNonSpecific<StateExt>> & Ext;\nexport function legacy_createStore<S, A extends Action, Ext extends {} = {}, StateExt extends {} = {}, PreloadedState = S>(reducer: Reducer<S, A>, preloadedState?: PreloadedState | StoreEnhancer<Ext, StateExt> | undefined, enhancer?: StoreEnhancer<Ext, StateExt>): Store<S, A, UnknownIfNonSpecific<StateExt>> & Ext {\n  return createStore(reducer, (preloadedState as any), enhancer);\n}","/**\n * Prints a warning in the console if it exists.\n *\n * @param message The warning message.\n */\nexport default function warning(message: string): void {\n  /* eslint-disable no-console */\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\n    console.error(message);\n  }\n  /* eslint-enable no-console */\n  try {\n    // This error was thrown as a convenience so that if you enable\n    // \"break on all exceptions\" in your console,\n    // it would pause the execution at this line.\n    throw new Error(message);\n  } catch (e) {} // eslint-disable-line no-empty\n}","import { formatProdErrorMessage as _formatProdErrorMessage3 } from \"src/utils/formatProdErrorMessage\";\nimport { formatProdErrorMessage as _formatProdErrorMessage2 } from \"src/utils/formatProdErrorMessage\";\nimport { formatProdErrorMessage as _formatProdErrorMessage } from \"src/utils/formatProdErrorMessage\";\nimport { Action } from './types/actions';\nimport { ActionFromReducersMapObject, PreloadedStateShapeFromReducersMapObject, Reducer, StateFromReducersMapObject } from './types/reducers';\nimport ActionTypes from './utils/actionTypes';\nimport isPlainObject from './utils/isPlainObject';\nimport warning from './utils/warning';\nimport { kindOf } from './utils/kindOf';\nfunction getUnexpectedStateShapeWarningMessage(inputState: object, reducers: {\n  [key: string]: Reducer<any, any, any>;\n}, action: Action, unexpectedKeyCache: {\n  [key: string]: true;\n}) {\n  const reducerKeys = Object.keys(reducers);\n  const argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';\n  if (reducerKeys.length === 0) {\n    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';\n  }\n  if (!isPlainObject(inputState)) {\n    return `The ${argumentName} has unexpected type of \"${kindOf(inputState)}\". Expected argument to be an object with the following ` + `keys: \"${reducerKeys.join('\", \"')}\"`;\n  }\n  const unexpectedKeys = Object.keys(inputState).filter(key => !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key]);\n  unexpectedKeys.forEach(key => {\n    unexpectedKeyCache[key] = true;\n  });\n  if (action && action.type === ActionTypes.REPLACE) return;\n  if (unexpectedKeys.length > 0) {\n    return `Unexpected ${unexpectedKeys.length > 1 ? 'keys' : 'key'} ` + `\"${unexpectedKeys.join('\", \"')}\" found in ${argumentName}. ` + `Expected to find one of the known reducer keys instead: ` + `\"${reducerKeys.join('\", \"')}\". Unexpected keys will be ignored.`;\n  }\n}\nfunction assertReducerShape(reducers: {\n  [key: string]: Reducer<any, any, any>;\n}) {\n  Object.keys(reducers).forEach(key => {\n    const reducer = reducers[key];\n    const initialState = reducer(undefined, {\n      type: ActionTypes.INIT\n    });\n    if (typeof initialState === 'undefined') {\n      throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage(12) : `The slice reducer for key \"${key}\" returned undefined during initialization. ` + `If the state passed to the reducer is undefined, you must ` + `explicitly return the initial state. The initial state may ` + `not be undefined. If you don't want to set a value for this reducer, ` + `you can use null instead of undefined.`);\n    }\n    if (typeof reducer(undefined, {\n      type: ActionTypes.PROBE_UNKNOWN_ACTION()\n    }) === 'undefined') {\n      throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage2(13) : `The slice reducer for key \"${key}\" returned undefined when probed with a random type. ` + `Don't try to handle '${ActionTypes.INIT}' or other actions in \"redux/*\" ` + `namespace. They are considered private. Instead, you must return the ` + `current state for any unknown actions, unless it is undefined, ` + `in which case you must return the initial state, regardless of the ` + `action type. The initial state may not be undefined, but can be null.`);\n    }\n  });\n}\n\n/**\n * Turns an object whose values are different reducer functions, into a single\n * reducer function. It will call every child reducer, and gather their results\n * into a single state object, whose keys correspond to the keys of the passed\n * reducer functions.\n *\n * @template S Combined state object type.\n *\n * @param reducers An object whose values correspond to different reducer\n *   functions that need to be combined into one. One handy way to obtain it\n *   is to use `import * as reducers` syntax. The reducers may never\n *   return undefined for any action. Instead, they should return their\n *   initial state if the state passed to them was undefined, and the current\n *   state for any unrecognized action.\n *\n * @returns A reducer function that invokes every reducer inside the passed\n *   object, and builds a state object with the same shape.\n */\nexport default function combineReducers<M>(reducers: M): M[keyof M] extends Reducer<any, any, any> | undefined ? Reducer<StateFromReducersMapObject<M>, ActionFromReducersMapObject<M>, Partial<PreloadedStateShapeFromReducersMapObject<M>>> : never;\nexport default function combineReducers(reducers: {\n  [key: string]: Reducer<any, any, any>;\n}) {\n  const reducerKeys = Object.keys(reducers);\n  const finalReducers: {\n    [key: string]: Reducer<any, any, any>;\n  } = {};\n  for (let i = 0; i < reducerKeys.length; i++) {\n    const key = reducerKeys[i];\n    if (process.env.NODE_ENV !== 'production') {\n      if (typeof reducers[key] === 'undefined') {\n        warning(`No reducer provided for key \"${key}\"`);\n      }\n    }\n    if (typeof reducers[key] === 'function') {\n      finalReducers[key] = reducers[key];\n    }\n  }\n  const finalReducerKeys = Object.keys(finalReducers);\n\n  // This is used to make sure we don't warn about the same\n  // keys multiple times.\n  let unexpectedKeyCache: {\n    [key: string]: true;\n  };\n  if (process.env.NODE_ENV !== 'production') {\n    unexpectedKeyCache = {};\n  }\n  let shapeAssertionError: unknown;\n  try {\n    assertReducerShape(finalReducers);\n  } catch (e) {\n    shapeAssertionError = e;\n  }\n  return function combination(state: StateFromReducersMapObject<typeof reducers> = {}, action: Action) {\n    if (shapeAssertionError) {\n      throw shapeAssertionError;\n    }\n    if (process.env.NODE_ENV !== 'production') {\n      const warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);\n      if (warningMessage) {\n        warning(warningMessage);\n      }\n    }\n    let hasChanged = false;\n    const nextState: StateFromReducersMapObject<typeof reducers> = {};\n    for (let i = 0; i < finalReducerKeys.length; i++) {\n      const key = finalReducerKeys[i];\n      const reducer = finalReducers[key];\n      const previousStateForKey = state[key];\n      const nextStateForKey = reducer(previousStateForKey, action);\n      if (typeof nextStateForKey === 'undefined') {\n        const actionType = action && action.type;\n        throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage3(14) : `When called with an action of type ${actionType ? `\"${String(actionType)}\"` : '(unknown type)'}, the slice reducer for key \"${key}\" returned undefined. ` + `To ignore an action, you must explicitly return the previous state. ` + `If you want this reducer to hold no value, you can return null instead of undefined.`);\n      }\n      nextState[key] = nextStateForKey;\n      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;\n    }\n    hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;\n    return hasChanged ? nextState : state;\n  };\n}","import { formatProdErrorMessage as _formatProdErrorMessage } from \"src/utils/formatProdErrorMessage\";\nimport { Dispatch } from './types/store';\nimport { ActionCreator, ActionCreatorsMapObject, Action } from './types/actions';\nimport { kindOf } from './utils/kindOf';\nfunction bindActionCreator<A extends Action>(actionCreator: ActionCreator<A>, dispatch: Dispatch<A>) {\n  return function (this: any, ...args: any[]) {\n    return dispatch(actionCreator.apply(this, args));\n  };\n}\n\n/**\n * Turns an object whose values are action creators, into an object with the\n * same keys, but with every function wrapped into a `dispatch` call so they\n * may be invoked directly. This is just a convenience method, as you can call\n * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.\n *\n * For convenience, you can also pass an action creator as the first argument,\n * and get a dispatch wrapped function in return.\n *\n * @param actionCreators An object whose values are action\n * creator functions. One handy way to obtain it is to use `import * as`\n * syntax. You may also pass a single function.\n *\n * @param dispatch The `dispatch` function available on your Redux\n * store.\n *\n * @returns The object mimicking the original object, but with\n * every action creator wrapped into the `dispatch` call. If you passed a\n * function as `actionCreators`, the return value will also be a single\n * function.\n */\nexport default function bindActionCreators<A, C extends ActionCreator<A>>(actionCreator: C, dispatch: Dispatch): C;\nexport default function bindActionCreators<A extends ActionCreator<any>, B extends ActionCreator<any>>(actionCreator: A, dispatch: Dispatch): B;\nexport default function bindActionCreators<A, M extends ActionCreatorsMapObject<A>>(actionCreators: M, dispatch: Dispatch): M;\nexport default function bindActionCreators<M extends ActionCreatorsMapObject, N extends ActionCreatorsMapObject>(actionCreators: M, dispatch: Dispatch): N;\nexport default function bindActionCreators(actionCreators: ActionCreator<any> | ActionCreatorsMapObject, dispatch: Dispatch) {\n  if (typeof actionCreators === 'function') {\n    return bindActionCreator(actionCreators, dispatch);\n  }\n  if (typeof actionCreators !== 'object' || actionCreators === null) {\n    throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage(16) : `bindActionCreators expected an object or a function, but instead received: '${kindOf(actionCreators)}'. ` + `Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?`);\n  }\n  const boundActionCreators: ActionCreatorsMapObject = {};\n  for (const key in actionCreators) {\n    const actionCreator = actionCreators[key];\n    if (typeof actionCreator === 'function') {\n      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);\n    }\n  }\n  return boundActionCreators;\n}","type Func<T extends any[], R> = (...a: T) => R;\n\n/**\n * Composes single-argument functions from right to left. The rightmost\n * function can take multiple arguments as it provides the signature for the\n * resulting composite function.\n *\n * @param funcs The functions to compose.\n * @returns A function obtained by composing the argument functions from right\n *   to left. For example, `compose(f, g, h)` is identical to doing\n *   `(...args) => f(g(h(...args)))`.\n */\nexport default function compose(): <R>(a: R) => R;\nexport default function compose<F extends Function>(f: F): F;\n\n/* two functions */\nexport default function compose<A, T extends any[], R>(f1: (a: A) => R, f2: Func<T, A>): Func<T, R>;\n\n/* three functions */\nexport default function compose<A, B, T extends any[], R>(f1: (b: B) => R, f2: (a: A) => B, f3: Func<T, A>): Func<T, R>;\n\n/* four functions */\nexport default function compose<A, B, C, T extends any[], R>(f1: (c: C) => R, f2: (b: B) => C, f3: (a: A) => B, f4: Func<T, A>): Func<T, R>;\n\n/* rest */\nexport default function compose<R>(f1: (a: any) => R, ...funcs: Function[]): (...args: any[]) => R;\nexport default function compose<R>(...funcs: Function[]): (...args: any[]) => R;\nexport default function compose(...funcs: Function[]) {\n  if (funcs.length === 0) {\n    // infer the argument type so it is usable in inference down the line\n    return <T,>(arg: T) => arg;\n  }\n  if (funcs.length === 1) {\n    return funcs[0];\n  }\n  return funcs.reduce((a, b) => (...args: any) => a(b(...args)));\n}","import { formatProdErrorMessage as _formatProdErrorMessage } from \"src/utils/formatProdErrorMessage\";\nimport compose from './compose';\nimport { Middleware, MiddlewareAPI } from './types/middleware';\nimport { StoreEnhancer, Dispatch } from './types/store';\n\n/**\n * Creates a store enhancer that applies middleware to the dispatch method\n * of the Redux store. This is handy for a variety of tasks, such as expressing\n * asynchronous actions in a concise manner, or logging every action payload.\n *\n * See `redux-thunk` package as an example of the Redux middleware.\n *\n * Because middleware is potentially asynchronous, this should be the first\n * store enhancer in the composition chain.\n *\n * Note that each middleware will be given the `dispatch` and `getState` functions\n * as named arguments.\n *\n * @param middlewares The middleware chain to be applied.\n * @returns A store enhancer applying the middleware.\n *\n * @template Ext Dispatch signature added by a middleware.\n * @template S The type of the state supported by a middleware.\n */\nexport default function applyMiddleware(): StoreEnhancer;\nexport default function applyMiddleware<Ext1, S>(middleware1: Middleware<Ext1, S, any>): StoreEnhancer<{\n  dispatch: Ext1;\n}>;\nexport default function applyMiddleware<Ext1, Ext2, S>(middleware1: Middleware<Ext1, S, any>, middleware2: Middleware<Ext2, S, any>): StoreEnhancer<{\n  dispatch: Ext1 & Ext2;\n}>;\nexport default function applyMiddleware<Ext1, Ext2, Ext3, S>(middleware1: Middleware<Ext1, S, any>, middleware2: Middleware<Ext2, S, any>, middleware3: Middleware<Ext3, S, any>): StoreEnhancer<{\n  dispatch: Ext1 & Ext2 & Ext3;\n}>;\nexport default function applyMiddleware<Ext1, Ext2, Ext3, Ext4, S>(middleware1: Middleware<Ext1, S, any>, middleware2: Middleware<Ext2, S, any>, middleware3: Middleware<Ext3, S, any>, middleware4: Middleware<Ext4, S, any>): StoreEnhancer<{\n  dispatch: Ext1 & Ext2 & Ext3 & Ext4;\n}>;\nexport default function applyMiddleware<Ext1, Ext2, Ext3, Ext4, Ext5, S>(middleware1: Middleware<Ext1, S, any>, middleware2: Middleware<Ext2, S, any>, middleware3: Middleware<Ext3, S, any>, middleware4: Middleware<Ext4, S, any>, middleware5: Middleware<Ext5, S, any>): StoreEnhancer<{\n  dispatch: Ext1 & Ext2 & Ext3 & Ext4 & Ext5;\n}>;\nexport default function applyMiddleware<Ext, S = any>(...middlewares: Middleware<any, S, any>[]): StoreEnhancer<{\n  dispatch: Ext;\n}>;\nexport default function applyMiddleware(...middlewares: Middleware[]): StoreEnhancer<any> {\n  return createStore => (reducer, preloadedState) => {\n    const store = createStore(reducer, preloadedState);\n    let dispatch: Dispatch = () => {\n      throw new Error(process.env.NODE_ENV === \"production\" ? _formatProdErrorMessage(15) : 'Dispatching while constructing your middleware is not allowed. ' + 'Other middleware would not be applied to this dispatch.');\n    };\n    const middlewareAPI: MiddlewareAPI = {\n      getState: store.getState,\n      dispatch: (action, ...args) => dispatch(action, ...args)\n    };\n    const chain = middlewares.map(middleware => middleware(middlewareAPI));\n    dispatch = compose<typeof dispatch>(...chain)(store.dispatch);\n    return {\n      ...store,\n      dispatch\n    };\n  };\n}","import { Action } from '../types/actions';\nimport isPlainObject from './isPlainObject';\nexport default function isAction(action: unknown): action is Action<string> {\n  return isPlainObject(action) && 'type' in action && typeof (action as Record<'type', unknown>).type === 'string';\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}