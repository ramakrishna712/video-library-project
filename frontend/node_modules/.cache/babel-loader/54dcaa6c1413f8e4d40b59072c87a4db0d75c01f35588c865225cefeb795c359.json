{"ast":null,"code":"import _objectSpread from\"C:/Users/Rama Krishna/videolibrary-app/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";// src/utils/env.ts\nvar NOTHING=Symbol.for(\"immer-nothing\");var DRAFTABLE=Symbol.for(\"immer-draftable\");var DRAFT_STATE=Symbol.for(\"immer-state\");// src/utils/errors.ts\nvar errors=process.env.NODE_ENV!==\"production\"?[// All error codes, starting by 0:\nfunction(plugin){return\"The plugin for '\".concat(plugin,\"' has not been loaded into Immer. To enable the plugin, import and call `enable\").concat(plugin,\"()` when initializing your application.\");},function(thing){return\"produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '\".concat(thing,\"'\");},\"This object has been frozen and should not be mutated\",function(data){return\"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \"+data;},\"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\",\"Immer forbids circular references\",\"The first or second argument to `produce` must be a function\",\"The third argument to `produce` must be a function or undefined\",\"First argument to `createDraft` must be a plain object, an array, or an immerable object\",\"First argument to `finishDraft` must be a draft returned by `createDraft`\",function(thing){return\"'current' expects a draft, got: \".concat(thing);},\"Object.defineProperty() cannot be used on an Immer draft\",\"Object.setPrototypeOf() cannot be used on an Immer draft\",\"Immer only supports deleting array indices\",\"Immer only supports setting array indices and the 'length' property\",function(thing){return\"'original' expects a draft, got: \".concat(thing);}// Note: if more errors are added, the errorOffset in Patches.ts should be increased\n// See Patches.ts for additional errors\n]:[];function die(error){if(process.env.NODE_ENV!==\"production\"){const e=errors[error];for(var _len=arguments.length,args=new Array(_len>1?_len-1:0),_key=1;_key<_len;_key++){args[_key-1]=arguments[_key];}const msg=typeof e===\"function\"?e.apply(null,args):e;throw new Error(\"[Immer] \".concat(msg));}throw new Error(\"[Immer] minified error nr: \".concat(error,\". Full error at: https://bit.ly/3cXEKWf\"));}// src/utils/common.ts\nvar getPrototypeOf=Object.getPrototypeOf;function isDraft(value){return!!value&&!!value[DRAFT_STATE];}function isDraftable(value){var _value$constructor;if(!value)return false;return isPlainObject(value)||Array.isArray(value)||!!value[DRAFTABLE]||!!((_value$constructor=value.constructor)!==null&&_value$constructor!==void 0&&_value$constructor[DRAFTABLE])||isMap(value)||isSet(value);}var objectCtorString=Object.prototype.constructor.toString();function isPlainObject(value){if(!value||typeof value!==\"object\")return false;const proto=getPrototypeOf(value);if(proto===null){return true;}const Ctor=Object.hasOwnProperty.call(proto,\"constructor\")&&proto.constructor;if(Ctor===Object)return true;return typeof Ctor==\"function\"&&Function.toString.call(Ctor)===objectCtorString;}function original(value){if(!isDraft(value))die(15,value);return value[DRAFT_STATE].base_;}function each(obj,iter){if(getArchtype(obj)===0/* Object */){Reflect.ownKeys(obj).forEach(key=>{iter(key,obj[key],obj);});}else{obj.forEach((entry,index)=>iter(index,entry,obj));}}function getArchtype(thing){const state=thing[DRAFT_STATE];return state?state.type_:Array.isArray(thing)?1/* Array */:isMap(thing)?2/* Map */:isSet(thing)?3/* Set */:0/* Object */;}function has(thing,prop){return getArchtype(thing)===2/* Map */?thing.has(prop):Object.prototype.hasOwnProperty.call(thing,prop);}function get(thing,prop){return getArchtype(thing)===2/* Map */?thing.get(prop):thing[prop];}function set(thing,propOrOldValue,value){const t=getArchtype(thing);if(t===2/* Map */)thing.set(propOrOldValue,value);else if(t===3/* Set */){thing.add(value);}else thing[propOrOldValue]=value;}function is(x,y){if(x===y){return x!==0||1/x===1/y;}else{return x!==x&&y!==y;}}function isMap(target){return target instanceof Map;}function isSet(target){return target instanceof Set;}function latest(state){return state.copy_||state.base_;}function shallowCopy(base,strict){if(isMap(base)){return new Map(base);}if(isSet(base)){return new Set(base);}if(Array.isArray(base))return Array.prototype.slice.call(base);const isPlain=isPlainObject(base);if(strict===true||strict===\"class_only\"&&!isPlain){const descriptors=Object.getOwnPropertyDescriptors(base);delete descriptors[DRAFT_STATE];let keys=Reflect.ownKeys(descriptors);for(let i=0;i<keys.length;i++){const key=keys[i];const desc=descriptors[key];if(desc.writable===false){desc.writable=true;desc.configurable=true;}if(desc.get||desc.set)descriptors[key]={configurable:true,writable:true,// could live with !!desc.set as well here...\nenumerable:desc.enumerable,value:base[key]};}return Object.create(getPrototypeOf(base),descriptors);}else{const proto=getPrototypeOf(base);if(proto!==null&&isPlain){return _objectSpread({},base);}const obj=Object.create(proto);return Object.assign(obj,base);}}function freeze(obj){let deep=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;if(isFrozen(obj)||isDraft(obj)||!isDraftable(obj))return obj;if(getArchtype(obj)>1){obj.set=obj.add=obj.clear=obj.delete=dontMutateFrozenCollections;}Object.freeze(obj);if(deep)Object.entries(obj).forEach(_ref=>{let[key,value]=_ref;return freeze(value,true);});return obj;}function dontMutateFrozenCollections(){die(2);}function isFrozen(obj){return Object.isFrozen(obj);}// src/utils/plugins.ts\nvar plugins={};function getPlugin(pluginKey){const plugin=plugins[pluginKey];if(!plugin){die(0,pluginKey);}return plugin;}function loadPlugin(pluginKey,implementation){if(!plugins[pluginKey])plugins[pluginKey]=implementation;}// src/core/scope.ts\nvar currentScope;function getCurrentScope(){return currentScope;}function createScope(parent_,immer_){return{drafts_:[],parent_,immer_,// Whenever the modified draft contains a draft from another scope, we\n// need to prevent auto-freezing so the unowned draft can be finalized.\ncanAutoFreeze_:true,unfinalizedDrafts_:0};}function usePatchesInScope(scope,patchListener){if(patchListener){getPlugin(\"Patches\");scope.patches_=[];scope.inversePatches_=[];scope.patchListener_=patchListener;}}function revokeScope(scope){leaveScope(scope);scope.drafts_.forEach(revokeDraft);scope.drafts_=null;}function leaveScope(scope){if(scope===currentScope){currentScope=scope.parent_;}}function enterScope(immer2){return currentScope=createScope(currentScope,immer2);}function revokeDraft(draft){const state=draft[DRAFT_STATE];if(state.type_===0/* Object */||state.type_===1/* Array */)state.revoke_();else state.revoked_=true;}// src/core/finalize.ts\nfunction processResult(result,scope){scope.unfinalizedDrafts_=scope.drafts_.length;const baseDraft=scope.drafts_[0];const isReplaced=result!==void 0&&result!==baseDraft;if(isReplaced){if(baseDraft[DRAFT_STATE].modified_){revokeScope(scope);die(4);}if(isDraftable(result)){result=finalize(scope,result);if(!scope.parent_)maybeFreeze(scope,result);}if(scope.patches_){getPlugin(\"Patches\").generateReplacementPatches_(baseDraft[DRAFT_STATE].base_,result,scope.patches_,scope.inversePatches_);}}else{result=finalize(scope,baseDraft,[]);}revokeScope(scope);if(scope.patches_){scope.patchListener_(scope.patches_,scope.inversePatches_);}return result!==NOTHING?result:void 0;}function finalize(rootScope,value,path){if(isFrozen(value))return value;const state=value[DRAFT_STATE];if(!state){each(value,(key,childValue)=>finalizeProperty(rootScope,state,value,key,childValue,path));return value;}if(state.scope_!==rootScope)return value;if(!state.modified_){maybeFreeze(rootScope,state.base_,true);return state.base_;}if(!state.finalized_){state.finalized_=true;state.scope_.unfinalizedDrafts_--;const result=state.copy_;let resultEach=result;let isSet2=false;if(state.type_===3/* Set */){resultEach=new Set(result);result.clear();isSet2=true;}each(resultEach,(key,childValue)=>finalizeProperty(rootScope,state,result,key,childValue,path,isSet2));maybeFreeze(rootScope,result,false);if(path&&rootScope.patches_){getPlugin(\"Patches\").generatePatches_(state,path,rootScope.patches_,rootScope.inversePatches_);}}return state.copy_;}function finalizeProperty(rootScope,parentState,targetObject,prop,childValue,rootPath,targetIsSet){if(process.env.NODE_ENV!==\"production\"&&childValue===targetObject)die(5);if(isDraft(childValue)){const path=rootPath&&parentState&&parentState.type_!==3/* Set */&&// Set objects are atomic since they have no keys.\n!has(parentState.assigned_,prop)?rootPath.concat(prop):void 0;const res=finalize(rootScope,childValue,path);set(targetObject,prop,res);if(isDraft(res)){rootScope.canAutoFreeze_=false;}else return;}else if(targetIsSet){targetObject.add(childValue);}if(isDraftable(childValue)&&!isFrozen(childValue)){if(!rootScope.immer_.autoFreeze_&&rootScope.unfinalizedDrafts_<1){return;}finalize(rootScope,childValue);if((!parentState||!parentState.scope_.parent_)&&typeof prop!==\"symbol\"&&Object.prototype.propertyIsEnumerable.call(targetObject,prop))maybeFreeze(rootScope,childValue);}}function maybeFreeze(scope,value){let deep=arguments.length>2&&arguments[2]!==undefined?arguments[2]:false;if(!scope.parent_&&scope.immer_.autoFreeze_&&scope.canAutoFreeze_){freeze(value,deep);}}// src/core/proxy.ts\nfunction createProxyProxy(base,parent){const isArray=Array.isArray(base);const state={type_:isArray?1/* Array */:0/* Object */,// Track which produce call this is associated with.\nscope_:parent?parent.scope_:getCurrentScope(),// True for both shallow and deep changes.\nmodified_:false,// Used during finalization.\nfinalized_:false,// Track which properties have been assigned (true) or deleted (false).\nassigned_:{},// The parent draft state.\nparent_:parent,// The base state.\nbase_:base,// The base proxy.\ndraft_:null,// set below\n// The base copy with any updated values.\ncopy_:null,// Called by the `produce` function.\nrevoke_:null,isManual_:false};let target=state;let traps=objectTraps;if(isArray){target=[state];traps=arrayTraps;}const{revoke,proxy}=Proxy.revocable(target,traps);state.draft_=proxy;state.revoke_=revoke;return proxy;}var objectTraps={get(state,prop){if(prop===DRAFT_STATE)return state;const source=latest(state);if(!has(source,prop)){return readPropFromProto(state,source,prop);}const value=source[prop];if(state.finalized_||!isDraftable(value)){return value;}if(value===peek(state.base_,prop)){prepareCopy(state);return state.copy_[prop]=createProxy(value,state);}return value;},has(state,prop){return prop in latest(state);},ownKeys(state){return Reflect.ownKeys(latest(state));},set(state,prop,value){const desc=getDescriptorFromProto(latest(state),prop);if(desc!==null&&desc!==void 0&&desc.set){desc.set.call(state.draft_,value);return true;}if(!state.modified_){const current2=peek(latest(state),prop);const currentState=current2===null||current2===void 0?void 0:current2[DRAFT_STATE];if(currentState&&currentState.base_===value){state.copy_[prop]=value;state.assigned_[prop]=false;return true;}if(is(value,current2)&&(value!==void 0||has(state.base_,prop)))return true;prepareCopy(state);markChanged(state);}if(state.copy_[prop]===value&&(// special case: handle new props with value 'undefined'\nvalue!==void 0||prop in state.copy_)||// special case: NaN\nNumber.isNaN(value)&&Number.isNaN(state.copy_[prop]))return true;state.copy_[prop]=value;state.assigned_[prop]=true;return true;},deleteProperty(state,prop){if(peek(state.base_,prop)!==void 0||prop in state.base_){state.assigned_[prop]=false;prepareCopy(state);markChanged(state);}else{delete state.assigned_[prop];}if(state.copy_){delete state.copy_[prop];}return true;},// Note: We never coerce `desc.value` into an Immer draft, because we can't make\n// the same guarantee in ES5 mode.\ngetOwnPropertyDescriptor(state,prop){const owner=latest(state);const desc=Reflect.getOwnPropertyDescriptor(owner,prop);if(!desc)return desc;return{writable:true,configurable:state.type_!==1/* Array */||prop!==\"length\",enumerable:desc.enumerable,value:owner[prop]};},defineProperty(){die(11);},getPrototypeOf(state){return getPrototypeOf(state.base_);},setPrototypeOf(){die(12);}};var arrayTraps={};each(objectTraps,(key,fn)=>{arrayTraps[key]=function(){arguments[0]=arguments[0][0];return fn.apply(this,arguments);};});arrayTraps.deleteProperty=function(state,prop){if(process.env.NODE_ENV!==\"production\"&&isNaN(parseInt(prop)))die(13);return arrayTraps.set.call(this,state,prop,void 0);};arrayTraps.set=function(state,prop,value){if(process.env.NODE_ENV!==\"production\"&&prop!==\"length\"&&isNaN(parseInt(prop)))die(14);return objectTraps.set.call(this,state[0],prop,value,state[0]);};function peek(draft,prop){const state=draft[DRAFT_STATE];const source=state?latest(state):draft;return source[prop];}function readPropFromProto(state,source,prop){var _desc$get;const desc=getDescriptorFromProto(source,prop);return desc?\"value\"in desc?desc.value:// This is a very special case, if the prop is a getter defined by the\n// prototype, we should invoke it with the draft as context!\n(_desc$get=desc.get)===null||_desc$get===void 0?void 0:_desc$get.call(state.draft_):void 0;}function getDescriptorFromProto(source,prop){if(!(prop in source))return void 0;let proto=getPrototypeOf(source);while(proto){const desc=Object.getOwnPropertyDescriptor(proto,prop);if(desc)return desc;proto=getPrototypeOf(proto);}return void 0;}function markChanged(state){if(!state.modified_){state.modified_=true;if(state.parent_){markChanged(state.parent_);}}}function prepareCopy(state){if(!state.copy_){state.copy_=shallowCopy(state.base_,state.scope_.immer_.useStrictShallowCopy_);}}// src/core/immerClass.ts\nvar Immer2=class{constructor(config){var _this=this;this.autoFreeze_=true;this.useStrictShallowCopy_=false;/**\n     * The `produce` function takes a value and a \"recipe function\" (whose\n     * return value often depends on the base state). The recipe function is\n     * free to mutate its first argument however it wants. All mutations are\n     * only ever applied to a __copy__ of the base state.\n     *\n     * Pass only a function to create a \"curried producer\" which relieves you\n     * from passing the recipe function every time.\n     *\n     * Only plain objects and arrays are made mutable. All other objects are\n     * considered uncopyable.\n     *\n     * Note: This function is __bound__ to its `Immer` instance.\n     *\n     * @param {any} base - the initial state\n     * @param {Function} recipe - function that receives a proxy of the base state as first argument and which can be freely modified\n     * @param {Function} patchListener - optional function that will be called with all the patches produced here\n     * @returns {any} a new state, or the initial state if nothing was modified\n     */this.produce=(base,recipe,patchListener)=>{if(typeof base===\"function\"&&typeof recipe!==\"function\"){const defaultBase=recipe;recipe=base;const self=this;return function curriedProduce(){let base2=arguments.length>0&&arguments[0]!==undefined?arguments[0]:defaultBase;for(var _len2=arguments.length,args=new Array(_len2>1?_len2-1:0),_key2=1;_key2<_len2;_key2++){args[_key2-1]=arguments[_key2];}return self.produce(base2,draft=>recipe.call(this,draft,...args));};}if(typeof recipe!==\"function\")die(6);if(patchListener!==void 0&&typeof patchListener!==\"function\")die(7);let result;if(isDraftable(base)){const scope=enterScope(this);const proxy=createProxy(base,void 0);let hasError=true;try{result=recipe(proxy);hasError=false;}finally{if(hasError)revokeScope(scope);else leaveScope(scope);}usePatchesInScope(scope,patchListener);return processResult(result,scope);}else if(!base||typeof base!==\"object\"){result=recipe(base);if(result===void 0)result=base;if(result===NOTHING)result=void 0;if(this.autoFreeze_)freeze(result,true);if(patchListener){const p=[];const ip=[];getPlugin(\"Patches\").generateReplacementPatches_(base,result,p,ip);patchListener(p,ip);}return result;}else die(1,base);};this.produceWithPatches=(base,recipe)=>{if(typeof base===\"function\"){return function(state){for(var _len3=arguments.length,args=new Array(_len3>1?_len3-1:0),_key3=1;_key3<_len3;_key3++){args[_key3-1]=arguments[_key3];}return _this.produceWithPatches(state,draft=>base(draft,...args));};}let patches,inversePatches;const result=this.produce(base,recipe,(p,ip)=>{patches=p;inversePatches=ip;});return[result,patches,inversePatches];};if(typeof(config===null||config===void 0?void 0:config.autoFreeze)===\"boolean\")this.setAutoFreeze(config.autoFreeze);if(typeof(config===null||config===void 0?void 0:config.useStrictShallowCopy)===\"boolean\")this.setUseStrictShallowCopy(config.useStrictShallowCopy);}createDraft(base){if(!isDraftable(base))die(8);if(isDraft(base))base=current(base);const scope=enterScope(this);const proxy=createProxy(base,void 0);proxy[DRAFT_STATE].isManual_=true;leaveScope(scope);return proxy;}finishDraft(draft,patchListener){const state=draft&&draft[DRAFT_STATE];if(!state||!state.isManual_)die(9);const{scope_:scope}=state;usePatchesInScope(scope,patchListener);return processResult(void 0,scope);}/**\n   * Pass true to automatically freeze all copies created by Immer.\n   *\n   * By default, auto-freezing is enabled.\n   */setAutoFreeze(value){this.autoFreeze_=value;}/**\n   * Pass true to enable strict shallow copy.\n   *\n   * By default, immer does not copy the object descriptors such as getter, setter and non-enumrable properties.\n   */setUseStrictShallowCopy(value){this.useStrictShallowCopy_=value;}applyPatches(base,patches){let i;for(i=patches.length-1;i>=0;i--){const patch=patches[i];if(patch.path.length===0&&patch.op===\"replace\"){base=patch.value;break;}}if(i>-1){patches=patches.slice(i+1);}const applyPatchesImpl=getPlugin(\"Patches\").applyPatches_;if(isDraft(base)){return applyPatchesImpl(base,patches);}return this.produce(base,draft=>applyPatchesImpl(draft,patches));}};function createProxy(value,parent){const draft=isMap(value)?getPlugin(\"MapSet\").proxyMap_(value,parent):isSet(value)?getPlugin(\"MapSet\").proxySet_(value,parent):createProxyProxy(value,parent);const scope=parent?parent.scope_:getCurrentScope();scope.drafts_.push(draft);return draft;}// src/core/current.ts\nfunction current(value){if(!isDraft(value))die(10,value);return currentImpl(value);}function currentImpl(value){if(!isDraftable(value)||isFrozen(value))return value;const state=value[DRAFT_STATE];let copy;if(state){if(!state.modified_)return state.base_;state.finalized_=true;copy=shallowCopy(value,state.scope_.immer_.useStrictShallowCopy_);}else{copy=shallowCopy(value,true);}each(copy,(key,childValue)=>{set(copy,key,currentImpl(childValue));});if(state){state.finalized_=false;}return copy;}// src/plugins/patches.ts\nfunction enablePatches(){const errorOffset=16;if(process.env.NODE_ENV!==\"production\"){errors.push('Sets cannot have \"replace\" patches.',function(op){return\"Unsupported patch operation: \"+op;},function(path){return\"Cannot apply patch, path doesn't resolve: \"+path;},\"Patching reserved attributes like __proto__, prototype and constructor is not allowed\");}const REPLACE=\"replace\";const ADD=\"add\";const REMOVE=\"remove\";function generatePatches_(state,basePath,patches,inversePatches){switch(state.type_){case 0/* Object */:case 2/* Map */:return generatePatchesFromAssigned(state,basePath,patches,inversePatches);case 1/* Array */:return generateArrayPatches(state,basePath,patches,inversePatches);case 3/* Set */:return generateSetPatches(state,basePath,patches,inversePatches);}}function generateArrayPatches(state,basePath,patches,inversePatches){let{base_,assigned_}=state;let copy_=state.copy_;if(copy_.length<base_.length){;[base_,copy_]=[copy_,base_];[patches,inversePatches]=[inversePatches,patches];}for(let i=0;i<base_.length;i++){if(assigned_[i]&&copy_[i]!==base_[i]){const path=basePath.concat([i]);patches.push({op:REPLACE,path,// Need to maybe clone it, as it can in fact be the original value\n// due to the base/copy inversion at the start of this function\nvalue:clonePatchValueIfNeeded(copy_[i])});inversePatches.push({op:REPLACE,path,value:clonePatchValueIfNeeded(base_[i])});}}for(let i=base_.length;i<copy_.length;i++){const path=basePath.concat([i]);patches.push({op:ADD,path,// Need to maybe clone it, as it can in fact be the original value\n// due to the base/copy inversion at the start of this function\nvalue:clonePatchValueIfNeeded(copy_[i])});}for(let i=copy_.length-1;base_.length<=i;--i){const path=basePath.concat([i]);inversePatches.push({op:REMOVE,path});}}function generatePatchesFromAssigned(state,basePath,patches,inversePatches){const{base_,copy_}=state;each(state.assigned_,(key,assignedValue)=>{const origValue=get(base_,key);const value=get(copy_,key);const op=!assignedValue?REMOVE:has(base_,key)?REPLACE:ADD;if(origValue===value&&op===REPLACE)return;const path=basePath.concat(key);patches.push(op===REMOVE?{op,path}:{op,path,value});inversePatches.push(op===ADD?{op:REMOVE,path}:op===REMOVE?{op:ADD,path,value:clonePatchValueIfNeeded(origValue)}:{op:REPLACE,path,value:clonePatchValueIfNeeded(origValue)});});}function generateSetPatches(state,basePath,patches,inversePatches){let{base_,copy_}=state;let i=0;base_.forEach(value=>{if(!copy_.has(value)){const path=basePath.concat([i]);patches.push({op:REMOVE,path,value});inversePatches.unshift({op:ADD,path,value});}i++;});i=0;copy_.forEach(value=>{if(!base_.has(value)){const path=basePath.concat([i]);patches.push({op:ADD,path,value});inversePatches.unshift({op:REMOVE,path,value});}i++;});}function generateReplacementPatches_(baseValue,replacement,patches,inversePatches){patches.push({op:REPLACE,path:[],value:replacement===NOTHING?void 0:replacement});inversePatches.push({op:REPLACE,path:[],value:baseValue});}function applyPatches_(draft,patches){patches.forEach(patch=>{const{path,op}=patch;let base=draft;for(let i=0;i<path.length-1;i++){const parentType=getArchtype(base);let p=path[i];if(typeof p!==\"string\"&&typeof p!==\"number\"){p=\"\"+p;}if((parentType===0/* Object */||parentType===1/* Array */)&&(p===\"__proto__\"||p===\"constructor\"))die(errorOffset+3);if(typeof base===\"function\"&&p===\"prototype\")die(errorOffset+3);base=get(base,p);if(typeof base!==\"object\")die(errorOffset+2,path.join(\"/\"));}const type=getArchtype(base);const value=deepClonePatchValue(patch.value);const key=path[path.length-1];switch(op){case REPLACE:switch(type){case 2/* Map */:return base.set(key,value);case 3/* Set */:die(errorOffset);default:return base[key]=value;}case ADD:switch(type){case 1/* Array */:return key===\"-\"?base.push(value):base.splice(key,0,value);case 2/* Map */:return base.set(key,value);case 3/* Set */:return base.add(value);default:return base[key]=value;}case REMOVE:switch(type){case 1/* Array */:return base.splice(key,1);case 2/* Map */:return base.delete(key);case 3/* Set */:return base.delete(patch.value);default:return delete base[key];}default:die(errorOffset+1,op);}});return draft;}function deepClonePatchValue(obj){if(!isDraftable(obj))return obj;if(Array.isArray(obj))return obj.map(deepClonePatchValue);if(isMap(obj))return new Map(Array.from(obj.entries()).map(_ref2=>{let[k,v]=_ref2;return[k,deepClonePatchValue(v)];}));if(isSet(obj))return new Set(Array.from(obj).map(deepClonePatchValue));const cloned=Object.create(getPrototypeOf(obj));for(const key in obj)cloned[key]=deepClonePatchValue(obj[key]);if(has(obj,DRAFTABLE))cloned[DRAFTABLE]=obj[DRAFTABLE];return cloned;}function clonePatchValueIfNeeded(obj){if(isDraft(obj)){return deepClonePatchValue(obj);}else return obj;}loadPlugin(\"Patches\",{applyPatches_,generatePatches_,generateReplacementPatches_});}// src/plugins/mapset.ts\nfunction enableMapSet(){class DraftMap extends Map{constructor(target,parent){super();this[DRAFT_STATE]={type_:2/* Map */,parent_:parent,scope_:parent?parent.scope_:getCurrentScope(),modified_:false,finalized_:false,copy_:void 0,assigned_:void 0,base_:target,draft_:this,isManual_:false,revoked_:false};}get size(){return latest(this[DRAFT_STATE]).size;}has(key){return latest(this[DRAFT_STATE]).has(key);}set(key,value){const state=this[DRAFT_STATE];assertUnrevoked(state);if(!latest(state).has(key)||latest(state).get(key)!==value){prepareMapCopy(state);markChanged(state);state.assigned_.set(key,true);state.copy_.set(key,value);state.assigned_.set(key,true);}return this;}delete(key){if(!this.has(key)){return false;}const state=this[DRAFT_STATE];assertUnrevoked(state);prepareMapCopy(state);markChanged(state);if(state.base_.has(key)){state.assigned_.set(key,false);}else{state.assigned_.delete(key);}state.copy_.delete(key);return true;}clear(){const state=this[DRAFT_STATE];assertUnrevoked(state);if(latest(state).size){prepareMapCopy(state);markChanged(state);state.assigned_=/* @__PURE__ */new Map();each(state.base_,key=>{state.assigned_.set(key,false);});state.copy_.clear();}}forEach(cb,thisArg){const state=this[DRAFT_STATE];latest(state).forEach((_value,key,_map)=>{cb.call(thisArg,this.get(key),key,this);});}get(key){const state=this[DRAFT_STATE];assertUnrevoked(state);const value=latest(state).get(key);if(state.finalized_||!isDraftable(value)){return value;}if(value!==state.base_.get(key)){return value;}const draft=createProxy(value,state);prepareMapCopy(state);state.copy_.set(key,draft);return draft;}keys(){return latest(this[DRAFT_STATE]).keys();}values(){const iterator=this.keys();return{[Symbol.iterator]:()=>this.values(),next:()=>{const r=iterator.next();if(r.done)return r;const value=this.get(r.value);return{done:false,value};}};}entries(){const iterator=this.keys();return{[Symbol.iterator]:()=>this.entries(),next:()=>{const r=iterator.next();if(r.done)return r;const value=this.get(r.value);return{done:false,value:[r.value,value]};}};}[(DRAFT_STATE,Symbol.iterator)](){return this.entries();}}function proxyMap_(target,parent){return new DraftMap(target,parent);}function prepareMapCopy(state){if(!state.copy_){state.assigned_=/* @__PURE__ */new Map();state.copy_=new Map(state.base_);}}class DraftSet extends Set{constructor(target,parent){super();this[DRAFT_STATE]={type_:3/* Set */,parent_:parent,scope_:parent?parent.scope_:getCurrentScope(),modified_:false,finalized_:false,copy_:void 0,base_:target,draft_:this,drafts_:/* @__PURE__ */new Map(),revoked_:false,isManual_:false};}get size(){return latest(this[DRAFT_STATE]).size;}has(value){const state=this[DRAFT_STATE];assertUnrevoked(state);if(!state.copy_){return state.base_.has(value);}if(state.copy_.has(value))return true;if(state.drafts_.has(value)&&state.copy_.has(state.drafts_.get(value)))return true;return false;}add(value){const state=this[DRAFT_STATE];assertUnrevoked(state);if(!this.has(value)){prepareSetCopy(state);markChanged(state);state.copy_.add(value);}return this;}delete(value){if(!this.has(value)){return false;}const state=this[DRAFT_STATE];assertUnrevoked(state);prepareSetCopy(state);markChanged(state);return state.copy_.delete(value)||(state.drafts_.has(value)?state.copy_.delete(state.drafts_.get(value)):(/* istanbul ignore next */false));}clear(){const state=this[DRAFT_STATE];assertUnrevoked(state);if(latest(state).size){prepareSetCopy(state);markChanged(state);state.copy_.clear();}}values(){const state=this[DRAFT_STATE];assertUnrevoked(state);prepareSetCopy(state);return state.copy_.values();}entries(){const state=this[DRAFT_STATE];assertUnrevoked(state);prepareSetCopy(state);return state.copy_.entries();}keys(){return this.values();}[(DRAFT_STATE,Symbol.iterator)](){return this.values();}forEach(cb,thisArg){const iterator=this.values();let result=iterator.next();while(!result.done){cb.call(thisArg,result.value,result.value,this);result=iterator.next();}}}function proxySet_(target,parent){return new DraftSet(target,parent);}function prepareSetCopy(state){if(!state.copy_){state.copy_=/* @__PURE__ */new Set();state.base_.forEach(value=>{if(isDraftable(value)){const draft=createProxy(value,state);state.drafts_.set(value,draft);state.copy_.add(draft);}else{state.copy_.add(value);}});}}function assertUnrevoked(state){if(state.revoked_)die(3,JSON.stringify(latest(state)));}loadPlugin(\"MapSet\",{proxyMap_,proxySet_});}// src/immer.ts\nvar immer=new Immer2();var produce=immer.produce;var produceWithPatches=immer.produceWithPatches.bind(immer);var setAutoFreeze=immer.setAutoFreeze.bind(immer);var setUseStrictShallowCopy=immer.setUseStrictShallowCopy.bind(immer);var applyPatches=immer.applyPatches.bind(immer);var createDraft=immer.createDraft.bind(immer);var finishDraft=immer.finishDraft.bind(immer);function castDraft(value){return value;}function castImmutable(value){return value;}export{Immer2 as Immer,applyPatches,castDraft,castImmutable,createDraft,current,enableMapSet,enablePatches,finishDraft,freeze,DRAFTABLE as immerable,isDraft,isDraftable,NOTHING as nothing,original,produce,produceWithPatches,setAutoFreeze,setUseStrictShallowCopy};","map":{"version":3,"names":["NOTHING","Symbol","for","DRAFTABLE","DRAFT_STATE","errors","process","env","NODE_ENV","plugin","concat","thing","data","die","error","e","_len","arguments","length","args","Array","_key","msg","apply","Error","getPrototypeOf","Object","isDraft","value","isDraftable","_value$constructor","isPlainObject","isArray","constructor","isMap","isSet","objectCtorString","prototype","toString","proto","Ctor","hasOwnProperty","call","Function","original","base_","each","obj","iter","getArchtype","Reflect","ownKeys","forEach","key","entry","index","state","type_","has","prop","get","set","propOrOldValue","t","add","is","x","y","target","Map","Set","latest","copy_","shallowCopy","base","strict","slice","isPlain","descriptors","getOwnPropertyDescriptors","keys","i","desc","writable","configurable","enumerable","create","_objectSpread","assign","freeze","deep","undefined","isFrozen","clear","delete","dontMutateFrozenCollections","entries","_ref","plugins","getPlugin","pluginKey","loadPlugin","implementation","currentScope","getCurrentScope","createScope","parent_","immer_","drafts_","canAutoFreeze_","unfinalizedDrafts_","usePatchesInScope","scope","patchListener","patches_","inversePatches_","patchListener_","revokeScope","leaveScope","revokeDraft","enterScope","immer2","draft","revoke_","revoked_","processResult","result","baseDraft","isReplaced","modified_","finalize","maybeFreeze","generateReplacementPatches_","rootScope","path","childValue","finalizeProperty","scope_","finalized_","resultEach","isSet2","generatePatches_","parentState","targetObject","rootPath","targetIsSet","assigned_","res","autoFreeze_","propertyIsEnumerable","createProxyProxy","parent","draft_","isManual_","traps","objectTraps","arrayTraps","revoke","proxy","Proxy","revocable","source","readPropFromProto","peek","prepareCopy","createProxy","getDescriptorFromProto","current2","currentState","markChanged","Number","isNaN","deleteProperty","getOwnPropertyDescriptor","owner","defineProperty","setPrototypeOf","fn","parseInt","_desc$get","useStrictShallowCopy_","Immer2","config","_this","produce","recipe","defaultBase","self","curriedProduce","base2","_len2","_key2","hasError","p","ip","produceWithPatches","_len3","_key3","patches","inversePatches","autoFreeze","setAutoFreeze","useStrictShallowCopy","setUseStrictShallowCopy","createDraft","current","finishDraft","applyPatches","patch","op","applyPatchesImpl","applyPatches_","proxyMap_","proxySet_","push","currentImpl","copy","enablePatches","errorOffset","REPLACE","ADD","REMOVE","basePath","generatePatchesFromAssigned","generateArrayPatches","generateSetPatches","clonePatchValueIfNeeded","assignedValue","origValue","unshift","baseValue","replacement","parentType","join","type","deepClonePatchValue","splice","map","from","_ref2","k","v","cloned","enableMapSet","DraftMap","size","assertUnrevoked","prepareMapCopy","cb","thisArg","_value","_map","values","iterator","next","r","done","DraftSet","prepareSetCopy","JSON","stringify","immer","bind","castDraft","castImmutable"],"sources":["C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\immer\\src\\utils\\env.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\immer\\src\\utils\\errors.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\immer\\src\\utils\\common.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\immer\\src\\utils\\plugins.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\immer\\src\\core\\scope.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\immer\\src\\core\\finalize.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\immer\\src\\core\\proxy.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\immer\\src\\core\\immerClass.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\immer\\src\\core\\current.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\immer\\src\\plugins\\patches.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\immer\\src\\plugins\\mapset.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\immer\\src\\immer.ts"],"sourcesContent":["// Should be no imports here!\n\n/**\n * The sentinel value returned by producers to replace the draft with undefined.\n */\nexport const NOTHING: unique symbol = Symbol.for(\"immer-nothing\")\n\n/**\n * To let Immer treat your class instances as plain immutable objects\n * (albeit with a custom prototype), you must define either an instance property\n * or a static property on each of your custom classes.\n *\n * Otherwise, your class instance will never be drafted, which means it won't be\n * safe to mutate in a produce callback.\n */\nexport const DRAFTABLE: unique symbol = Symbol.for(\"immer-draftable\")\n\nexport const DRAFT_STATE: unique symbol = Symbol.for(\"immer-state\")\n","export const errors =\n\tprocess.env.NODE_ENV !== \"production\"\n\t\t? [\n\t\t\t\t// All error codes, starting by 0:\n\t\t\t\tfunction(plugin: string) {\n\t\t\t\t\treturn `The plugin for '${plugin}' has not been loaded into Immer. To enable the plugin, import and call \\`enable${plugin}()\\` when initializing your application.`\n\t\t\t\t},\n\t\t\t\tfunction(thing: string) {\n\t\t\t\t\treturn `produce can only be called on things that are draftable: plain objects, arrays, Map, Set or classes that are marked with '[immerable]: true'. Got '${thing}'`\n\t\t\t\t},\n\t\t\t\t\"This object has been frozen and should not be mutated\",\n\t\t\t\tfunction(data: any) {\n\t\t\t\t\treturn (\n\t\t\t\t\t\t\"Cannot use a proxy that has been revoked. Did you pass an object from inside an immer function to an async process? \" +\n\t\t\t\t\t\tdata\n\t\t\t\t\t)\n\t\t\t\t},\n\t\t\t\t\"An immer producer returned a new value *and* modified its draft. Either return a new value *or* modify the draft.\",\n\t\t\t\t\"Immer forbids circular references\",\n\t\t\t\t\"The first or second argument to `produce` must be a function\",\n\t\t\t\t\"The third argument to `produce` must be a function or undefined\",\n\t\t\t\t\"First argument to `createDraft` must be a plain object, an array, or an immerable object\",\n\t\t\t\t\"First argument to `finishDraft` must be a draft returned by `createDraft`\",\n\t\t\t\tfunction(thing: string) {\n\t\t\t\t\treturn `'current' expects a draft, got: ${thing}`\n\t\t\t\t},\n\t\t\t\t\"Object.defineProperty() cannot be used on an Immer draft\",\n\t\t\t\t\"Object.setPrototypeOf() cannot be used on an Immer draft\",\n\t\t\t\t\"Immer only supports deleting array indices\",\n\t\t\t\t\"Immer only supports setting array indices and the 'length' property\",\n\t\t\t\tfunction(thing: string) {\n\t\t\t\t\treturn `'original' expects a draft, got: ${thing}`\n\t\t\t\t}\n\t\t\t\t// Note: if more errors are added, the errorOffset in Patches.ts should be increased\n\t\t\t\t// See Patches.ts for additional errors\n\t\t  ]\n\t\t: []\n\nexport function die(error: number, ...args: any[]): never {\n\tif (process.env.NODE_ENV !== \"production\") {\n\t\tconst e = errors[error]\n\t\tconst msg = typeof e === \"function\" ? e.apply(null, args as any) : e\n\t\tthrow new Error(`[Immer] ${msg}`)\n\t}\n\tthrow new Error(\n\t\t`[Immer] minified error nr: ${error}. Full error at: https://bit.ly/3cXEKWf`\n\t)\n}\n","import {\n\tDRAFT_STATE,\n\tDRAFTABLE,\n\tObjectish,\n\tDrafted,\n\tAnyObject,\n\tAnyMap,\n\tAnySet,\n\tImmerState,\n\tArchType,\n\tdie,\n\tStrictMode\n} from \"../internal\"\n\nexport const getPrototypeOf = Object.getPrototypeOf\n\n/** Returns true if the given value is an Immer draft */\n/*#__PURE__*/\nexport function isDraft(value: any): boolean {\n\treturn !!value && !!value[DRAFT_STATE]\n}\n\n/** Returns true if the given value can be drafted by Immer */\n/*#__PURE__*/\nexport function isDraftable(value: any): boolean {\n\tif (!value) return false\n\treturn (\n\t\tisPlainObject(value) ||\n\t\tArray.isArray(value) ||\n\t\t!!value[DRAFTABLE] ||\n\t\t!!value.constructor?.[DRAFTABLE] ||\n\t\tisMap(value) ||\n\t\tisSet(value)\n\t)\n}\n\nconst objectCtorString = Object.prototype.constructor.toString()\n/*#__PURE__*/\nexport function isPlainObject(value: any): boolean {\n\tif (!value || typeof value !== \"object\") return false\n\tconst proto = getPrototypeOf(value)\n\tif (proto === null) {\n\t\treturn true\n\t}\n\tconst Ctor =\n\t\tObject.hasOwnProperty.call(proto, \"constructor\") && proto.constructor\n\n\tif (Ctor === Object) return true\n\n\treturn (\n\t\ttypeof Ctor == \"function\" &&\n\t\tFunction.toString.call(Ctor) === objectCtorString\n\t)\n}\n\n/** Get the underlying object that is represented by the given draft */\n/*#__PURE__*/\nexport function original<T>(value: T): T | undefined\nexport function original(value: Drafted<any>): any {\n\tif (!isDraft(value)) die(15, value)\n\treturn value[DRAFT_STATE].base_\n}\n\n/**\n * Each iterates a map, set or array.\n * Or, if any other kind of object, all of its own properties.\n * Regardless whether they are enumerable or symbols\n */\nexport function each<T extends Objectish>(\n\tobj: T,\n\titer: (key: string | number, value: any, source: T) => void\n): void\nexport function each(obj: any, iter: any) {\n\tif (getArchtype(obj) === ArchType.Object) {\n\t\tReflect.ownKeys(obj).forEach(key => {\n\t\t\titer(key, obj[key], obj)\n\t\t})\n\t} else {\n\t\tobj.forEach((entry: any, index: any) => iter(index, entry, obj))\n\t}\n}\n\n/*#__PURE__*/\nexport function getArchtype(thing: any): ArchType {\n\tconst state: undefined | ImmerState = thing[DRAFT_STATE]\n\treturn state\n\t\t? state.type_\n\t\t: Array.isArray(thing)\n\t\t? ArchType.Array\n\t\t: isMap(thing)\n\t\t? ArchType.Map\n\t\t: isSet(thing)\n\t\t? ArchType.Set\n\t\t: ArchType.Object\n}\n\n/*#__PURE__*/\nexport function has(thing: any, prop: PropertyKey): boolean {\n\treturn getArchtype(thing) === ArchType.Map\n\t\t? thing.has(prop)\n\t\t: Object.prototype.hasOwnProperty.call(thing, prop)\n}\n\n/*#__PURE__*/\nexport function get(thing: AnyMap | AnyObject, prop: PropertyKey): any {\n\t// @ts-ignore\n\treturn getArchtype(thing) === ArchType.Map ? thing.get(prop) : thing[prop]\n}\n\n/*#__PURE__*/\nexport function set(thing: any, propOrOldValue: PropertyKey, value: any) {\n\tconst t = getArchtype(thing)\n\tif (t === ArchType.Map) thing.set(propOrOldValue, value)\n\telse if (t === ArchType.Set) {\n\t\tthing.add(value)\n\t} else thing[propOrOldValue] = value\n}\n\n/*#__PURE__*/\nexport function is(x: any, y: any): boolean {\n\t// From: https://github.com/facebook/fbjs/blob/c69904a511b900266935168223063dd8772dfc40/packages/fbjs/src/core/shallowEqual.js\n\tif (x === y) {\n\t\treturn x !== 0 || 1 / x === 1 / y\n\t} else {\n\t\treturn x !== x && y !== y\n\t}\n}\n\n/*#__PURE__*/\nexport function isMap(target: any): target is AnyMap {\n\treturn target instanceof Map\n}\n\n/*#__PURE__*/\nexport function isSet(target: any): target is AnySet {\n\treturn target instanceof Set\n}\n/*#__PURE__*/\nexport function latest(state: ImmerState): any {\n\treturn state.copy_ || state.base_\n}\n\n/*#__PURE__*/\nexport function shallowCopy(base: any, strict: StrictMode) {\n\tif (isMap(base)) {\n\t\treturn new Map(base)\n\t}\n\tif (isSet(base)) {\n\t\treturn new Set(base)\n\t}\n\tif (Array.isArray(base)) return Array.prototype.slice.call(base)\n\n\tconst isPlain = isPlainObject(base)\n\n\tif (strict === true || (strict === \"class_only\" && !isPlain)) {\n\t\t// Perform a strict copy\n\t\tconst descriptors = Object.getOwnPropertyDescriptors(base)\n\t\tdelete descriptors[DRAFT_STATE as any]\n\t\tlet keys = Reflect.ownKeys(descriptors)\n\t\tfor (let i = 0; i < keys.length; i++) {\n\t\t\tconst key: any = keys[i]\n\t\t\tconst desc = descriptors[key]\n\t\t\tif (desc.writable === false) {\n\t\t\t\tdesc.writable = true\n\t\t\t\tdesc.configurable = true\n\t\t\t}\n\t\t\t// like object.assign, we will read any _own_, get/set accessors. This helps in dealing\n\t\t\t// with libraries that trap values, like mobx or vue\n\t\t\t// unlike object.assign, non-enumerables will be copied as well\n\t\t\tif (desc.get || desc.set)\n\t\t\t\tdescriptors[key] = {\n\t\t\t\t\tconfigurable: true,\n\t\t\t\t\twritable: true, // could live with !!desc.set as well here...\n\t\t\t\t\tenumerable: desc.enumerable,\n\t\t\t\t\tvalue: base[key]\n\t\t\t\t}\n\t\t}\n\t\treturn Object.create(getPrototypeOf(base), descriptors)\n\t} else {\n\t\t// perform a sloppy copy\n\t\tconst proto = getPrototypeOf(base)\n\t\tif (proto !== null && isPlain) {\n\t\t\treturn {...base} // assumption: better inner class optimization than the assign below\n\t\t}\n\t\tconst obj = Object.create(proto)\n\t\treturn Object.assign(obj, base)\n\t}\n}\n\n/**\n * Freezes draftable objects. Returns the original object.\n * By default freezes shallowly, but if the second argument is `true` it will freeze recursively.\n *\n * @param obj\n * @param deep\n */\nexport function freeze<T>(obj: T, deep?: boolean): T\nexport function freeze<T>(obj: any, deep: boolean = false): T {\n\tif (isFrozen(obj) || isDraft(obj) || !isDraftable(obj)) return obj\n\tif (getArchtype(obj) > 1 /* Map or Set */) {\n\t\tobj.set = obj.add = obj.clear = obj.delete = dontMutateFrozenCollections as any\n\t}\n\tObject.freeze(obj)\n\tif (deep)\n\t\t// See #590, don't recurse into non-enumerable / Symbol properties when freezing\n\t\t// So use Object.entries (only string-like, enumerables) instead of each()\n\t\tObject.entries(obj).forEach(([key, value]) => freeze(value, true))\n\treturn obj\n}\n\nfunction dontMutateFrozenCollections() {\n\tdie(2)\n}\n\nexport function isFrozen(obj: any): boolean {\n\treturn Object.isFrozen(obj)\n}\n","import {\n\tImmerState,\n\tPatch,\n\tDrafted,\n\tImmerBaseState,\n\tAnyMap,\n\tAnySet,\n\tArchType,\n\tdie\n} from \"../internal\"\n\n/** Plugin utilities */\nconst plugins: {\n\tPatches?: {\n\t\tgeneratePatches_(\n\t\t\tstate: ImmerState,\n\t\t\tbasePath: PatchPath,\n\t\t\tpatches: Patch[],\n\t\t\tinversePatches: Patch[]\n\t\t): void\n\t\tgenerateReplacementPatches_(\n\t\t\tbase: any,\n\t\t\treplacement: any,\n\t\t\tpatches: Patch[],\n\t\t\tinversePatches: Patch[]\n\t\t): void\n\t\tapplyPatches_<T>(draft: T, patches: readonly Patch[]): T\n\t}\n\tMapSet?: {\n\t\tproxyMap_<T extends AnyMap>(target: T, parent?: ImmerState): T\n\t\tproxySet_<T extends AnySet>(target: T, parent?: ImmerState): T\n\t}\n} = {}\n\ntype Plugins = typeof plugins\n\nexport function getPlugin<K extends keyof Plugins>(\n\tpluginKey: K\n): Exclude<Plugins[K], undefined> {\n\tconst plugin = plugins[pluginKey]\n\tif (!plugin) {\n\t\tdie(0, pluginKey)\n\t}\n\t// @ts-ignore\n\treturn plugin\n}\n\nexport function loadPlugin<K extends keyof Plugins>(\n\tpluginKey: K,\n\timplementation: Plugins[K]\n): void {\n\tif (!plugins[pluginKey]) plugins[pluginKey] = implementation\n}\n/** Map / Set plugin */\n\nexport interface MapState extends ImmerBaseState {\n\ttype_: ArchType.Map\n\tcopy_: AnyMap | undefined\n\tassigned_: Map<any, boolean> | undefined\n\tbase_: AnyMap\n\trevoked_: boolean\n\tdraft_: Drafted<AnyMap, MapState>\n}\n\nexport interface SetState extends ImmerBaseState {\n\ttype_: ArchType.Set\n\tcopy_: AnySet | undefined\n\tbase_: AnySet\n\tdrafts_: Map<any, Drafted> // maps the original value to the draft value in the new set\n\trevoked_: boolean\n\tdraft_: Drafted<AnySet, SetState>\n}\n\n/** Patches plugin */\n\nexport type PatchPath = (string | number)[]\n","import {\n\tPatch,\n\tPatchListener,\n\tDrafted,\n\tImmer,\n\tDRAFT_STATE,\n\tImmerState,\n\tArchType,\n\tgetPlugin\n} from \"../internal\"\n\n/** Each scope represents a `produce` call. */\n\nexport interface ImmerScope {\n\tpatches_?: Patch[]\n\tinversePatches_?: Patch[]\n\tcanAutoFreeze_: boolean\n\tdrafts_: any[]\n\tparent_?: ImmerScope\n\tpatchListener_?: PatchListener\n\timmer_: Immer\n\tunfinalizedDrafts_: number\n}\n\nlet currentScope: ImmerScope | undefined\n\nexport function getCurrentScope() {\n\treturn currentScope!\n}\n\nfunction createScope(\n\tparent_: ImmerScope | undefined,\n\timmer_: Immer\n): ImmerScope {\n\treturn {\n\t\tdrafts_: [],\n\t\tparent_,\n\t\timmer_,\n\t\t// Whenever the modified draft contains a draft from another scope, we\n\t\t// need to prevent auto-freezing so the unowned draft can be finalized.\n\t\tcanAutoFreeze_: true,\n\t\tunfinalizedDrafts_: 0\n\t}\n}\n\nexport function usePatchesInScope(\n\tscope: ImmerScope,\n\tpatchListener?: PatchListener\n) {\n\tif (patchListener) {\n\t\tgetPlugin(\"Patches\") // assert we have the plugin\n\t\tscope.patches_ = []\n\t\tscope.inversePatches_ = []\n\t\tscope.patchListener_ = patchListener\n\t}\n}\n\nexport function revokeScope(scope: ImmerScope) {\n\tleaveScope(scope)\n\tscope.drafts_.forEach(revokeDraft)\n\t// @ts-ignore\n\tscope.drafts_ = null\n}\n\nexport function leaveScope(scope: ImmerScope) {\n\tif (scope === currentScope) {\n\t\tcurrentScope = scope.parent_\n\t}\n}\n\nexport function enterScope(immer: Immer) {\n\treturn (currentScope = createScope(currentScope, immer))\n}\n\nfunction revokeDraft(draft: Drafted) {\n\tconst state: ImmerState = draft[DRAFT_STATE]\n\tif (state.type_ === ArchType.Object || state.type_ === ArchType.Array)\n\t\tstate.revoke_()\n\telse state.revoked_ = true\n}\n","import {\n\tImmerScope,\n\tDRAFT_STATE,\n\tisDraftable,\n\tNOTHING,\n\tPatchPath,\n\teach,\n\thas,\n\tfreeze,\n\tImmerState,\n\tisDraft,\n\tSetState,\n\tset,\n\tArchType,\n\tgetPlugin,\n\tdie,\n\trevokeScope,\n\tisFrozen\n} from \"../internal\"\n\nexport function processResult(result: any, scope: ImmerScope) {\n\tscope.unfinalizedDrafts_ = scope.drafts_.length\n\tconst baseDraft = scope.drafts_![0]\n\tconst isReplaced = result !== undefined && result !== baseDraft\n\tif (isReplaced) {\n\t\tif (baseDraft[DRAFT_STATE].modified_) {\n\t\t\trevokeScope(scope)\n\t\t\tdie(4)\n\t\t}\n\t\tif (isDraftable(result)) {\n\t\t\t// Finalize the result in case it contains (or is) a subset of the draft.\n\t\t\tresult = finalize(scope, result)\n\t\t\tif (!scope.parent_) maybeFreeze(scope, result)\n\t\t}\n\t\tif (scope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generateReplacementPatches_(\n\t\t\t\tbaseDraft[DRAFT_STATE].base_,\n\t\t\t\tresult,\n\t\t\t\tscope.patches_,\n\t\t\t\tscope.inversePatches_!\n\t\t\t)\n\t\t}\n\t} else {\n\t\t// Finalize the base draft.\n\t\tresult = finalize(scope, baseDraft, [])\n\t}\n\trevokeScope(scope)\n\tif (scope.patches_) {\n\t\tscope.patchListener_!(scope.patches_, scope.inversePatches_!)\n\t}\n\treturn result !== NOTHING ? result : undefined\n}\n\nfunction finalize(rootScope: ImmerScope, value: any, path?: PatchPath) {\n\t// Don't recurse in tho recursive data structures\n\tif (isFrozen(value)) return value\n\n\tconst state: ImmerState = value[DRAFT_STATE]\n\t// A plain object, might need freezing, might contain drafts\n\tif (!state) {\n\t\teach(value, (key, childValue) =>\n\t\t\tfinalizeProperty(rootScope, state, value, key, childValue, path)\n\t\t)\n\t\treturn value\n\t}\n\t// Never finalize drafts owned by another scope.\n\tif (state.scope_ !== rootScope) return value\n\t// Unmodified draft, return the (frozen) original\n\tif (!state.modified_) {\n\t\tmaybeFreeze(rootScope, state.base_, true)\n\t\treturn state.base_\n\t}\n\t// Not finalized yet, let's do that now\n\tif (!state.finalized_) {\n\t\tstate.finalized_ = true\n\t\tstate.scope_.unfinalizedDrafts_--\n\t\tconst result = state.copy_\n\t\t// Finalize all children of the copy\n\t\t// For sets we clone before iterating, otherwise we can get in endless loop due to modifying during iteration, see #628\n\t\t// To preserve insertion order in all cases we then clear the set\n\t\t// And we let finalizeProperty know it needs to re-add non-draft children back to the target\n\t\tlet resultEach = result\n\t\tlet isSet = false\n\t\tif (state.type_ === ArchType.Set) {\n\t\t\tresultEach = new Set(result)\n\t\t\tresult.clear()\n\t\t\tisSet = true\n\t\t}\n\t\teach(resultEach, (key, childValue) =>\n\t\t\tfinalizeProperty(rootScope, state, result, key, childValue, path, isSet)\n\t\t)\n\t\t// everything inside is frozen, we can freeze here\n\t\tmaybeFreeze(rootScope, result, false)\n\t\t// first time finalizing, let's create those patches\n\t\tif (path && rootScope.patches_) {\n\t\t\tgetPlugin(\"Patches\").generatePatches_(\n\t\t\t\tstate,\n\t\t\t\tpath,\n\t\t\t\trootScope.patches_,\n\t\t\t\trootScope.inversePatches_!\n\t\t\t)\n\t\t}\n\t}\n\treturn state.copy_\n}\n\nfunction finalizeProperty(\n\trootScope: ImmerScope,\n\tparentState: undefined | ImmerState,\n\ttargetObject: any,\n\tprop: string | number,\n\tchildValue: any,\n\trootPath?: PatchPath,\n\ttargetIsSet?: boolean\n) {\n\tif (process.env.NODE_ENV !== \"production\" && childValue === targetObject)\n\t\tdie(5)\n\tif (isDraft(childValue)) {\n\t\tconst path =\n\t\t\trootPath &&\n\t\t\tparentState &&\n\t\t\tparentState!.type_ !== ArchType.Set && // Set objects are atomic since they have no keys.\n\t\t\t!has((parentState as Exclude<ImmerState, SetState>).assigned_!, prop) // Skip deep patches for assigned keys.\n\t\t\t\t? rootPath!.concat(prop)\n\t\t\t\t: undefined\n\t\t// Drafts owned by `scope` are finalized here.\n\t\tconst res = finalize(rootScope, childValue, path)\n\t\tset(targetObject, prop, res)\n\t\t// Drafts from another scope must prevented to be frozen\n\t\t// if we got a draft back from finalize, we're in a nested produce and shouldn't freeze\n\t\tif (isDraft(res)) {\n\t\t\trootScope.canAutoFreeze_ = false\n\t\t} else return\n\t} else if (targetIsSet) {\n\t\ttargetObject.add(childValue)\n\t}\n\t// Search new objects for unfinalized drafts. Frozen objects should never contain drafts.\n\tif (isDraftable(childValue) && !isFrozen(childValue)) {\n\t\tif (!rootScope.immer_.autoFreeze_ && rootScope.unfinalizedDrafts_ < 1) {\n\t\t\t// optimization: if an object is not a draft, and we don't have to\n\t\t\t// deepfreeze everything, and we are sure that no drafts are left in the remaining object\n\t\t\t// cause we saw and finalized all drafts already; we can stop visiting the rest of the tree.\n\t\t\t// This benefits especially adding large data tree's without further processing.\n\t\t\t// See add-data.js perf test\n\t\t\treturn\n\t\t}\n\t\tfinalize(rootScope, childValue)\n\t\t// Immer deep freezes plain objects, so if there is no parent state, we freeze as well\n\t\t// Per #590, we never freeze symbolic properties. Just to make sure don't accidentally interfere\n\t\t// with other frameworks.\n\t\tif (\n\t\t\t(!parentState || !parentState.scope_.parent_) &&\n\t\t\ttypeof prop !== \"symbol\" &&\n\t\t\tObject.prototype.propertyIsEnumerable.call(targetObject, prop)\n\t\t)\n\t\t\tmaybeFreeze(rootScope, childValue)\n\t}\n}\n\nfunction maybeFreeze(scope: ImmerScope, value: any, deep = false) {\n\t// we never freeze for a non-root scope; as it would prevent pruning for drafts inside wrapping objects\n\tif (!scope.parent_ && scope.immer_.autoFreeze_ && scope.canAutoFreeze_) {\n\t\tfreeze(value, deep)\n\t}\n}\n","import {\n\teach,\n\thas,\n\tis,\n\tisDraftable,\n\tshallowCopy,\n\tlatest,\n\tImmerBaseState,\n\tImmerState,\n\tDrafted,\n\tAnyObject,\n\tAnyArray,\n\tObjectish,\n\tgetCurrentScope,\n\tgetPrototypeOf,\n\tDRAFT_STATE,\n\tdie,\n\tcreateProxy,\n\tArchType,\n\tImmerScope\n} from \"../internal\"\n\ninterface ProxyBaseState extends ImmerBaseState {\n\tassigned_: {\n\t\t[property: string]: boolean\n\t}\n\tparent_?: ImmerState\n\trevoke_(): void\n}\n\nexport interface ProxyObjectState extends ProxyBaseState {\n\ttype_: ArchType.Object\n\tbase_: any\n\tcopy_: any\n\tdraft_: Drafted<AnyObject, ProxyObjectState>\n}\n\nexport interface ProxyArrayState extends ProxyBaseState {\n\ttype_: ArchType.Array\n\tbase_: AnyArray\n\tcopy_: AnyArray | null\n\tdraft_: Drafted<AnyArray, ProxyArrayState>\n}\n\ntype ProxyState = ProxyObjectState | ProxyArrayState\n\n/**\n * Returns a new draft of the `base` object.\n *\n * The second argument is the parent draft-state (used internally).\n */\nexport function createProxyProxy<T extends Objectish>(\n\tbase: T,\n\tparent?: ImmerState\n): Drafted<T, ProxyState> {\n\tconst isArray = Array.isArray(base)\n\tconst state: ProxyState = {\n\t\ttype_: isArray ? ArchType.Array : (ArchType.Object as any),\n\t\t// Track which produce call this is associated with.\n\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t// True for both shallow and deep changes.\n\t\tmodified_: false,\n\t\t// Used during finalization.\n\t\tfinalized_: false,\n\t\t// Track which properties have been assigned (true) or deleted (false).\n\t\tassigned_: {},\n\t\t// The parent draft state.\n\t\tparent_: parent,\n\t\t// The base state.\n\t\tbase_: base,\n\t\t// The base proxy.\n\t\tdraft_: null as any, // set below\n\t\t// The base copy with any updated values.\n\t\tcopy_: null,\n\t\t// Called by the `produce` function.\n\t\trevoke_: null as any,\n\t\tisManual_: false\n\t}\n\n\t// the traps must target something, a bit like the 'real' base.\n\t// but also, we need to be able to determine from the target what the relevant state is\n\t// (to avoid creating traps per instance to capture the state in closure,\n\t// and to avoid creating weird hidden properties as well)\n\t// So the trick is to use 'state' as the actual 'target'! (and make sure we intercept everything)\n\t// Note that in the case of an array, we put the state in an array to have better Reflect defaults ootb\n\tlet target: T = state as any\n\tlet traps: ProxyHandler<object | Array<any>> = objectTraps\n\tif (isArray) {\n\t\ttarget = [state] as any\n\t\ttraps = arrayTraps\n\t}\n\n\tconst {revoke, proxy} = Proxy.revocable(target, traps)\n\tstate.draft_ = proxy as any\n\tstate.revoke_ = revoke\n\treturn proxy as any\n}\n\n/**\n * Object drafts\n */\nexport const objectTraps: ProxyHandler<ProxyState> = {\n\tget(state, prop) {\n\t\tif (prop === DRAFT_STATE) return state\n\n\t\tconst source = latest(state)\n\t\tif (!has(source, prop)) {\n\t\t\t// non-existing or non-own property...\n\t\t\treturn readPropFromProto(state, source, prop)\n\t\t}\n\t\tconst value = source[prop]\n\t\tif (state.finalized_ || !isDraftable(value)) {\n\t\t\treturn value\n\t\t}\n\t\t// Check for existing draft in modified state.\n\t\t// Assigned values are never drafted. This catches any drafts we created, too.\n\t\tif (value === peek(state.base_, prop)) {\n\t\t\tprepareCopy(state)\n\t\t\treturn (state.copy_![prop as any] = createProxy(value, state))\n\t\t}\n\t\treturn value\n\t},\n\thas(state, prop) {\n\t\treturn prop in latest(state)\n\t},\n\townKeys(state) {\n\t\treturn Reflect.ownKeys(latest(state))\n\t},\n\tset(\n\t\tstate: ProxyObjectState,\n\t\tprop: string /* strictly not, but helps TS */,\n\t\tvalue\n\t) {\n\t\tconst desc = getDescriptorFromProto(latest(state), prop)\n\t\tif (desc?.set) {\n\t\t\t// special case: if this write is captured by a setter, we have\n\t\t\t// to trigger it with the correct context\n\t\t\tdesc.set.call(state.draft_, value)\n\t\t\treturn true\n\t\t}\n\t\tif (!state.modified_) {\n\t\t\t// the last check is because we need to be able to distinguish setting a non-existing to undefined (which is a change)\n\t\t\t// from setting an existing property with value undefined to undefined (which is not a change)\n\t\t\tconst current = peek(latest(state), prop)\n\t\t\t// special case, if we assigning the original value to a draft, we can ignore the assignment\n\t\t\tconst currentState: ProxyObjectState = current?.[DRAFT_STATE]\n\t\t\tif (currentState && currentState.base_ === value) {\n\t\t\t\tstate.copy_![prop] = value\n\t\t\t\tstate.assigned_[prop] = false\n\t\t\t\treturn true\n\t\t\t}\n\t\t\tif (is(value, current) && (value !== undefined || has(state.base_, prop)))\n\t\t\t\treturn true\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t}\n\n\t\tif (\n\t\t\t(state.copy_![prop] === value &&\n\t\t\t\t// special case: handle new props with value 'undefined'\n\t\t\t\t(value !== undefined || prop in state.copy_)) ||\n\t\t\t// special case: NaN\n\t\t\t(Number.isNaN(value) && Number.isNaN(state.copy_![prop]))\n\t\t)\n\t\t\treturn true\n\n\t\t// @ts-ignore\n\t\tstate.copy_![prop] = value\n\t\tstate.assigned_[prop] = true\n\t\treturn true\n\t},\n\tdeleteProperty(state, prop: string) {\n\t\t// The `undefined` check is a fast path for pre-existing keys.\n\t\tif (peek(state.base_, prop) !== undefined || prop in state.base_) {\n\t\t\tstate.assigned_[prop] = false\n\t\t\tprepareCopy(state)\n\t\t\tmarkChanged(state)\n\t\t} else {\n\t\t\t// if an originally not assigned property was deleted\n\t\t\tdelete state.assigned_[prop]\n\t\t}\n\t\tif (state.copy_) {\n\t\t\tdelete state.copy_[prop]\n\t\t}\n\t\treturn true\n\t},\n\t// Note: We never coerce `desc.value` into an Immer draft, because we can't make\n\t// the same guarantee in ES5 mode.\n\tgetOwnPropertyDescriptor(state, prop) {\n\t\tconst owner = latest(state)\n\t\tconst desc = Reflect.getOwnPropertyDescriptor(owner, prop)\n\t\tif (!desc) return desc\n\t\treturn {\n\t\t\twritable: true,\n\t\t\tconfigurable: state.type_ !== ArchType.Array || prop !== \"length\",\n\t\t\tenumerable: desc.enumerable,\n\t\t\tvalue: owner[prop]\n\t\t}\n\t},\n\tdefineProperty() {\n\t\tdie(11)\n\t},\n\tgetPrototypeOf(state) {\n\t\treturn getPrototypeOf(state.base_)\n\t},\n\tsetPrototypeOf() {\n\t\tdie(12)\n\t}\n}\n\n/**\n * Array drafts\n */\n\nconst arrayTraps: ProxyHandler<[ProxyArrayState]> = {}\neach(objectTraps, (key, fn) => {\n\t// @ts-ignore\n\tarrayTraps[key] = function() {\n\t\targuments[0] = arguments[0][0]\n\t\treturn fn.apply(this, arguments)\n\t}\n})\narrayTraps.deleteProperty = function(state, prop) {\n\tif (process.env.NODE_ENV !== \"production\" && isNaN(parseInt(prop as any)))\n\t\tdie(13)\n\t// @ts-ignore\n\treturn arrayTraps.set!.call(this, state, prop, undefined)\n}\narrayTraps.set = function(state, prop, value) {\n\tif (\n\t\tprocess.env.NODE_ENV !== \"production\" &&\n\t\tprop !== \"length\" &&\n\t\tisNaN(parseInt(prop as any))\n\t)\n\t\tdie(14)\n\treturn objectTraps.set!.call(this, state[0], prop, value, state[0])\n}\n\n// Access a property without creating an Immer draft.\nfunction peek(draft: Drafted, prop: PropertyKey) {\n\tconst state = draft[DRAFT_STATE]\n\tconst source = state ? latest(state) : draft\n\treturn source[prop]\n}\n\nfunction readPropFromProto(state: ImmerState, source: any, prop: PropertyKey) {\n\tconst desc = getDescriptorFromProto(source, prop)\n\treturn desc\n\t\t? `value` in desc\n\t\t\t? desc.value\n\t\t\t: // This is a very special case, if the prop is a getter defined by the\n\t\t\t  // prototype, we should invoke it with the draft as context!\n\t\t\t  desc.get?.call(state.draft_)\n\t\t: undefined\n}\n\nfunction getDescriptorFromProto(\n\tsource: any,\n\tprop: PropertyKey\n): PropertyDescriptor | undefined {\n\t// 'in' checks proto!\n\tif (!(prop in source)) return undefined\n\tlet proto = getPrototypeOf(source)\n\twhile (proto) {\n\t\tconst desc = Object.getOwnPropertyDescriptor(proto, prop)\n\t\tif (desc) return desc\n\t\tproto = getPrototypeOf(proto)\n\t}\n\treturn undefined\n}\n\nexport function markChanged(state: ImmerState) {\n\tif (!state.modified_) {\n\t\tstate.modified_ = true\n\t\tif (state.parent_) {\n\t\t\tmarkChanged(state.parent_)\n\t\t}\n\t}\n}\n\nexport function prepareCopy(state: {\n\tbase_: any\n\tcopy_: any\n\tscope_: ImmerScope\n}) {\n\tif (!state.copy_) {\n\t\tstate.copy_ = shallowCopy(\n\t\t\tstate.base_,\n\t\t\tstate.scope_.immer_.useStrictShallowCopy_\n\t\t)\n\t}\n}\n","import {\n\tIProduceWithPatches,\n\tIProduce,\n\tImmerState,\n\tDrafted,\n\tisDraftable,\n\tprocessResult,\n\tPatch,\n\tObjectish,\n\tDRAFT_STATE,\n\tDraft,\n\tPatchListener,\n\tisDraft,\n\tisMap,\n\tisSet,\n\tcreateProxyProxy,\n\tgetPlugin,\n\tdie,\n\tenterScope,\n\trevokeScope,\n\tleaveScope,\n\tusePatchesInScope,\n\tgetCurrentScope,\n\tNOTHING,\n\tfreeze,\n\tcurrent\n} from \"../internal\"\n\ninterface ProducersFns {\n\tproduce: IProduce\n\tproduceWithPatches: IProduceWithPatches\n}\n\nexport type StrictMode = boolean | \"class_only\";\n\nexport class Immer implements ProducersFns {\n\tautoFreeze_: boolean = true\n\tuseStrictShallowCopy_: StrictMode = false\n\n\tconstructor(config?: {\n\t\tautoFreeze?: boolean\n\t\tuseStrictShallowCopy?: StrictMode\n\t}) {\n\t\tif (typeof config?.autoFreeze === \"boolean\")\n\t\t\tthis.setAutoFreeze(config!.autoFreeze)\n\t\tif (typeof config?.useStrictShallowCopy === \"boolean\")\n\t\t\tthis.setUseStrictShallowCopy(config!.useStrictShallowCopy)\n\t}\n\n\t/**\n\t * The `produce` function takes a value and a \"recipe function\" (whose\n\t * return value often depends on the base state). The recipe function is\n\t * free to mutate its first argument however it wants. All mutations are\n\t * only ever applied to a __copy__ of the base state.\n\t *\n\t * Pass only a function to create a \"curried producer\" which relieves you\n\t * from passing the recipe function every time.\n\t *\n\t * Only plain objects and arrays are made mutable. All other objects are\n\t * considered uncopyable.\n\t *\n\t * Note: This function is __bound__ to its `Immer` instance.\n\t *\n\t * @param {any} base - the initial state\n\t * @param {Function} recipe - function that receives a proxy of the base state as first argument and which can be freely modified\n\t * @param {Function} patchListener - optional function that will be called with all the patches produced here\n\t * @returns {any} a new state, or the initial state if nothing was modified\n\t */\n\tproduce: IProduce = (base: any, recipe?: any, patchListener?: any) => {\n\t\t// curried invocation\n\t\tif (typeof base === \"function\" && typeof recipe !== \"function\") {\n\t\t\tconst defaultBase = recipe\n\t\t\trecipe = base\n\n\t\t\tconst self = this\n\t\t\treturn function curriedProduce(\n\t\t\t\tthis: any,\n\t\t\t\tbase = defaultBase,\n\t\t\t\t...args: any[]\n\t\t\t) {\n\t\t\t\treturn self.produce(base, (draft: Drafted) => recipe.call(this, draft, ...args)) // prettier-ignore\n\t\t\t}\n\t\t}\n\n\t\tif (typeof recipe !== \"function\") die(6)\n\t\tif (patchListener !== undefined && typeof patchListener !== \"function\")\n\t\t\tdie(7)\n\n\t\tlet result\n\n\t\t// Only plain objects, arrays, and \"immerable classes\" are drafted.\n\t\tif (isDraftable(base)) {\n\t\t\tconst scope = enterScope(this)\n\t\t\tconst proxy = createProxy(base, undefined)\n\t\t\tlet hasError = true\n\t\t\ttry {\n\t\t\t\tresult = recipe(proxy)\n\t\t\t\thasError = false\n\t\t\t} finally {\n\t\t\t\t// finally instead of catch + rethrow better preserves original stack\n\t\t\t\tif (hasError) revokeScope(scope)\n\t\t\t\telse leaveScope(scope)\n\t\t\t}\n\t\t\tusePatchesInScope(scope, patchListener)\n\t\t\treturn processResult(result, scope)\n\t\t} else if (!base || typeof base !== \"object\") {\n\t\t\tresult = recipe(base)\n\t\t\tif (result === undefined) result = base\n\t\t\tif (result === NOTHING) result = undefined\n\t\t\tif (this.autoFreeze_) freeze(result, true)\n\t\t\tif (patchListener) {\n\t\t\t\tconst p: Patch[] = []\n\t\t\t\tconst ip: Patch[] = []\n\t\t\t\tgetPlugin(\"Patches\").generateReplacementPatches_(base, result, p, ip)\n\t\t\t\tpatchListener(p, ip)\n\t\t\t}\n\t\t\treturn result\n\t\t} else die(1, base)\n\t}\n\n\tproduceWithPatches: IProduceWithPatches = (base: any, recipe?: any): any => {\n\t\t// curried invocation\n\t\tif (typeof base === \"function\") {\n\t\t\treturn (state: any, ...args: any[]) =>\n\t\t\t\tthis.produceWithPatches(state, (draft: any) => base(draft, ...args))\n\t\t}\n\n\t\tlet patches: Patch[], inversePatches: Patch[]\n\t\tconst result = this.produce(base, recipe, (p: Patch[], ip: Patch[]) => {\n\t\t\tpatches = p\n\t\t\tinversePatches = ip\n\t\t})\n\t\treturn [result, patches!, inversePatches!]\n\t}\n\n\tcreateDraft<T extends Objectish>(base: T): Draft<T> {\n\t\tif (!isDraftable(base)) die(8)\n\t\tif (isDraft(base)) base = current(base)\n\t\tconst scope = enterScope(this)\n\t\tconst proxy = createProxy(base, undefined)\n\t\tproxy[DRAFT_STATE].isManual_ = true\n\t\tleaveScope(scope)\n\t\treturn proxy as any\n\t}\n\n\tfinishDraft<D extends Draft<any>>(\n\t\tdraft: D,\n\t\tpatchListener?: PatchListener\n\t): D extends Draft<infer T> ? T : never {\n\t\tconst state: ImmerState = draft && (draft as any)[DRAFT_STATE]\n\t\tif (!state || !state.isManual_) die(9)\n\t\tconst {scope_: scope} = state\n\t\tusePatchesInScope(scope, patchListener)\n\t\treturn processResult(undefined, scope)\n\t}\n\n\t/**\n\t * Pass true to automatically freeze all copies created by Immer.\n\t *\n\t * By default, auto-freezing is enabled.\n\t */\n\tsetAutoFreeze(value: boolean) {\n\t\tthis.autoFreeze_ = value\n\t}\n\n\t/**\n\t * Pass true to enable strict shallow copy.\n\t *\n\t * By default, immer does not copy the object descriptors such as getter, setter and non-enumrable properties.\n\t */\n\tsetUseStrictShallowCopy(value: StrictMode) {\n\t\tthis.useStrictShallowCopy_ = value\n\t}\n\n\tapplyPatches<T extends Objectish>(base: T, patches: readonly Patch[]): T {\n\t\t// If a patch replaces the entire state, take that replacement as base\n\t\t// before applying patches\n\t\tlet i: number\n\t\tfor (i = patches.length - 1; i >= 0; i--) {\n\t\t\tconst patch = patches[i]\n\t\t\tif (patch.path.length === 0 && patch.op === \"replace\") {\n\t\t\t\tbase = patch.value\n\t\t\t\tbreak\n\t\t\t}\n\t\t}\n\t\t// If there was a patch that replaced the entire state, start from the\n\t\t// patch after that.\n\t\tif (i > -1) {\n\t\t\tpatches = patches.slice(i + 1)\n\t\t}\n\n\t\tconst applyPatchesImpl = getPlugin(\"Patches\").applyPatches_\n\t\tif (isDraft(base)) {\n\t\t\t// N.B: never hits if some patch a replacement, patches are never drafts\n\t\t\treturn applyPatchesImpl(base, patches)\n\t\t}\n\t\t// Otherwise, produce a copy of the base state.\n\t\treturn this.produce(base, (draft: Drafted) =>\n\t\t\tapplyPatchesImpl(draft, patches)\n\t\t)\n\t}\n}\n\nexport function createProxy<T extends Objectish>(\n\tvalue: T,\n\tparent?: ImmerState\n): Drafted<T, ImmerState> {\n\t// precondition: createProxy should be guarded by isDraftable, so we know we can safely draft\n\tconst draft: Drafted = isMap(value)\n\t\t? getPlugin(\"MapSet\").proxyMap_(value, parent)\n\t\t: isSet(value)\n\t\t? getPlugin(\"MapSet\").proxySet_(value, parent)\n\t\t: createProxyProxy(value, parent)\n\n\tconst scope = parent ? parent.scope_ : getCurrentScope()\n\tscope.drafts_.push(draft)\n\treturn draft\n}\n","import {\n\tdie,\n\tisDraft,\n\tshallowCopy,\n\teach,\n\tDRAFT_STATE,\n\tset,\n\tImmerState,\n\tisDraftable,\n\tisFrozen\n} from \"../internal\"\n\n/** Takes a snapshot of the current state of a draft and finalizes it (but without freezing). This is a great utility to print the current state during debugging (no Proxies in the way). The output of current can also be safely leaked outside the producer. */\nexport function current<T>(value: T): T\nexport function current(value: any): any {\n\tif (!isDraft(value)) die(10, value)\n\treturn currentImpl(value)\n}\n\nfunction currentImpl(value: any): any {\n\tif (!isDraftable(value) || isFrozen(value)) return value\n\tconst state: ImmerState | undefined = value[DRAFT_STATE]\n\tlet copy: any\n\tif (state) {\n\t\tif (!state.modified_) return state.base_\n\t\t// Optimization: avoid generating new drafts during copying\n\t\tstate.finalized_ = true\n\t\tcopy = shallowCopy(value, state.scope_.immer_.useStrictShallowCopy_)\n\t} else {\n\t\tcopy = shallowCopy(value, true)\n\t}\n\t// recurse\n\teach(copy, (key, childValue) => {\n\t\tset(copy, key, currentImpl(childValue))\n\t})\n\tif (state) {\n\t\tstate.finalized_ = false\n\t}\n\treturn copy\n}\n","import {immerable} from \"../immer\"\nimport {\n\tImmerState,\n\tPatch,\n\tSetState,\n\tProxyArrayState,\n\tMapState,\n\tProxyObjectState,\n\tPatchPath,\n\tget,\n\teach,\n\thas,\n\tgetArchtype,\n\tgetPrototypeOf,\n\tisSet,\n\tisMap,\n\tloadPlugin,\n\tArchType,\n\tdie,\n\tisDraft,\n\tisDraftable,\n\tNOTHING,\n\terrors\n} from \"../internal\"\n\nexport function enablePatches() {\n\tconst errorOffset = 16\n\tif (process.env.NODE_ENV !== \"production\") {\n\t\terrors.push(\n\t\t\t'Sets cannot have \"replace\" patches.',\n\t\t\tfunction(op: string) {\n\t\t\t\treturn \"Unsupported patch operation: \" + op\n\t\t\t},\n\t\t\tfunction(path: string) {\n\t\t\t\treturn \"Cannot apply patch, path doesn't resolve: \" + path\n\t\t\t},\n\t\t\t\"Patching reserved attributes like __proto__, prototype and constructor is not allowed\"\n\t\t)\n\t}\n\n\tconst REPLACE = \"replace\"\n\tconst ADD = \"add\"\n\tconst REMOVE = \"remove\"\n\n\tfunction generatePatches_(\n\t\tstate: ImmerState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t): void {\n\t\tswitch (state.type_) {\n\t\t\tcase ArchType.Object:\n\t\t\tcase ArchType.Map:\n\t\t\t\treturn generatePatchesFromAssigned(\n\t\t\t\t\tstate,\n\t\t\t\t\tbasePath,\n\t\t\t\t\tpatches,\n\t\t\t\t\tinversePatches\n\t\t\t\t)\n\t\t\tcase ArchType.Array:\n\t\t\t\treturn generateArrayPatches(state, basePath, patches, inversePatches)\n\t\t\tcase ArchType.Set:\n\t\t\t\treturn generateSetPatches(\n\t\t\t\t\t(state as any) as SetState,\n\t\t\t\t\tbasePath,\n\t\t\t\t\tpatches,\n\t\t\t\t\tinversePatches\n\t\t\t\t)\n\t\t}\n\t}\n\n\tfunction generateArrayPatches(\n\t\tstate: ProxyArrayState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tlet {base_, assigned_} = state\n\t\tlet copy_ = state.copy_!\n\n\t\t// Reduce complexity by ensuring `base` is never longer.\n\t\tif (copy_.length < base_.length) {\n\t\t\t// @ts-ignore\n\t\t\t;[base_, copy_] = [copy_, base_]\n\t\t\t;[patches, inversePatches] = [inversePatches, patches]\n\t\t}\n\n\t\t// Process replaced indices.\n\t\tfor (let i = 0; i < base_.length; i++) {\n\t\t\tif (assigned_[i] && copy_[i] !== base_[i]) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: REPLACE,\n\t\t\t\t\tpath,\n\t\t\t\t\t// Need to maybe clone it, as it can in fact be the original value\n\t\t\t\t\t// due to the base/copy inversion at the start of this function\n\t\t\t\t\tvalue: clonePatchValueIfNeeded(copy_[i])\n\t\t\t\t})\n\t\t\t\tinversePatches.push({\n\t\t\t\t\top: REPLACE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue: clonePatchValueIfNeeded(base_[i])\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\n\t\t// Process added indices.\n\t\tfor (let i = base_.length; i < copy_.length; i++) {\n\t\t\tconst path = basePath.concat([i])\n\t\t\tpatches.push({\n\t\t\t\top: ADD,\n\t\t\t\tpath,\n\t\t\t\t// Need to maybe clone it, as it can in fact be the original value\n\t\t\t\t// due to the base/copy inversion at the start of this function\n\t\t\t\tvalue: clonePatchValueIfNeeded(copy_[i])\n\t\t\t})\n\t\t}\n\t\tfor (let i = copy_.length - 1; base_.length <= i; --i) {\n\t\t\tconst path = basePath.concat([i])\n\t\t\tinversePatches.push({\n\t\t\t\top: REMOVE,\n\t\t\t\tpath\n\t\t\t})\n\t\t}\n\t}\n\n\t// This is used for both Map objects and normal objects.\n\tfunction generatePatchesFromAssigned(\n\t\tstate: MapState | ProxyObjectState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tconst {base_, copy_} = state\n\t\teach(state.assigned_!, (key, assignedValue) => {\n\t\t\tconst origValue = get(base_, key)\n\t\t\tconst value = get(copy_!, key)\n\t\t\tconst op = !assignedValue ? REMOVE : has(base_, key) ? REPLACE : ADD\n\t\t\tif (origValue === value && op === REPLACE) return\n\t\t\tconst path = basePath.concat(key as any)\n\t\t\tpatches.push(op === REMOVE ? {op, path} : {op, path, value})\n\t\t\tinversePatches.push(\n\t\t\t\top === ADD\n\t\t\t\t\t? {op: REMOVE, path}\n\t\t\t\t\t: op === REMOVE\n\t\t\t\t\t? {op: ADD, path, value: clonePatchValueIfNeeded(origValue)}\n\t\t\t\t\t: {op: REPLACE, path, value: clonePatchValueIfNeeded(origValue)}\n\t\t\t)\n\t\t})\n\t}\n\n\tfunction generateSetPatches(\n\t\tstate: SetState,\n\t\tbasePath: PatchPath,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t) {\n\t\tlet {base_, copy_} = state\n\n\t\tlet i = 0\n\t\tbase_.forEach((value: any) => {\n\t\t\tif (!copy_!.has(value)) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: REMOVE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t\tinversePatches.unshift({\n\t\t\t\t\top: ADD,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t}\n\t\t\ti++\n\t\t})\n\t\ti = 0\n\t\tcopy_!.forEach((value: any) => {\n\t\t\tif (!base_.has(value)) {\n\t\t\t\tconst path = basePath.concat([i])\n\t\t\t\tpatches.push({\n\t\t\t\t\top: ADD,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t\tinversePatches.unshift({\n\t\t\t\t\top: REMOVE,\n\t\t\t\t\tpath,\n\t\t\t\t\tvalue\n\t\t\t\t})\n\t\t\t}\n\t\t\ti++\n\t\t})\n\t}\n\n\tfunction generateReplacementPatches_(\n\t\tbaseValue: any,\n\t\treplacement: any,\n\t\tpatches: Patch[],\n\t\tinversePatches: Patch[]\n\t): void {\n\t\tpatches.push({\n\t\t\top: REPLACE,\n\t\t\tpath: [],\n\t\t\tvalue: replacement === NOTHING ? undefined : replacement\n\t\t})\n\t\tinversePatches.push({\n\t\t\top: REPLACE,\n\t\t\tpath: [],\n\t\t\tvalue: baseValue\n\t\t})\n\t}\n\n\tfunction applyPatches_<T>(draft: T, patches: readonly Patch[]): T {\n\t\tpatches.forEach(patch => {\n\t\t\tconst {path, op} = patch\n\n\t\t\tlet base: any = draft\n\t\t\tfor (let i = 0; i < path.length - 1; i++) {\n\t\t\t\tconst parentType = getArchtype(base)\n\t\t\t\tlet p = path[i]\n\t\t\t\tif (typeof p !== \"string\" && typeof p !== \"number\") {\n\t\t\t\t\tp = \"\" + p\n\t\t\t\t}\n\n\t\t\t\t// See #738, avoid prototype pollution\n\t\t\t\tif (\n\t\t\t\t\t(parentType === ArchType.Object || parentType === ArchType.Array) &&\n\t\t\t\t\t(p === \"__proto__\" || p === \"constructor\")\n\t\t\t\t)\n\t\t\t\t\tdie(errorOffset + 3)\n\t\t\t\tif (typeof base === \"function\" && p === \"prototype\")\n\t\t\t\t\tdie(errorOffset + 3)\n\t\t\t\tbase = get(base, p)\n\t\t\t\tif (typeof base !== \"object\") die(errorOffset + 2, path.join(\"/\"))\n\t\t\t}\n\n\t\t\tconst type = getArchtype(base)\n\t\t\tconst value = deepClonePatchValue(patch.value) // used to clone patch to ensure original patch is not modified, see #411\n\t\t\tconst key = path[path.length - 1]\n\t\t\tswitch (op) {\n\t\t\t\tcase REPLACE:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase ArchType.Map:\n\t\t\t\t\t\t\treturn base.set(key, value)\n\t\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\t\tcase ArchType.Set:\n\t\t\t\t\t\t\tdie(errorOffset)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\t// if value is an object, then it's assigned by reference\n\t\t\t\t\t\t\t// in the following add or remove ops, the value field inside the patch will also be modifyed\n\t\t\t\t\t\t\t// so we use value from the cloned patch\n\t\t\t\t\t\t\t// @ts-ignore\n\t\t\t\t\t\t\treturn (base[key] = value)\n\t\t\t\t\t}\n\t\t\t\tcase ADD:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase ArchType.Array:\n\t\t\t\t\t\t\treturn key === \"-\"\n\t\t\t\t\t\t\t\t? base.push(value)\n\t\t\t\t\t\t\t\t: base.splice(key as any, 0, value)\n\t\t\t\t\t\tcase ArchType.Map:\n\t\t\t\t\t\t\treturn base.set(key, value)\n\t\t\t\t\t\tcase ArchType.Set:\n\t\t\t\t\t\t\treturn base.add(value)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn (base[key] = value)\n\t\t\t\t\t}\n\t\t\t\tcase REMOVE:\n\t\t\t\t\tswitch (type) {\n\t\t\t\t\t\tcase ArchType.Array:\n\t\t\t\t\t\t\treturn base.splice(key as any, 1)\n\t\t\t\t\t\tcase ArchType.Map:\n\t\t\t\t\t\t\treturn base.delete(key)\n\t\t\t\t\t\tcase ArchType.Set:\n\t\t\t\t\t\t\treturn base.delete(patch.value)\n\t\t\t\t\t\tdefault:\n\t\t\t\t\t\t\treturn delete base[key]\n\t\t\t\t\t}\n\t\t\t\tdefault:\n\t\t\t\t\tdie(errorOffset + 1, op)\n\t\t\t}\n\t\t})\n\n\t\treturn draft\n\t}\n\n\t// optimize: this is quite a performance hit, can we detect intelligently when it is needed?\n\t// E.g. auto-draft when new objects from outside are assigned and modified?\n\t// (See failing test when deepClone just returns obj)\n\tfunction deepClonePatchValue<T>(obj: T): T\n\tfunction deepClonePatchValue(obj: any) {\n\t\tif (!isDraftable(obj)) return obj\n\t\tif (Array.isArray(obj)) return obj.map(deepClonePatchValue)\n\t\tif (isMap(obj))\n\t\t\treturn new Map(\n\t\t\t\tArray.from(obj.entries()).map(([k, v]) => [k, deepClonePatchValue(v)])\n\t\t\t)\n\t\tif (isSet(obj)) return new Set(Array.from(obj).map(deepClonePatchValue))\n\t\tconst cloned = Object.create(getPrototypeOf(obj))\n\t\tfor (const key in obj) cloned[key] = deepClonePatchValue(obj[key])\n\t\tif (has(obj, immerable)) cloned[immerable] = obj[immerable]\n\t\treturn cloned\n\t}\n\n\tfunction clonePatchValueIfNeeded<T>(obj: T): T {\n\t\tif (isDraft(obj)) {\n\t\t\treturn deepClonePatchValue(obj)\n\t\t} else return obj\n\t}\n\n\tloadPlugin(\"Patches\", {\n\t\tapplyPatches_,\n\t\tgeneratePatches_,\n\t\tgenerateReplacementPatches_\n\t})\n}\n","// types only!\nimport {\n\tImmerState,\n\tAnyMap,\n\tAnySet,\n\tMapState,\n\tSetState,\n\tDRAFT_STATE,\n\tgetCurrentScope,\n\tlatest,\n\tisDraftable,\n\tcreateProxy,\n\tloadPlugin,\n\tmarkChanged,\n\tdie,\n\tArchType,\n\teach\n} from \"../internal\"\n\nexport function enableMapSet() {\n\tclass DraftMap extends Map {\n\t\t[DRAFT_STATE]: MapState\n\n\t\tconstructor(target: AnyMap, parent?: ImmerState) {\n\t\t\tsuper()\n\t\t\tthis[DRAFT_STATE] = {\n\t\t\t\ttype_: ArchType.Map,\n\t\t\t\tparent_: parent,\n\t\t\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t\t\tmodified_: false,\n\t\t\t\tfinalized_: false,\n\t\t\t\tcopy_: undefined,\n\t\t\t\tassigned_: undefined,\n\t\t\t\tbase_: target,\n\t\t\t\tdraft_: this as any,\n\t\t\t\tisManual_: false,\n\t\t\t\trevoked_: false\n\t\t\t}\n\t\t}\n\n\t\tget size(): number {\n\t\t\treturn latest(this[DRAFT_STATE]).size\n\t\t}\n\n\t\thas(key: any): boolean {\n\t\t\treturn latest(this[DRAFT_STATE]).has(key)\n\t\t}\n\n\t\tset(key: any, value: any) {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (!latest(state).has(key) || latest(state).get(key) !== value) {\n\t\t\t\tprepareMapCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.assigned_!.set(key, true)\n\t\t\t\tstate.copy_!.set(key, value)\n\t\t\t\tstate.assigned_!.set(key, true)\n\t\t\t}\n\t\t\treturn this\n\t\t}\n\n\t\tdelete(key: any): boolean {\n\t\t\tif (!this.has(key)) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareMapCopy(state)\n\t\t\tmarkChanged(state)\n\t\t\tif (state.base_.has(key)) {\n\t\t\t\tstate.assigned_!.set(key, false)\n\t\t\t} else {\n\t\t\t\tstate.assigned_!.delete(key)\n\t\t\t}\n\t\t\tstate.copy_!.delete(key)\n\t\t\treturn true\n\t\t}\n\n\t\tclear() {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (latest(state).size) {\n\t\t\t\tprepareMapCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.assigned_ = new Map()\n\t\t\t\teach(state.base_, key => {\n\t\t\t\t\tstate.assigned_!.set(key, false)\n\t\t\t\t})\n\t\t\t\tstate.copy_!.clear()\n\t\t\t}\n\t\t}\n\n\t\tforEach(cb: (value: any, key: any, self: any) => void, thisArg?: any) {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tlatest(state).forEach((_value: any, key: any, _map: any) => {\n\t\t\t\tcb.call(thisArg, this.get(key), key, this)\n\t\t\t})\n\t\t}\n\n\t\tget(key: any): any {\n\t\t\tconst state: MapState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tconst value = latest(state).get(key)\n\t\t\tif (state.finalized_ || !isDraftable(value)) {\n\t\t\t\treturn value\n\t\t\t}\n\t\t\tif (value !== state.base_.get(key)) {\n\t\t\t\treturn value // either already drafted or reassigned\n\t\t\t}\n\t\t\t// despite what it looks, this creates a draft only once, see above condition\n\t\t\tconst draft = createProxy(value, state)\n\t\t\tprepareMapCopy(state)\n\t\t\tstate.copy_!.set(key, draft)\n\t\t\treturn draft\n\t\t}\n\n\t\tkeys(): IterableIterator<any> {\n\t\t\treturn latest(this[DRAFT_STATE]).keys()\n\t\t}\n\n\t\tvalues(): IterableIterator<any> {\n\t\t\tconst iterator = this.keys()\n\t\t\treturn {\n\t\t\t\t[Symbol.iterator]: () => this.values(),\n\t\t\t\tnext: () => {\n\t\t\t\t\tconst r = iterator.next()\n\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\tif (r.done) return r\n\t\t\t\t\tconst value = this.get(r.value)\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} as any\n\t\t}\n\n\t\tentries(): IterableIterator<[any, any]> {\n\t\t\tconst iterator = this.keys()\n\t\t\treturn {\n\t\t\t\t[Symbol.iterator]: () => this.entries(),\n\t\t\t\tnext: () => {\n\t\t\t\t\tconst r = iterator.next()\n\t\t\t\t\t/* istanbul ignore next */\n\t\t\t\t\tif (r.done) return r\n\t\t\t\t\tconst value = this.get(r.value)\n\t\t\t\t\treturn {\n\t\t\t\t\t\tdone: false,\n\t\t\t\t\t\tvalue: [r.value, value]\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} as any\n\t\t}\n\n\t\t[Symbol.iterator]() {\n\t\t\treturn this.entries()\n\t\t}\n\t}\n\n\tfunction proxyMap_<T extends AnyMap>(target: T, parent?: ImmerState): T {\n\t\t// @ts-ignore\n\t\treturn new DraftMap(target, parent)\n\t}\n\n\tfunction prepareMapCopy(state: MapState) {\n\t\tif (!state.copy_) {\n\t\t\tstate.assigned_ = new Map()\n\t\t\tstate.copy_ = new Map(state.base_)\n\t\t}\n\t}\n\n\tclass DraftSet extends Set {\n\t\t[DRAFT_STATE]: SetState\n\t\tconstructor(target: AnySet, parent?: ImmerState) {\n\t\t\tsuper()\n\t\t\tthis[DRAFT_STATE] = {\n\t\t\t\ttype_: ArchType.Set,\n\t\t\t\tparent_: parent,\n\t\t\t\tscope_: parent ? parent.scope_ : getCurrentScope()!,\n\t\t\t\tmodified_: false,\n\t\t\t\tfinalized_: false,\n\t\t\t\tcopy_: undefined,\n\t\t\t\tbase_: target,\n\t\t\t\tdraft_: this,\n\t\t\t\tdrafts_: new Map(),\n\t\t\t\trevoked_: false,\n\t\t\t\tisManual_: false\n\t\t\t}\n\t\t}\n\n\t\tget size(): number {\n\t\t\treturn latest(this[DRAFT_STATE]).size\n\t\t}\n\n\t\thas(value: any): boolean {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\t// bit of trickery here, to be able to recognize both the value, and the draft of its value\n\t\t\tif (!state.copy_) {\n\t\t\t\treturn state.base_.has(value)\n\t\t\t}\n\t\t\tif (state.copy_.has(value)) return true\n\t\t\tif (state.drafts_.has(value) && state.copy_.has(state.drafts_.get(value)))\n\t\t\t\treturn true\n\t\t\treturn false\n\t\t}\n\n\t\tadd(value: any): any {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (!this.has(value)) {\n\t\t\t\tprepareSetCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.copy_!.add(value)\n\t\t\t}\n\t\t\treturn this\n\t\t}\n\n\t\tdelete(value: any): any {\n\t\t\tif (!this.has(value)) {\n\t\t\t\treturn false\n\t\t\t}\n\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareSetCopy(state)\n\t\t\tmarkChanged(state)\n\t\t\treturn (\n\t\t\t\tstate.copy_!.delete(value) ||\n\t\t\t\t(state.drafts_.has(value)\n\t\t\t\t\t? state.copy_!.delete(state.drafts_.get(value))\n\t\t\t\t\t: /* istanbul ignore next */ false)\n\t\t\t)\n\t\t}\n\n\t\tclear() {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tif (latest(state).size) {\n\t\t\t\tprepareSetCopy(state)\n\t\t\t\tmarkChanged(state)\n\t\t\t\tstate.copy_!.clear()\n\t\t\t}\n\t\t}\n\n\t\tvalues(): IterableIterator<any> {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareSetCopy(state)\n\t\t\treturn state.copy_!.values()\n\t\t}\n\n\t\tentries(): IterableIterator<[any, any]> {\n\t\t\tconst state: SetState = this[DRAFT_STATE]\n\t\t\tassertUnrevoked(state)\n\t\t\tprepareSetCopy(state)\n\t\t\treturn state.copy_!.entries()\n\t\t}\n\n\t\tkeys(): IterableIterator<any> {\n\t\t\treturn this.values()\n\t\t}\n\n\t\t[Symbol.iterator]() {\n\t\t\treturn this.values()\n\t\t}\n\n\t\tforEach(cb: any, thisArg?: any) {\n\t\t\tconst iterator = this.values()\n\t\t\tlet result = iterator.next()\n\t\t\twhile (!result.done) {\n\t\t\t\tcb.call(thisArg, result.value, result.value, this)\n\t\t\t\tresult = iterator.next()\n\t\t\t}\n\t\t}\n\t}\n\tfunction proxySet_<T extends AnySet>(target: T, parent?: ImmerState): T {\n\t\t// @ts-ignore\n\t\treturn new DraftSet(target, parent)\n\t}\n\n\tfunction prepareSetCopy(state: SetState) {\n\t\tif (!state.copy_) {\n\t\t\t// create drafts for all entries to preserve insertion order\n\t\t\tstate.copy_ = new Set()\n\t\t\tstate.base_.forEach(value => {\n\t\t\t\tif (isDraftable(value)) {\n\t\t\t\t\tconst draft = createProxy(value, state)\n\t\t\t\t\tstate.drafts_.set(value, draft)\n\t\t\t\t\tstate.copy_!.add(draft)\n\t\t\t\t} else {\n\t\t\t\t\tstate.copy_!.add(value)\n\t\t\t\t}\n\t\t\t})\n\t\t}\n\t}\n\n\tfunction assertUnrevoked(state: any /*ES5State | MapState | SetState*/) {\n\t\tif (state.revoked_) die(3, JSON.stringify(latest(state)))\n\t}\n\n\tloadPlugin(\"MapSet\", {proxyMap_, proxySet_})\n}\n","import {\n\tIProduce,\n\tIProduceWithPatches,\n\tImmer,\n\tDraft,\n\tImmutable\n} from \"./internal\"\n\nexport {\n\tDraft,\n\tWritableDraft,\n\tImmutable,\n\tPatch,\n\tPatchListener,\n\tProducer,\n\toriginal,\n\tcurrent,\n\tisDraft,\n\tisDraftable,\n\tNOTHING as nothing,\n\tDRAFTABLE as immerable,\n\tfreeze,\n\tObjectish,\n\tStrictMode\n} from \"./internal\"\n\nconst immer = new Immer()\n\n/**\n * The `produce` function takes a value and a \"recipe function\" (whose\n * return value often depends on the base state). The recipe function is\n * free to mutate its first argument however it wants. All mutations are\n * only ever applied to a __copy__ of the base state.\n *\n * Pass only a function to create a \"curried producer\" which relieves you\n * from passing the recipe function every time.\n *\n * Only plain objects and arrays are made mutable. All other objects are\n * considered uncopyable.\n *\n * Note: This function is __bound__ to its `Immer` instance.\n *\n * @param {any} base - the initial state\n * @param {Function} producer - function that receives a proxy of the base state as first argument and which can be freely modified\n * @param {Function} patchListener - optional function that will be called with all the patches produced here\n * @returns {any} a new state, or the initial state if nothing was modified\n */\nexport const produce: IProduce = immer.produce\n\n/**\n * Like `produce`, but `produceWithPatches` always returns a tuple\n * [nextState, patches, inversePatches] (instead of just the next state)\n */\nexport const produceWithPatches: IProduceWithPatches = immer.produceWithPatches.bind(\n\timmer\n)\n\n/**\n * Pass true to automatically freeze all copies created by Immer.\n *\n * Always freeze by default, even in production mode\n */\nexport const setAutoFreeze = immer.setAutoFreeze.bind(immer)\n\n/**\n * Pass true to enable strict shallow copy.\n *\n * By default, immer does not copy the object descriptors such as getter, setter and non-enumrable properties.\n */\nexport const setUseStrictShallowCopy = immer.setUseStrictShallowCopy.bind(immer)\n\n/**\n * Apply an array of Immer patches to the first argument.\n *\n * This function is a producer, which means copy-on-write is in effect.\n */\nexport const applyPatches = immer.applyPatches.bind(immer)\n\n/**\n * Create an Immer draft from the given base state, which may be a draft itself.\n * The draft can be modified until you finalize it with the `finishDraft` function.\n */\nexport const createDraft = immer.createDraft.bind(immer)\n\n/**\n * Finalize an Immer draft from a `createDraft` call, returning the base state\n * (if no changes were made) or a modified copy. The draft must *not* be\n * mutated afterwards.\n *\n * Pass a function as the 2nd argument to generate Immer patches based on the\n * changes that were made.\n */\nexport const finishDraft = immer.finishDraft.bind(immer)\n\n/**\n * This function is actually a no-op, but can be used to cast an immutable type\n * to an draft type and make TypeScript happy\n *\n * @param value\n */\nexport function castDraft<T>(value: T): Draft<T> {\n\treturn value as any\n}\n\n/**\n * This function is actually a no-op, but can be used to cast a mutable type\n * to an immutable type and make TypeScript happy\n * @param value\n */\nexport function castImmutable<T>(value: T): Immutable<T> {\n\treturn value as any\n}\n\nexport {Immer}\n\nexport {enablePatches} from \"./plugins/patches\"\nexport {enableMapSet} from \"./plugins/mapset\"\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}