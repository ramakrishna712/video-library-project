{"ast":null,"code":"import memoize from'./memoize.js';/** Used as the maximum memoize cache size. */var MAX_MEMOIZE_SIZE=500;/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */function memoizeCapped(func){var result=memoize(func,function(key){if(cache.size===MAX_MEMOIZE_SIZE){cache.clear();}return key;});var cache=result.cache;return result;}export default memoizeCapped;","map":{"version":3,"names":["memoize","MAX_MEMOIZE_SIZE","memoizeCapped","func","result","key","cache","size","clear"],"sources":["C:/Users/Rama Krishna/videolibrary-app/frontend/src/node_modules/lodash-es/_memoizeCapped.js"],"sourcesContent":["import memoize from './memoize.js';\n\n/** Used as the maximum memoize cache size. */\nvar MAX_MEMOIZE_SIZE = 500;\n\n/**\n * A specialized version of `_.memoize` which clears the memoized function's\n * cache when it exceeds `MAX_MEMOIZE_SIZE`.\n *\n * @private\n * @param {Function} func The function to have its output memoized.\n * @returns {Function} Returns the new memoized function.\n */\nfunction memoizeCapped(func) {\n  var result = memoize(func, function(key) {\n    if (cache.size === MAX_MEMOIZE_SIZE) {\n      cache.clear();\n    }\n    return key;\n  });\n\n  var cache = result.cache;\n  return result;\n}\n\nexport default memoizeCapped;\n"],"mappings":"AAAA,MAAO,CAAAA,OAAO,KAAM,cAAc,CAElC,8CACA,GAAI,CAAAC,gBAAgB,CAAG,GAAG,CAE1B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,QAAS,CAAAC,aAAaA,CAACC,IAAI,CAAE,CAC3B,GAAI,CAAAC,MAAM,CAAGJ,OAAO,CAACG,IAAI,CAAE,SAASE,GAAG,CAAE,CACvC,GAAIC,KAAK,CAACC,IAAI,GAAKN,gBAAgB,CAAE,CACnCK,KAAK,CAACE,KAAK,CAAC,CAAC,CACf,CACA,MAAO,CAAAH,GAAG,CACZ,CAAC,CAAC,CAEF,GAAI,CAAAC,KAAK,CAAGF,MAAM,CAACE,KAAK,CACxB,MAAO,CAAAF,MAAM,CACf,CAEA,cAAe,CAAAF,aAAa","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}