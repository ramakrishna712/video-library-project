{"ast":null,"code":"/**\n * Topological sorting function\n *\n * @param {Array} edges\n * @returns {Array}\n */module.exports=function(edges){return toposort(uniqueNodes(edges),edges);};module.exports.array=toposort;function toposort(nodes,edges){var cursor=nodes.length,sorted=new Array(cursor),visited={},i=cursor// Better data structures make algorithm much faster.\n,outgoingEdges=makeOutgoingEdges(edges),nodesHash=makeNodesHash(nodes);// check for unknown nodes\nedges.forEach(function(edge){if(!nodesHash.has(edge[0])||!nodesHash.has(edge[1])){throw new Error('Unknown node. There is an unknown node in the supplied edges.');}});while(i--){if(!visited[i])visit(nodes[i],i,new Set());}return sorted;function visit(node,i,predecessors){if(predecessors.has(node)){var nodeRep;try{nodeRep=\", node was:\"+JSON.stringify(node);}catch(e){nodeRep=\"\";}throw new Error('Cyclic dependency'+nodeRep);}if(!nodesHash.has(node)){throw new Error('Found unknown node. Make sure to provided all involved nodes. Unknown node: '+JSON.stringify(node));}if(visited[i])return;visited[i]=true;var outgoing=outgoingEdges.get(node)||new Set();outgoing=Array.from(outgoing);if(i=outgoing.length){predecessors.add(node);do{var child=outgoing[--i];visit(child,nodesHash.get(child),predecessors);}while(i);predecessors.delete(node);}sorted[--cursor]=node;}}function uniqueNodes(arr){var res=new Set();for(var i=0,len=arr.length;i<len;i++){var edge=arr[i];res.add(edge[0]);res.add(edge[1]);}return Array.from(res);}function makeOutgoingEdges(arr){var edges=new Map();for(var i=0,len=arr.length;i<len;i++){var edge=arr[i];if(!edges.has(edge[0]))edges.set(edge[0],new Set());if(!edges.has(edge[1]))edges.set(edge[1],new Set());edges.get(edge[0]).add(edge[1]);}return edges;}function makeNodesHash(arr){var res=new Map();for(var i=0,len=arr.length;i<len;i++){res.set(arr[i],i);}return res;}","map":{"version":3,"names":["module","exports","edges","toposort","uniqueNodes","array","nodes","cursor","length","sorted","Array","visited","i","outgoingEdges","makeOutgoingEdges","nodesHash","makeNodesHash","forEach","edge","has","Error","visit","Set","node","predecessors","nodeRep","JSON","stringify","e","outgoing","get","from","add","child","delete","arr","res","len","Map","set"],"sources":["C:/Users/Rama Krishna/videolibrary-app/frontend/src/node_modules/toposort/index.js"],"sourcesContent":["\n/**\n * Topological sorting function\n *\n * @param {Array} edges\n * @returns {Array}\n */\n\nmodule.exports = function(edges) {\n  return toposort(uniqueNodes(edges), edges)\n}\n\nmodule.exports.array = toposort\n\nfunction toposort(nodes, edges) {\n  var cursor = nodes.length\n    , sorted = new Array(cursor)\n    , visited = {}\n    , i = cursor\n    // Better data structures make algorithm much faster.\n    , outgoingEdges = makeOutgoingEdges(edges)\n    , nodesHash = makeNodesHash(nodes)\n\n  // check for unknown nodes\n  edges.forEach(function(edge) {\n    if (!nodesHash.has(edge[0]) || !nodesHash.has(edge[1])) {\n      throw new Error('Unknown node. There is an unknown node in the supplied edges.')\n    }\n  })\n\n  while (i--) {\n    if (!visited[i]) visit(nodes[i], i, new Set())\n  }\n\n  return sorted\n\n  function visit(node, i, predecessors) {\n    if(predecessors.has(node)) {\n      var nodeRep\n      try {\n        nodeRep = \", node was:\" + JSON.stringify(node)\n      } catch(e) {\n        nodeRep = \"\"\n      }\n      throw new Error('Cyclic dependency' + nodeRep)\n    }\n\n    if (!nodesHash.has(node)) {\n      throw new Error('Found unknown node. Make sure to provided all involved nodes. Unknown node: '+JSON.stringify(node))\n    }\n\n    if (visited[i]) return;\n    visited[i] = true\n\n    var outgoing = outgoingEdges.get(node) || new Set()\n    outgoing = Array.from(outgoing)\n\n    if (i = outgoing.length) {\n      predecessors.add(node)\n      do {\n        var child = outgoing[--i]\n        visit(child, nodesHash.get(child), predecessors)\n      } while (i)\n      predecessors.delete(node)\n    }\n\n    sorted[--cursor] = node\n  }\n}\n\nfunction uniqueNodes(arr){\n  var res = new Set()\n  for (var i = 0, len = arr.length; i < len; i++) {\n    var edge = arr[i]\n    res.add(edge[0])\n    res.add(edge[1])\n  }\n  return Array.from(res)\n}\n\nfunction makeOutgoingEdges(arr){\n  var edges = new Map()\n  for (var i = 0, len = arr.length; i < len; i++) {\n    var edge = arr[i]\n    if (!edges.has(edge[0])) edges.set(edge[0], new Set())\n    if (!edges.has(edge[1])) edges.set(edge[1], new Set())\n    edges.get(edge[0]).add(edge[1])\n  }\n  return edges\n}\n\nfunction makeNodesHash(arr){\n  var res = new Map()\n  for (var i = 0, len = arr.length; i < len; i++) {\n    res.set(arr[i], i)\n  }\n  return res\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}