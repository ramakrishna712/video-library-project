{"ast":null,"code":"import _objectSpread from\"C:/Users/Rama Krishna/videolibrary-app/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _objectWithoutProperties from\"C:/Users/Rama Krishna/videolibrary-app/frontend/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js\";const _excluded=[\"initMapStateToProps\",\"initMapDispatchToProps\",\"initMergeProps\"],_excluded2=[\"reactReduxForwardedRef\"];// src/utils/react.ts\nimport*as React from\"react\";// src/utils/react-is.ts\nvar IS_REACT_19=/* @__PURE__ */React.version.startsWith(\"19\");var REACT_ELEMENT_TYPE=/* @__PURE__ */Symbol.for(IS_REACT_19?\"react.transitional.element\":\"react.element\");var REACT_PORTAL_TYPE=/* @__PURE__ */Symbol.for(\"react.portal\");var REACT_FRAGMENT_TYPE=/* @__PURE__ */Symbol.for(\"react.fragment\");var REACT_STRICT_MODE_TYPE=/* @__PURE__ */Symbol.for(\"react.strict_mode\");var REACT_PROFILER_TYPE=/* @__PURE__ */Symbol.for(\"react.profiler\");var REACT_CONSUMER_TYPE=/* @__PURE__ */Symbol.for(\"react.consumer\");var REACT_CONTEXT_TYPE=/* @__PURE__ */Symbol.for(\"react.context\");var REACT_FORWARD_REF_TYPE=/* @__PURE__ */Symbol.for(\"react.forward_ref\");var REACT_SUSPENSE_TYPE=/* @__PURE__ */Symbol.for(\"react.suspense\");var REACT_SUSPENSE_LIST_TYPE=/* @__PURE__ */Symbol.for(\"react.suspense_list\");var REACT_MEMO_TYPE=/* @__PURE__ */Symbol.for(\"react.memo\");var REACT_LAZY_TYPE=/* @__PURE__ */Symbol.for(\"react.lazy\");var REACT_OFFSCREEN_TYPE=/* @__PURE__ */Symbol.for(\"react.offscreen\");var REACT_CLIENT_REFERENCE=/* @__PURE__ */Symbol.for(\"react.client.reference\");var ForwardRef=REACT_FORWARD_REF_TYPE;var Memo=REACT_MEMO_TYPE;function isValidElementType(type){return typeof type===\"string\"||typeof type===\"function\"||type===REACT_FRAGMENT_TYPE||type===REACT_PROFILER_TYPE||type===REACT_STRICT_MODE_TYPE||type===REACT_SUSPENSE_TYPE||type===REACT_SUSPENSE_LIST_TYPE||type===REACT_OFFSCREEN_TYPE||typeof type===\"object\"&&type!==null&&(type.$$typeof===REACT_LAZY_TYPE||type.$$typeof===REACT_MEMO_TYPE||type.$$typeof===REACT_CONTEXT_TYPE||type.$$typeof===REACT_CONSUMER_TYPE||type.$$typeof===REACT_FORWARD_REF_TYPE||type.$$typeof===REACT_CLIENT_REFERENCE||type.getModuleId!==void 0)?true:false;}function typeOf(object){if(typeof object===\"object\"&&object!==null){const{$$typeof}=object;switch($$typeof){case REACT_ELEMENT_TYPE:switch(object=object.type,object){case REACT_FRAGMENT_TYPE:case REACT_PROFILER_TYPE:case REACT_STRICT_MODE_TYPE:case REACT_SUSPENSE_TYPE:case REACT_SUSPENSE_LIST_TYPE:return object;default:switch(object=object&&object.$$typeof,object){case REACT_CONTEXT_TYPE:case REACT_FORWARD_REF_TYPE:case REACT_LAZY_TYPE:case REACT_MEMO_TYPE:return object;case REACT_CONSUMER_TYPE:return object;default:return $$typeof;}}case REACT_PORTAL_TYPE:return $$typeof;}}}function isContextConsumer(object){return IS_REACT_19?typeOf(object)===REACT_CONSUMER_TYPE:typeOf(object)===REACT_CONTEXT_TYPE;}function isMemo(object){return typeOf(object)===REACT_MEMO_TYPE;}// src/utils/warning.ts\nfunction warning(message){if(typeof console!==\"undefined\"&&typeof console.error===\"function\"){console.error(message);}try{throw new Error(message);}catch(e){}}// src/connect/verifySubselectors.ts\nfunction verify(selector,methodName){if(!selector){throw new Error(\"Unexpected value for \".concat(methodName,\" in connect.\"));}else if(methodName===\"mapStateToProps\"||methodName===\"mapDispatchToProps\"){if(!Object.prototype.hasOwnProperty.call(selector,\"dependsOnOwnProps\")){warning(\"The selector for \".concat(methodName,\" of connect did not specify a value for dependsOnOwnProps.\"));}}}function verifySubselectors(mapStateToProps,mapDispatchToProps,mergeProps){verify(mapStateToProps,\"mapStateToProps\");verify(mapDispatchToProps,\"mapDispatchToProps\");verify(mergeProps,\"mergeProps\");}// src/connect/selectorFactory.ts\nfunction pureFinalPropsSelectorFactory(mapStateToProps,mapDispatchToProps,mergeProps,dispatch,_ref){let{areStatesEqual,areOwnPropsEqual,areStatePropsEqual}=_ref;let hasRunAtLeastOnce=false;let state;let ownProps;let stateProps;let dispatchProps;let mergedProps;function handleFirstCall(firstState,firstOwnProps){state=firstState;ownProps=firstOwnProps;stateProps=mapStateToProps(state,ownProps);dispatchProps=mapDispatchToProps(dispatch,ownProps);mergedProps=mergeProps(stateProps,dispatchProps,ownProps);hasRunAtLeastOnce=true;return mergedProps;}function handleNewPropsAndNewState(){stateProps=mapStateToProps(state,ownProps);if(mapDispatchToProps.dependsOnOwnProps)dispatchProps=mapDispatchToProps(dispatch,ownProps);mergedProps=mergeProps(stateProps,dispatchProps,ownProps);return mergedProps;}function handleNewProps(){if(mapStateToProps.dependsOnOwnProps)stateProps=mapStateToProps(state,ownProps);if(mapDispatchToProps.dependsOnOwnProps)dispatchProps=mapDispatchToProps(dispatch,ownProps);mergedProps=mergeProps(stateProps,dispatchProps,ownProps);return mergedProps;}function handleNewState(){const nextStateProps=mapStateToProps(state,ownProps);const statePropsChanged=!areStatePropsEqual(nextStateProps,stateProps);stateProps=nextStateProps;if(statePropsChanged)mergedProps=mergeProps(stateProps,dispatchProps,ownProps);return mergedProps;}function handleSubsequentCalls(nextState,nextOwnProps){const propsChanged=!areOwnPropsEqual(nextOwnProps,ownProps);const stateChanged=!areStatesEqual(nextState,state,nextOwnProps,ownProps);state=nextState;ownProps=nextOwnProps;if(propsChanged&&stateChanged)return handleNewPropsAndNewState();if(propsChanged)return handleNewProps();if(stateChanged)return handleNewState();return mergedProps;}return function pureFinalPropsSelector(nextState,nextOwnProps){return hasRunAtLeastOnce?handleSubsequentCalls(nextState,nextOwnProps):handleFirstCall(nextState,nextOwnProps);};}function finalPropsSelectorFactory(dispatch,_ref2){let{initMapStateToProps,initMapDispatchToProps,initMergeProps}=_ref2,options=_objectWithoutProperties(_ref2,_excluded);const mapStateToProps=initMapStateToProps(dispatch,options);const mapDispatchToProps=initMapDispatchToProps(dispatch,options);const mergeProps=initMergeProps(dispatch,options);if(process.env.NODE_ENV!==\"production\"){verifySubselectors(mapStateToProps,mapDispatchToProps,mergeProps);}return pureFinalPropsSelectorFactory(mapStateToProps,mapDispatchToProps,mergeProps,dispatch,options);}// src/utils/bindActionCreators.ts\nfunction bindActionCreators(actionCreators,dispatch){const boundActionCreators={};for(const key in actionCreators){const actionCreator=actionCreators[key];if(typeof actionCreator===\"function\"){boundActionCreators[key]=function(){return dispatch(actionCreator(...arguments));};}}return boundActionCreators;}// src/utils/isPlainObject.ts\nfunction isPlainObject(obj){if(typeof obj!==\"object\"||obj===null)return false;const proto=Object.getPrototypeOf(obj);if(proto===null)return true;let baseProto=proto;while(Object.getPrototypeOf(baseProto)!==null){baseProto=Object.getPrototypeOf(baseProto);}return proto===baseProto;}// src/utils/verifyPlainObject.ts\nfunction verifyPlainObject(value,displayName,methodName){if(!isPlainObject(value)){warning(\"\".concat(methodName,\"() in \").concat(displayName,\" must return a plain object. Instead received \").concat(value,\".\"));}}// src/connect/wrapMapToProps.ts\nfunction wrapMapToPropsConstant(getConstant){return function initConstantSelector(dispatch){const constant=getConstant(dispatch);function constantSelector(){return constant;}constantSelector.dependsOnOwnProps=false;return constantSelector;};}function getDependsOnOwnProps(mapToProps){return mapToProps.dependsOnOwnProps?Boolean(mapToProps.dependsOnOwnProps):mapToProps.length!==1;}function wrapMapToPropsFunc(mapToProps,methodName){return function initProxySelector(dispatch,_ref3){let{displayName}=_ref3;const proxy=function mapToPropsProxy(stateOrDispatch,ownProps){return proxy.dependsOnOwnProps?proxy.mapToProps(stateOrDispatch,ownProps):proxy.mapToProps(stateOrDispatch,void 0);};proxy.dependsOnOwnProps=true;proxy.mapToProps=function detectFactoryAndVerify(stateOrDispatch,ownProps){proxy.mapToProps=mapToProps;proxy.dependsOnOwnProps=getDependsOnOwnProps(mapToProps);let props=proxy(stateOrDispatch,ownProps);if(typeof props===\"function\"){proxy.mapToProps=props;proxy.dependsOnOwnProps=getDependsOnOwnProps(props);props=proxy(stateOrDispatch,ownProps);}if(process.env.NODE_ENV!==\"production\")verifyPlainObject(props,displayName,methodName);return props;};return proxy;};}// src/connect/invalidArgFactory.ts\nfunction createInvalidArgFactory(arg,name){return(dispatch,options)=>{throw new Error(\"Invalid value of type \".concat(typeof arg,\" for \").concat(name,\" argument when connecting component \").concat(options.wrappedComponentName,\".\"));};}// src/connect/mapDispatchToProps.ts\nfunction mapDispatchToPropsFactory(mapDispatchToProps){return mapDispatchToProps&&typeof mapDispatchToProps===\"object\"?wrapMapToPropsConstant(dispatch=>// @ts-ignore\nbindActionCreators(mapDispatchToProps,dispatch)):!mapDispatchToProps?wrapMapToPropsConstant(dispatch=>({dispatch})):typeof mapDispatchToProps===\"function\"?// @ts-ignore\nwrapMapToPropsFunc(mapDispatchToProps,\"mapDispatchToProps\"):createInvalidArgFactory(mapDispatchToProps,\"mapDispatchToProps\");}// src/connect/mapStateToProps.ts\nfunction mapStateToPropsFactory(mapStateToProps){return!mapStateToProps?wrapMapToPropsConstant(()=>({})):typeof mapStateToProps===\"function\"?// @ts-ignore\nwrapMapToPropsFunc(mapStateToProps,\"mapStateToProps\"):createInvalidArgFactory(mapStateToProps,\"mapStateToProps\");}// src/connect/mergeProps.ts\nfunction defaultMergeProps(stateProps,dispatchProps,ownProps){return _objectSpread(_objectSpread(_objectSpread({},ownProps),stateProps),dispatchProps);}function wrapMergePropsFunc(mergeProps){return function initMergePropsProxy(dispatch,_ref4){let{displayName,areMergedPropsEqual}=_ref4;let hasRunOnce=false;let mergedProps;return function mergePropsProxy(stateProps,dispatchProps,ownProps){const nextMergedProps=mergeProps(stateProps,dispatchProps,ownProps);if(hasRunOnce){if(!areMergedPropsEqual(nextMergedProps,mergedProps))mergedProps=nextMergedProps;}else{hasRunOnce=true;mergedProps=nextMergedProps;if(process.env.NODE_ENV!==\"production\")verifyPlainObject(mergedProps,displayName,\"mergeProps\");}return mergedProps;};};}function mergePropsFactory(mergeProps){return!mergeProps?()=>defaultMergeProps:typeof mergeProps===\"function\"?wrapMergePropsFunc(mergeProps):createInvalidArgFactory(mergeProps,\"mergeProps\");}// src/utils/batch.ts\nfunction defaultNoopBatch(callback){callback();}// src/utils/Subscription.ts\nfunction createListenerCollection(){let first=null;let last=null;return{clear(){first=null;last=null;},notify(){defaultNoopBatch(()=>{let listener=first;while(listener){listener.callback();listener=listener.next;}});},get(){const listeners=[];let listener=first;while(listener){listeners.push(listener);listener=listener.next;}return listeners;},subscribe(callback){let isSubscribed=true;const listener=last={callback,next:null,prev:last};if(listener.prev){listener.prev.next=listener;}else{first=listener;}return function unsubscribe(){if(!isSubscribed||first===null)return;isSubscribed=false;if(listener.next){listener.next.prev=listener.prev;}else{last=listener.prev;}if(listener.prev){listener.prev.next=listener.next;}else{first=listener.next;}};}};}var nullListeners={notify(){},get:()=>[]};function createSubscription(store,parentSub){let unsubscribe;let listeners=nullListeners;let subscriptionsAmount=0;let selfSubscribed=false;function addNestedSub(listener){trySubscribe();const cleanupListener=listeners.subscribe(listener);let removed=false;return()=>{if(!removed){removed=true;cleanupListener();tryUnsubscribe();}};}function notifyNestedSubs(){listeners.notify();}function handleChangeWrapper(){if(subscription.onStateChange){subscription.onStateChange();}}function isSubscribed(){return selfSubscribed;}function trySubscribe(){subscriptionsAmount++;if(!unsubscribe){unsubscribe=parentSub?parentSub.addNestedSub(handleChangeWrapper):store.subscribe(handleChangeWrapper);listeners=createListenerCollection();}}function tryUnsubscribe(){subscriptionsAmount--;if(unsubscribe&&subscriptionsAmount===0){unsubscribe();unsubscribe=void 0;listeners.clear();listeners=nullListeners;}}function trySubscribeSelf(){if(!selfSubscribed){selfSubscribed=true;trySubscribe();}}function tryUnsubscribeSelf(){if(selfSubscribed){selfSubscribed=false;tryUnsubscribe();}}const subscription={addNestedSub,notifyNestedSubs,handleChangeWrapper,isSubscribed,trySubscribe:trySubscribeSelf,tryUnsubscribe:tryUnsubscribeSelf,getListeners:()=>listeners};return subscription;}// src/utils/useIsomorphicLayoutEffect.ts\nvar canUseDOM=()=>!!(typeof window!==\"undefined\"&&typeof window.document!==\"undefined\"&&typeof window.document.createElement!==\"undefined\");var isDOM=/* @__PURE__ */canUseDOM();var isRunningInReactNative=()=>typeof navigator!==\"undefined\"&&navigator.product===\"ReactNative\";var isReactNative=/* @__PURE__ */isRunningInReactNative();var getUseIsomorphicLayoutEffect=()=>isDOM||isReactNative?React.useLayoutEffect:React.useEffect;var useIsomorphicLayoutEffect=/* @__PURE__ */getUseIsomorphicLayoutEffect();// src/utils/shallowEqual.ts\nfunction is(x,y){if(x===y){return x!==0||y!==0||1/x===1/y;}else{return x!==x&&y!==y;}}function shallowEqual(objA,objB){if(is(objA,objB))return true;if(typeof objA!==\"object\"||objA===null||typeof objB!==\"object\"||objB===null){return false;}const keysA=Object.keys(objA);const keysB=Object.keys(objB);if(keysA.length!==keysB.length)return false;for(let i=0;i<keysA.length;i++){if(!Object.prototype.hasOwnProperty.call(objB,keysA[i])||!is(objA[keysA[i]],objB[keysA[i]])){return false;}}return true;}// src/utils/hoistStatics.ts\nvar REACT_STATICS={childContextTypes:true,contextType:true,contextTypes:true,defaultProps:true,displayName:true,getDefaultProps:true,getDerivedStateFromError:true,getDerivedStateFromProps:true,mixins:true,propTypes:true,type:true};var KNOWN_STATICS={name:true,length:true,prototype:true,caller:true,callee:true,arguments:true,arity:true};var FORWARD_REF_STATICS={$$typeof:true,render:true,defaultProps:true,displayName:true,propTypes:true};var MEMO_STATICS={$$typeof:true,compare:true,defaultProps:true,displayName:true,propTypes:true,type:true};var TYPE_STATICS={[ForwardRef]:FORWARD_REF_STATICS,[Memo]:MEMO_STATICS};function getStatics(component){if(isMemo(component)){return MEMO_STATICS;}return TYPE_STATICS[component[\"$$typeof\"]]||REACT_STATICS;}var defineProperty=Object.defineProperty;var getOwnPropertyNames=Object.getOwnPropertyNames;var getOwnPropertySymbols=Object.getOwnPropertySymbols;var getOwnPropertyDescriptor=Object.getOwnPropertyDescriptor;var getPrototypeOf=Object.getPrototypeOf;var objectPrototype=Object.prototype;function hoistNonReactStatics(targetComponent,sourceComponent){if(typeof sourceComponent!==\"string\"){if(objectPrototype){const inheritedComponent=getPrototypeOf(sourceComponent);if(inheritedComponent&&inheritedComponent!==objectPrototype){hoistNonReactStatics(targetComponent,inheritedComponent);}}let keys=getOwnPropertyNames(sourceComponent);if(getOwnPropertySymbols){keys=keys.concat(getOwnPropertySymbols(sourceComponent));}const targetStatics=getStatics(targetComponent);const sourceStatics=getStatics(sourceComponent);for(let i=0;i<keys.length;++i){const key=keys[i];if(!KNOWN_STATICS[key]&&!(sourceStatics&&sourceStatics[key])&&!(targetStatics&&targetStatics[key])){const descriptor=getOwnPropertyDescriptor(sourceComponent,key);try{defineProperty(targetComponent,key,descriptor);}catch(e){}}}}return targetComponent;}// src/components/Context.ts\nvar ContextKey=/* @__PURE__ */Symbol.for(\"react-redux-context\");var gT=typeof globalThis!==\"undefined\"?globalThis:(/* fall back to a per-module scope (pre-8.1 behaviour) if `globalThis` is not available */{});function getContext(){var _gT$ContextKey;if(!React.createContext)return{};const contextMap=(_gT$ContextKey=gT[ContextKey])!==null&&_gT$ContextKey!==void 0?_gT$ContextKey:gT[ContextKey]=/* @__PURE__ */new Map();let realContext=contextMap.get(React.createContext);if(!realContext){realContext=/*#__PURE__*/React.createContext(null);if(process.env.NODE_ENV!==\"production\"){realContext.displayName=\"ReactRedux\";}contextMap.set(React.createContext,realContext);}return realContext;}var ReactReduxContext=/* @__PURE__ */getContext();// src/components/connect.tsx\nvar NO_SUBSCRIPTION_ARRAY=[null,null];var stringifyComponent=Comp=>{try{return JSON.stringify(Comp);}catch(err){return String(Comp);}};function useIsomorphicLayoutEffectWithArgs(effectFunc,effectArgs,dependencies){useIsomorphicLayoutEffect(()=>effectFunc(...effectArgs),dependencies);}function captureWrapperProps(lastWrapperProps,lastChildProps,renderIsScheduled,wrapperProps,childPropsFromStoreUpdate,notifyNestedSubs){lastWrapperProps.current=wrapperProps;renderIsScheduled.current=false;if(childPropsFromStoreUpdate.current){childPropsFromStoreUpdate.current=null;notifyNestedSubs();}}function subscribeUpdates(shouldHandleStateChanges,store,subscription,childPropsSelector,lastWrapperProps,lastChildProps,renderIsScheduled,isMounted,childPropsFromStoreUpdate,notifyNestedSubs,additionalSubscribeListener){if(!shouldHandleStateChanges)return()=>{};let didUnsubscribe=false;let lastThrownError=null;const checkForUpdates=()=>{if(didUnsubscribe||!isMounted.current){return;}const latestStoreState=store.getState();let newChildProps,error;try{newChildProps=childPropsSelector(latestStoreState,lastWrapperProps.current);}catch(e){error=e;lastThrownError=e;}if(!error){lastThrownError=null;}if(newChildProps===lastChildProps.current){if(!renderIsScheduled.current){notifyNestedSubs();}}else{lastChildProps.current=newChildProps;childPropsFromStoreUpdate.current=newChildProps;renderIsScheduled.current=true;additionalSubscribeListener();}};subscription.onStateChange=checkForUpdates;subscription.trySubscribe();checkForUpdates();const unsubscribeWrapper=()=>{didUnsubscribe=true;subscription.tryUnsubscribe();subscription.onStateChange=null;if(lastThrownError){throw lastThrownError;}};return unsubscribeWrapper;}function strictEqual(a,b){return a===b;}var hasWarnedAboutDeprecatedPureOption=false;function connect(mapStateToProps,mapDispatchToProps,mergeProps){let{// The `pure` option has been removed, so TS doesn't like us destructuring this to check its existence.\n// @ts-ignore\npure,areStatesEqual=strictEqual,areOwnPropsEqual=shallowEqual,areStatePropsEqual=shallowEqual,areMergedPropsEqual=shallowEqual,// use React's forwardRef to expose a ref of the wrapped component\nforwardRef=false,// the context consumer to use\ncontext=ReactReduxContext}=arguments.length>3&&arguments[3]!==undefined?arguments[3]:{};if(process.env.NODE_ENV!==\"production\"){if(pure!==void 0&&!hasWarnedAboutDeprecatedPureOption){hasWarnedAboutDeprecatedPureOption=true;warning('The `pure` option has been removed. `connect` is now always a \"pure/memoized\" component');}}const Context=context;const initMapStateToProps=mapStateToPropsFactory(mapStateToProps);const initMapDispatchToProps=mapDispatchToPropsFactory(mapDispatchToProps);const initMergeProps=mergePropsFactory(mergeProps);const shouldHandleStateChanges=Boolean(mapStateToProps);const wrapWithConnect=WrappedComponent=>{if(process.env.NODE_ENV!==\"production\"){const isValid=/* @__PURE__ */isValidElementType(WrappedComponent);if(!isValid)throw new Error(\"You must pass a component to the function returned by connect. Instead received \".concat(stringifyComponent(WrappedComponent)));}const wrappedComponentName=WrappedComponent.displayName||WrappedComponent.name||\"Component\";const displayName=\"Connect(\".concat(wrappedComponentName,\")\");const selectorFactoryOptions={shouldHandleStateChanges,displayName,wrappedComponentName,WrappedComponent,// @ts-ignore\ninitMapStateToProps,initMapDispatchToProps,initMergeProps,areStatesEqual,areStatePropsEqual,areOwnPropsEqual,areMergedPropsEqual};function ConnectFunction(props){const[propsContext,reactReduxForwardedRef,wrapperProps]=React.useMemo(()=>{const{reactReduxForwardedRef:reactReduxForwardedRef2}=props,wrapperProps2=_objectWithoutProperties(props,_excluded2);return[props.context,reactReduxForwardedRef2,wrapperProps2];},[props]);const ContextToUse=React.useMemo(()=>{let ResultContext=Context;if(propsContext!==null&&propsContext!==void 0&&propsContext.Consumer){if(process.env.NODE_ENV!==\"production\"){const isValid=/* @__PURE__ */isContextConsumer(// @ts-ignore\n/* @__PURE__ */React.createElement(propsContext.Consumer,null));if(!isValid){throw new Error(\"You must pass a valid React context consumer as `props.context`\");}ResultContext=propsContext;}}return ResultContext;},[propsContext,Context]);const contextValue=React.useContext(ContextToUse);const didStoreComeFromProps=Boolean(props.store)&&Boolean(props.store.getState)&&Boolean(props.store.dispatch);const didStoreComeFromContext=Boolean(contextValue)&&Boolean(contextValue.store);if(process.env.NODE_ENV!==\"production\"&&!didStoreComeFromProps&&!didStoreComeFromContext){throw new Error(\"Could not find \\\"store\\\" in the context of \\\"\".concat(displayName,\"\\\". Either wrap the root component in a <Provider>, or pass a custom React context provider to <Provider> and the corresponding React context consumer to \").concat(displayName,\" in connect options.\"));}const store=didStoreComeFromProps?props.store:contextValue.store;const getServerState=didStoreComeFromContext?contextValue.getServerState:store.getState;const childPropsSelector=React.useMemo(()=>{return finalPropsSelectorFactory(store.dispatch,selectorFactoryOptions);},[store]);const[subscription,notifyNestedSubs]=React.useMemo(()=>{if(!shouldHandleStateChanges)return NO_SUBSCRIPTION_ARRAY;const subscription2=createSubscription(store,didStoreComeFromProps?void 0:contextValue.subscription);const notifyNestedSubs2=subscription2.notifyNestedSubs.bind(subscription2);return[subscription2,notifyNestedSubs2];},[store,didStoreComeFromProps,contextValue]);const overriddenContextValue=React.useMemo(()=>{if(didStoreComeFromProps){return contextValue;}return _objectSpread(_objectSpread({},contextValue),{},{subscription});},[didStoreComeFromProps,contextValue,subscription]);const lastChildProps=React.useRef(void 0);const lastWrapperProps=React.useRef(wrapperProps);const childPropsFromStoreUpdate=React.useRef(void 0);const renderIsScheduled=React.useRef(false);const isMounted=React.useRef(false);const latestSubscriptionCallbackError=React.useRef(void 0);useIsomorphicLayoutEffect(()=>{isMounted.current=true;return()=>{isMounted.current=false;};},[]);const actualChildPropsSelector=React.useMemo(()=>{const selector=()=>{if(childPropsFromStoreUpdate.current&&wrapperProps===lastWrapperProps.current){return childPropsFromStoreUpdate.current;}return childPropsSelector(store.getState(),wrapperProps);};return selector;},[store,wrapperProps]);const subscribeForReact=React.useMemo(()=>{const subscribe=reactListener=>{if(!subscription){return()=>{};}return subscribeUpdates(shouldHandleStateChanges,store,subscription,// @ts-ignore\nchildPropsSelector,lastWrapperProps,lastChildProps,renderIsScheduled,isMounted,childPropsFromStoreUpdate,notifyNestedSubs,reactListener);};return subscribe;},[subscription]);useIsomorphicLayoutEffectWithArgs(captureWrapperProps,[lastWrapperProps,lastChildProps,renderIsScheduled,wrapperProps,childPropsFromStoreUpdate,notifyNestedSubs]);let actualChildProps;try{actualChildProps=React.useSyncExternalStore(// TODO We're passing through a big wrapper that does a bunch of extra side effects besides subscribing\nsubscribeForReact,// TODO This is incredibly hacky. We've already processed the store update and calculated new child props,\n// TODO and we're just passing that through so it triggers a re-render for us rather than relying on `uSES`.\nactualChildPropsSelector,getServerState?()=>childPropsSelector(getServerState(),wrapperProps):actualChildPropsSelector);}catch(err){if(latestSubscriptionCallbackError.current){;err.message+=\"\\nThe error may be correlated with this previous error:\\n\".concat(latestSubscriptionCallbackError.current.stack,\"\\n\\n\");}throw err;}useIsomorphicLayoutEffect(()=>{latestSubscriptionCallbackError.current=void 0;childPropsFromStoreUpdate.current=void 0;lastChildProps.current=actualChildProps;});const renderedWrappedComponent=React.useMemo(()=>{return(// @ts-ignore\n/* @__PURE__ */React.createElement(WrappedComponent,_objectSpread(_objectSpread({},actualChildProps),{},{ref:reactReduxForwardedRef})));},[reactReduxForwardedRef,WrappedComponent,actualChildProps]);const renderedChild=React.useMemo(()=>{if(shouldHandleStateChanges){return/* @__PURE__ */React.createElement(ContextToUse.Provider,{value:overriddenContextValue},renderedWrappedComponent);}return renderedWrappedComponent;},[ContextToUse,renderedWrappedComponent,overriddenContextValue]);return renderedChild;}const _Connect=/*#__PURE__*/React.memo(ConnectFunction);const Connect=_Connect;Connect.WrappedComponent=WrappedComponent;Connect.displayName=ConnectFunction.displayName=displayName;if(forwardRef){const _forwarded=/*#__PURE__*/React.forwardRef(function forwardConnectRef(props,ref){return/* @__PURE__ */React.createElement(Connect,_objectSpread(_objectSpread({},props),{},{reactReduxForwardedRef:ref}));});const forwarded=_forwarded;forwarded.displayName=displayName;forwarded.WrappedComponent=WrappedComponent;return/* @__PURE__ */hoistNonReactStatics(forwarded,WrappedComponent);}return/* @__PURE__ */hoistNonReactStatics(Connect,WrappedComponent);};return wrapWithConnect;}var connect_default=connect;// src/components/Provider.tsx\nfunction Provider(providerProps){const{children,context,serverState,store}=providerProps;const contextValue=React.useMemo(()=>{const subscription=createSubscription(store);const baseContextValue={store,subscription,getServerState:serverState?()=>serverState:void 0};if(process.env.NODE_ENV===\"production\"){return baseContextValue;}else{const{identityFunctionCheck=\"once\",stabilityCheck=\"once\"}=providerProps;return/* @__PURE__ */Object.assign(baseContextValue,{stabilityCheck,identityFunctionCheck});}},[store,serverState]);const previousState=React.useMemo(()=>store.getState(),[store]);useIsomorphicLayoutEffect(()=>{const{subscription}=contextValue;subscription.onStateChange=subscription.notifyNestedSubs;subscription.trySubscribe();if(previousState!==store.getState()){subscription.notifyNestedSubs();}return()=>{subscription.tryUnsubscribe();subscription.onStateChange=void 0;};},[contextValue,previousState]);const Context=context||ReactReduxContext;return/* @__PURE__ */React.createElement(Context.Provider,{value:contextValue},children);}var Provider_default=Provider;// src/hooks/useReduxContext.ts\nfunction createReduxContextHook(){let context=arguments.length>0&&arguments[0]!==undefined?arguments[0]:ReactReduxContext;return function useReduxContext2(){const contextValue=React.useContext(context);if(process.env.NODE_ENV!==\"production\"&&!contextValue){throw new Error(\"could not find react-redux context value; please ensure the component is wrapped in a <Provider>\");}return contextValue;};}var useReduxContext=/* @__PURE__ */createReduxContextHook();// src/hooks/useStore.ts\nfunction createStoreHook(){let context=arguments.length>0&&arguments[0]!==undefined?arguments[0]:ReactReduxContext;const useReduxContext2=context===ReactReduxContext?useReduxContext:// @ts-ignore\ncreateReduxContextHook(context);const useStore2=()=>{const{store}=useReduxContext2();return store;};Object.assign(useStore2,{withTypes:()=>useStore2});return useStore2;}var useStore=/* @__PURE__ */createStoreHook();// src/hooks/useDispatch.ts\nfunction createDispatchHook(){let context=arguments.length>0&&arguments[0]!==undefined?arguments[0]:ReactReduxContext;const useStore2=context===ReactReduxContext?useStore:createStoreHook(context);const useDispatch2=()=>{const store=useStore2();return store.dispatch;};Object.assign(useDispatch2,{withTypes:()=>useDispatch2});return useDispatch2;}var useDispatch=/* @__PURE__ */createDispatchHook();// src/hooks/useSelector.ts\nimport{useSyncExternalStoreWithSelector}from\"use-sync-external-store/with-selector.js\";var refEquality=(a,b)=>a===b;function createSelectorHook(){let context=arguments.length>0&&arguments[0]!==undefined?arguments[0]:ReactReduxContext;const useReduxContext2=context===ReactReduxContext?useReduxContext:createReduxContextHook(context);const useSelector2=function(selector){let equalityFnOrOptions=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const{equalityFn=refEquality}=typeof equalityFnOrOptions===\"function\"?{equalityFn:equalityFnOrOptions}:equalityFnOrOptions;if(process.env.NODE_ENV!==\"production\"){if(!selector){throw new Error(\"You must pass a selector to useSelector\");}if(typeof selector!==\"function\"){throw new Error(\"You must pass a function as a selector to useSelector\");}if(typeof equalityFn!==\"function\"){throw new Error(\"You must pass a function as an equality function to useSelector\");}}const reduxContext=useReduxContext2();const{store,subscription,getServerState}=reduxContext;const firstRun=React.useRef(true);const wrappedSelector=React.useCallback({[selector.name](state){const selected=selector(state);if(process.env.NODE_ENV!==\"production\"){const{devModeChecks={}}=typeof equalityFnOrOptions===\"function\"?{}:equalityFnOrOptions;const{identityFunctionCheck,stabilityCheck}=reduxContext;const{identityFunctionCheck:finalIdentityFunctionCheck,stabilityCheck:finalStabilityCheck}=_objectSpread({stabilityCheck,identityFunctionCheck},devModeChecks);if(finalStabilityCheck===\"always\"||finalStabilityCheck===\"once\"&&firstRun.current){const toCompare=selector(state);if(!equalityFn(selected,toCompare)){let stack=void 0;try{throw new Error();}catch(e){;({stack}=e);}console.warn(\"Selector \"+(selector.name||\"unknown\")+\" returned a different result when called with the same parameters. This can lead to unnecessary rerenders.\\nSelectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization\",{state,selected,selected2:toCompare,stack});}}if(finalIdentityFunctionCheck===\"always\"||finalIdentityFunctionCheck===\"once\"&&firstRun.current){if(selected===state){let stack=void 0;try{throw new Error();}catch(e){;({stack}=e);}console.warn(\"Selector \"+(selector.name||\"unknown\")+\" returned the root state when called. This can lead to unnecessary rerenders.\\nSelectors that return the entire state are almost certainly a mistake, as they will cause a rerender whenever *anything* in state changes.\",{stack});}}if(firstRun.current)firstRun.current=false;}return selected;}}[selector.name],[selector]);const selectedState=useSyncExternalStoreWithSelector(subscription.addNestedSub,store.getState,getServerState||store.getState,wrappedSelector,equalityFn);React.useDebugValue(selectedState);return selectedState;};Object.assign(useSelector2,{withTypes:()=>useSelector2});return useSelector2;}var useSelector=/* @__PURE__ */createSelectorHook();// src/exports.ts\nvar batch=defaultNoopBatch;export{Provider_default as Provider,ReactReduxContext,batch,connect_default as connect,createDispatchHook,createSelectorHook,createStoreHook,shallowEqual,useDispatch,useSelector,useStore};","map":{"version":3,"names":["React","IS_REACT_19","version","startsWith","REACT_ELEMENT_TYPE","Symbol","for","REACT_PORTAL_TYPE","REACT_FRAGMENT_TYPE","REACT_STRICT_MODE_TYPE","REACT_PROFILER_TYPE","REACT_CONSUMER_TYPE","REACT_CONTEXT_TYPE","REACT_FORWARD_REF_TYPE","REACT_SUSPENSE_TYPE","REACT_SUSPENSE_LIST_TYPE","REACT_MEMO_TYPE","REACT_LAZY_TYPE","REACT_OFFSCREEN_TYPE","REACT_CLIENT_REFERENCE","ForwardRef","Memo","isValidElementType","type","$$typeof","getModuleId","typeOf","object","isContextConsumer","isMemo","warning","message","console","error","Error","e","verify","selector","methodName","concat","Object","prototype","hasOwnProperty","call","verifySubselectors","mapStateToProps","mapDispatchToProps","mergeProps","pureFinalPropsSelectorFactory","dispatch","_ref","areStatesEqual","areOwnPropsEqual","areStatePropsEqual","hasRunAtLeastOnce","state","ownProps","stateProps","dispatchProps","mergedProps","handleFirstCall","firstState","firstOwnProps","handleNewPropsAndNewState","dependsOnOwnProps","handleNewProps","handleNewState","nextStateProps","statePropsChanged","handleSubsequentCalls","nextState","nextOwnProps","propsChanged","stateChanged","pureFinalPropsSelector","finalPropsSelectorFactory","_ref2","initMapStateToProps","initMapDispatchToProps","initMergeProps","options","_objectWithoutProperties","_excluded","process","env","NODE_ENV","bindActionCreators","actionCreators","boundActionCreators","key","actionCreator","arguments","isPlainObject","obj","proto","getPrototypeOf","baseProto","verifyPlainObject","value","displayName","wrapMapToPropsConstant","getConstant","initConstantSelector","constant","constantSelector","getDependsOnOwnProps","mapToProps","Boolean","length","wrapMapToPropsFunc","initProxySelector","_ref3","proxy","mapToPropsProxy","stateOrDispatch","detectFactoryAndVerify","props","createInvalidArgFactory","arg","name","wrappedComponentName","mapDispatchToPropsFactory","mapStateToPropsFactory","defaultMergeProps","_objectSpread","wrapMergePropsFunc","initMergePropsProxy","_ref4","areMergedPropsEqual","hasRunOnce","mergePropsProxy","nextMergedProps","mergePropsFactory","defaultNoopBatch","callback","createListenerCollection","first","last","clear","notify","listener","next","get","listeners","push","subscribe","isSubscribed","prev","unsubscribe","nullListeners","createSubscription","store","parentSub","subscriptionsAmount","selfSubscribed","addNestedSub","trySubscribe","cleanupListener","removed","tryUnsubscribe","notifyNestedSubs","handleChangeWrapper","subscription","onStateChange","trySubscribeSelf","tryUnsubscribeSelf","getListeners","canUseDOM","window","document","createElement","isDOM","isRunningInReactNative","navigator","product","isReactNative","getUseIsomorphicLayoutEffect","useLayoutEffect","useEffect","useIsomorphicLayoutEffect","is","x","y","shallowEqual","objA","objB","keysA","keys","keysB","i","REACT_STATICS","childContextTypes","contextType","contextTypes","defaultProps","getDefaultProps","getDerivedStateFromError","getDerivedStateFromProps","mixins","propTypes","KNOWN_STATICS","caller","callee","arity","FORWARD_REF_STATICS","render","MEMO_STATICS","compare","TYPE_STATICS","getStatics","component","defineProperty","getOwnPropertyNames","getOwnPropertySymbols","getOwnPropertyDescriptor","objectPrototype","hoistNonReactStatics","targetComponent","sourceComponent","inheritedComponent","targetStatics","sourceStatics","descriptor","ContextKey","gT","globalThis","getContext","_gT$ContextKey","createContext","contextMap","Map","realContext","set","ReactReduxContext","NO_SUBSCRIPTION_ARRAY","stringifyComponent","Comp","JSON","stringify","err","String","useIsomorphicLayoutEffectWithArgs","effectFunc","effectArgs","dependencies","captureWrapperProps","lastWrapperProps","lastChildProps","renderIsScheduled","wrapperProps","childPropsFromStoreUpdate","current","subscribeUpdates","shouldHandleStateChanges","childPropsSelector","isMounted","additionalSubscribeListener","didUnsubscribe","lastThrownError","checkForUpdates","latestStoreState","getState","newChildProps","unsubscribeWrapper","strictEqual","a","b","hasWarnedAboutDeprecatedPureOption","connect","pure","forwardRef","context","undefined","Context","wrapWithConnect","WrappedComponent","isValid","selectorFactoryOptions","ConnectFunction","propsContext","reactReduxForwardedRef","useMemo","reactReduxForwardedRef2","wrapperProps2","_excluded2","ContextToUse","ResultContext","Consumer","contextValue","useContext","didStoreComeFromProps","didStoreComeFromContext","getServerState","subscription2","notifyNestedSubs2","bind","overriddenContextValue","useRef","latestSubscriptionCallbackError","actualChildPropsSelector","subscribeForReact","reactListener","actualChildProps","useSyncExternalStore","stack","renderedWrappedComponent","ref","renderedChild","Provider","_Connect","memo","Connect","_forwarded","forwardConnectRef","forwarded","connect_default","providerProps","children","serverState","baseContextValue","identityFunctionCheck","stabilityCheck","assign","previousState","Provider_default","createReduxContextHook","useReduxContext2","useReduxContext","createStoreHook","useStore2","useStore","withTypes","createDispatchHook","useDispatch2","useDispatch","useSyncExternalStoreWithSelector","refEquality","createSelectorHook","useSelector2","useSelector","equalityFnOrOptions","equalityFn","reduxContext","firstRun","wrappedSelector","useCallback","selected","devModeChecks","finalIdentityFunctionCheck","finalStabilityCheck","toCompare","warn","selected2","selectedState","useDebugValue","batch"],"sources":["C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\react-redux\\src\\utils\\react.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\react-redux\\src\\utils\\react-is.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\react-redux\\src\\utils\\warning.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\react-redux\\src\\connect\\verifySubselectors.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\react-redux\\src\\connect\\selectorFactory.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\react-redux\\src\\utils\\bindActionCreators.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\react-redux\\src\\utils\\isPlainObject.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\react-redux\\src\\utils\\verifyPlainObject.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\react-redux\\src\\connect\\wrapMapToProps.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\react-redux\\src\\connect\\invalidArgFactory.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\react-redux\\src\\connect\\mapDispatchToProps.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\react-redux\\src\\connect\\mapStateToProps.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\react-redux\\src\\connect\\mergeProps.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\react-redux\\src\\utils\\batch.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\react-redux\\src\\utils\\Subscription.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\react-redux\\src\\utils\\useIsomorphicLayoutEffect.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\react-redux\\src\\utils\\shallowEqual.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\react-redux\\src\\utils\\hoistStatics.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\react-redux\\src\\components\\Context.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\react-redux\\src\\components\\connect.tsx","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\react-redux\\src\\components\\Provider.tsx","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\react-redux\\src\\hooks\\useReduxContext.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\react-redux\\src\\hooks\\useStore.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\react-redux\\src\\hooks\\useDispatch.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\react-redux\\src\\hooks\\useSelector.ts","C:\\Users\\Rama Krishna\\videolibrary-app\\frontend\\src\\node_modules\\react-redux\\src\\exports.ts"],"sourcesContent":["import * as React from 'react'\n\nexport { React }\n","import type { ElementType, MemoExoticComponent, ReactElement } from 'react'\nimport { React } from './react'\n\n// Directly ported from:\n// https://unpkg.com/browse/react-is@19.0.0/cjs/react-is.production.js\n// It's very possible this could change in the future, but given that\n// we only use these in `connect`, this is a low priority.\n\nexport const IS_REACT_19 = /* @__PURE__ */ React.version.startsWith('19')\n\nconst REACT_ELEMENT_TYPE = /* @__PURE__ */ Symbol.for(\n  IS_REACT_19 ? 'react.transitional.element' : 'react.element',\n)\nconst REACT_PORTAL_TYPE = /* @__PURE__ */ Symbol.for('react.portal')\nconst REACT_FRAGMENT_TYPE = /* @__PURE__ */ Symbol.for('react.fragment')\nconst REACT_STRICT_MODE_TYPE = /* @__PURE__ */ Symbol.for('react.strict_mode')\nconst REACT_PROFILER_TYPE = /* @__PURE__ */ Symbol.for('react.profiler')\nconst REACT_CONSUMER_TYPE = /* @__PURE__ */ Symbol.for('react.consumer')\nconst REACT_CONTEXT_TYPE = /* @__PURE__ */ Symbol.for('react.context')\nconst REACT_FORWARD_REF_TYPE = /* @__PURE__ */ Symbol.for('react.forward_ref')\nconst REACT_SUSPENSE_TYPE = /* @__PURE__ */ Symbol.for('react.suspense')\nconst REACT_SUSPENSE_LIST_TYPE = /* @__PURE__ */ Symbol.for(\n  'react.suspense_list',\n)\nconst REACT_MEMO_TYPE = /* @__PURE__ */ Symbol.for('react.memo')\nconst REACT_LAZY_TYPE = /* @__PURE__ */ Symbol.for('react.lazy')\nconst REACT_OFFSCREEN_TYPE = /* @__PURE__ */ Symbol.for('react.offscreen')\nconst REACT_CLIENT_REFERENCE = /* @__PURE__ */ Symbol.for(\n  'react.client.reference',\n)\n\nexport const ForwardRef = REACT_FORWARD_REF_TYPE\nexport const Memo = REACT_MEMO_TYPE\n\nexport function isValidElementType(type: any): type is ElementType {\n  return typeof type === 'string' ||\n    typeof type === 'function' ||\n    type === REACT_FRAGMENT_TYPE ||\n    type === REACT_PROFILER_TYPE ||\n    type === REACT_STRICT_MODE_TYPE ||\n    type === REACT_SUSPENSE_TYPE ||\n    type === REACT_SUSPENSE_LIST_TYPE ||\n    type === REACT_OFFSCREEN_TYPE ||\n    (typeof type === 'object' &&\n      type !== null &&\n      (type.$$typeof === REACT_LAZY_TYPE ||\n        type.$$typeof === REACT_MEMO_TYPE ||\n        type.$$typeof === REACT_CONTEXT_TYPE ||\n        type.$$typeof === REACT_CONSUMER_TYPE ||\n        type.$$typeof === REACT_FORWARD_REF_TYPE ||\n        type.$$typeof === REACT_CLIENT_REFERENCE ||\n        type.getModuleId !== undefined))\n    ? !0\n    : !1\n}\n\nfunction typeOf(object: any): symbol | undefined {\n  if (typeof object === 'object' && object !== null) {\n    const { $$typeof } = object\n\n    switch ($$typeof) {\n      case REACT_ELEMENT_TYPE:\n        switch (((object = object.type), object)) {\n          case REACT_FRAGMENT_TYPE:\n          case REACT_PROFILER_TYPE:\n          case REACT_STRICT_MODE_TYPE:\n          case REACT_SUSPENSE_TYPE:\n          case REACT_SUSPENSE_LIST_TYPE:\n            return object\n          default:\n            switch (((object = object && object.$$typeof), object)) {\n              case REACT_CONTEXT_TYPE:\n              case REACT_FORWARD_REF_TYPE:\n              case REACT_LAZY_TYPE:\n              case REACT_MEMO_TYPE:\n                return object\n              case REACT_CONSUMER_TYPE:\n                return object\n              default:\n                return $$typeof\n            }\n        }\n      case REACT_PORTAL_TYPE:\n        return $$typeof\n    }\n  }\n}\n\nexport function isContextConsumer(object: any): object is ReactElement {\n  return IS_REACT_19\n    ? typeOf(object) === REACT_CONSUMER_TYPE\n    : typeOf(object) === REACT_CONTEXT_TYPE\n}\n\nexport function isMemo(object: any): object is MemoExoticComponent<any> {\n  return typeOf(object) === REACT_MEMO_TYPE\n}\n","/**\r\n * Prints a warning in the console if it exists.\r\n *\r\n * @param {String} message The warning message.\r\n * @returns {void}\r\n */\r\nexport default function warning(message: string) {\r\n  /* eslint-disable no-console */\r\n  if (typeof console !== 'undefined' && typeof console.error === 'function') {\r\n    console.error(message)\r\n  }\r\n  /* eslint-enable no-console */\r\n  try {\r\n    // This error was thrown as a convenience so that if you enable\r\n    // \"break on all exceptions\" in your console,\r\n    // it would pause the execution at this line.\r\n    throw new Error(message)\r\n    /* eslint-disable no-empty */\r\n  } catch (e) {}\r\n  /* eslint-enable no-empty */\r\n}\r\n","import warning from '../utils/warning'\n\nfunction verify(selector: unknown, methodName: string): void {\n  if (!selector) {\n    throw new Error(`Unexpected value for ${methodName} in connect.`)\n  } else if (\n    methodName === 'mapStateToProps' ||\n    methodName === 'mapDispatchToProps'\n  ) {\n    if (!Object.prototype.hasOwnProperty.call(selector, 'dependsOnOwnProps')) {\n      warning(\n        `The selector for ${methodName} of connect did not specify a value for dependsOnOwnProps.`,\n      )\n    }\n  }\n}\n\nexport default function verifySubselectors(\n  mapStateToProps: unknown,\n  mapDispatchToProps: unknown,\n  mergeProps: unknown,\n): void {\n  verify(mapStateToProps, 'mapStateToProps')\n  verify(mapDispatchToProps, 'mapDispatchToProps')\n  verify(mergeProps, 'mergeProps')\n}\n","import type { Dispatch, Action } from 'redux'\nimport type { ComponentType } from 'react'\nimport verifySubselectors from './verifySubselectors'\nimport type { EqualityFn, ExtendedEqualityFn } from '../types'\n\nexport type SelectorFactory<S, TProps, TOwnProps, TFactoryOptions> = (\n  dispatch: Dispatch<Action<string>>,\n  factoryOptions: TFactoryOptions,\n) => Selector<S, TProps, TOwnProps>\n\nexport type Selector<S, TProps, TOwnProps = null> = TOwnProps extends\n  | null\n  | undefined\n  ? (state: S) => TProps\n  : (state: S, ownProps: TOwnProps) => TProps\n\nexport type MapStateToProps<TStateProps, TOwnProps, State> = (\n  state: State,\n  ownProps: TOwnProps,\n) => TStateProps\n\nexport type MapStateToPropsFactory<TStateProps, TOwnProps, State> = (\n  initialState: State,\n  ownProps: TOwnProps,\n) => MapStateToProps<TStateProps, TOwnProps, State>\n\nexport type MapStateToPropsParam<TStateProps, TOwnProps, State> =\n  | MapStateToPropsFactory<TStateProps, TOwnProps, State>\n  | MapStateToProps<TStateProps, TOwnProps, State>\n  | null\n  | undefined\n\nexport type MapDispatchToPropsFunction<TDispatchProps, TOwnProps> = (\n  dispatch: Dispatch<Action<string>>,\n  ownProps: TOwnProps,\n) => TDispatchProps\n\nexport type MapDispatchToProps<TDispatchProps, TOwnProps> =\n  | MapDispatchToPropsFunction<TDispatchProps, TOwnProps>\n  | TDispatchProps\n\nexport type MapDispatchToPropsFactory<TDispatchProps, TOwnProps> = (\n  dispatch: Dispatch<Action<string>>,\n  ownProps: TOwnProps,\n) => MapDispatchToPropsFunction<TDispatchProps, TOwnProps>\n\nexport type MapDispatchToPropsParam<TDispatchProps, TOwnProps> =\n  | MapDispatchToPropsFactory<TDispatchProps, TOwnProps>\n  | MapDispatchToProps<TDispatchProps, TOwnProps>\n\nexport type MapDispatchToPropsNonObject<TDispatchProps, TOwnProps> =\n  | MapDispatchToPropsFactory<TDispatchProps, TOwnProps>\n  | MapDispatchToPropsFunction<TDispatchProps, TOwnProps>\n\nexport type MergeProps<TStateProps, TDispatchProps, TOwnProps, TMergedProps> = (\n  stateProps: TStateProps,\n  dispatchProps: TDispatchProps,\n  ownProps: TOwnProps,\n) => TMergedProps\n\ninterface PureSelectorFactoryComparisonOptions<TStateProps, TOwnProps, State> {\n  readonly areStatesEqual: ExtendedEqualityFn<State, TOwnProps>\n  readonly areStatePropsEqual: EqualityFn<TStateProps>\n  readonly areOwnPropsEqual: EqualityFn<TOwnProps>\n}\n\nfunction pureFinalPropsSelectorFactory<\n  TStateProps,\n  TOwnProps,\n  TDispatchProps,\n  TMergedProps,\n  State,\n>(\n  mapStateToProps: WrappedMapStateToProps<TStateProps, TOwnProps, State>,\n  mapDispatchToProps: WrappedMapDispatchToProps<TDispatchProps, TOwnProps>,\n  mergeProps: MergeProps<TStateProps, TDispatchProps, TOwnProps, TMergedProps>,\n  dispatch: Dispatch<Action<string>>,\n  {\n    areStatesEqual,\n    areOwnPropsEqual,\n    areStatePropsEqual,\n  }: PureSelectorFactoryComparisonOptions<TStateProps, TOwnProps, State>,\n) {\n  let hasRunAtLeastOnce = false\n  let state: State\n  let ownProps: TOwnProps\n  let stateProps: TStateProps\n  let dispatchProps: TDispatchProps\n  let mergedProps: TMergedProps\n\n  function handleFirstCall(firstState: State, firstOwnProps: TOwnProps) {\n    state = firstState\n    ownProps = firstOwnProps\n    stateProps = mapStateToProps(state, ownProps)\n    dispatchProps = mapDispatchToProps(dispatch, ownProps)\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps)\n    hasRunAtLeastOnce = true\n    return mergedProps\n  }\n\n  function handleNewPropsAndNewState() {\n    stateProps = mapStateToProps(state, ownProps)\n\n    if (mapDispatchToProps.dependsOnOwnProps)\n      dispatchProps = mapDispatchToProps(dispatch, ownProps)\n\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps)\n    return mergedProps\n  }\n\n  function handleNewProps() {\n    if (mapStateToProps.dependsOnOwnProps)\n      stateProps = mapStateToProps(state, ownProps)\n\n    if (mapDispatchToProps.dependsOnOwnProps)\n      dispatchProps = mapDispatchToProps(dispatch, ownProps)\n\n    mergedProps = mergeProps(stateProps, dispatchProps, ownProps)\n    return mergedProps\n  }\n\n  function handleNewState() {\n    const nextStateProps = mapStateToProps(state, ownProps)\n    const statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps)\n    stateProps = nextStateProps\n\n    if (statePropsChanged)\n      mergedProps = mergeProps(stateProps, dispatchProps, ownProps)\n\n    return mergedProps\n  }\n\n  function handleSubsequentCalls(nextState: State, nextOwnProps: TOwnProps) {\n    const propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps)\n    const stateChanged = !areStatesEqual(\n      nextState,\n      state,\n      nextOwnProps,\n      ownProps,\n    )\n    state = nextState\n    ownProps = nextOwnProps\n\n    if (propsChanged && stateChanged) return handleNewPropsAndNewState()\n    if (propsChanged) return handleNewProps()\n    if (stateChanged) return handleNewState()\n    return mergedProps\n  }\n\n  return function pureFinalPropsSelector(\n    nextState: State,\n    nextOwnProps: TOwnProps,\n  ) {\n    return hasRunAtLeastOnce\n      ? handleSubsequentCalls(nextState, nextOwnProps)\n      : handleFirstCall(nextState, nextOwnProps)\n  }\n}\n\ninterface WrappedMapStateToProps<TStateProps, TOwnProps, State> {\n  (state: State, ownProps: TOwnProps): TStateProps\n  readonly dependsOnOwnProps: boolean\n}\n\ninterface WrappedMapDispatchToProps<TDispatchProps, TOwnProps> {\n  (dispatch: Dispatch<Action<string>>, ownProps: TOwnProps): TDispatchProps\n  readonly dependsOnOwnProps: boolean\n}\n\nexport interface InitOptions<TStateProps, TOwnProps, TMergedProps, State>\n  extends PureSelectorFactoryComparisonOptions<TStateProps, TOwnProps, State> {\n  readonly shouldHandleStateChanges: boolean\n  readonly displayName: string\n  readonly wrappedComponentName: string\n  readonly WrappedComponent: ComponentType<TOwnProps>\n  readonly areMergedPropsEqual: EqualityFn<TMergedProps>\n}\n\nexport interface SelectorFactoryOptions<\n  TStateProps,\n  TOwnProps,\n  TDispatchProps,\n  TMergedProps,\n  State,\n> extends InitOptions<TStateProps, TOwnProps, TMergedProps, State> {\n  readonly initMapStateToProps: (\n    dispatch: Dispatch<Action<string>>,\n    options: InitOptions<TStateProps, TOwnProps, TMergedProps, State>,\n  ) => WrappedMapStateToProps<TStateProps, TOwnProps, State>\n  readonly initMapDispatchToProps: (\n    dispatch: Dispatch<Action<string>>,\n    options: InitOptions<TStateProps, TOwnProps, TMergedProps, State>,\n  ) => WrappedMapDispatchToProps<TDispatchProps, TOwnProps>\n  readonly initMergeProps: (\n    dispatch: Dispatch<Action<string>>,\n    options: InitOptions<TStateProps, TOwnProps, TMergedProps, State>,\n  ) => MergeProps<TStateProps, TDispatchProps, TOwnProps, TMergedProps>\n}\n\n// TODO: Add more comments\n\n// The selector returned by selectorFactory will memoize its results,\n// allowing connect's shouldComponentUpdate to return false if final\n// props have not changed.\n\nexport default function finalPropsSelectorFactory<\n  TStateProps,\n  TOwnProps,\n  TDispatchProps,\n  TMergedProps,\n  State,\n>(\n  dispatch: Dispatch<Action<string>>,\n  {\n    initMapStateToProps,\n    initMapDispatchToProps,\n    initMergeProps,\n    ...options\n  }: SelectorFactoryOptions<\n    TStateProps,\n    TOwnProps,\n    TDispatchProps,\n    TMergedProps,\n    State\n  >,\n) {\n  const mapStateToProps = initMapStateToProps(dispatch, options)\n  const mapDispatchToProps = initMapDispatchToProps(dispatch, options)\n  const mergeProps = initMergeProps(dispatch, options)\n\n  if (process.env.NODE_ENV !== 'production') {\n    verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps)\n  }\n\n  return pureFinalPropsSelectorFactory<\n    TStateProps,\n    TOwnProps,\n    TDispatchProps,\n    TMergedProps,\n    State\n  >(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options)\n}\n","import type { ActionCreatorsMapObject, Dispatch } from 'redux'\n\nexport default function bindActionCreators(\n  actionCreators: ActionCreatorsMapObject,\n  dispatch: Dispatch,\n): ActionCreatorsMapObject {\n  const boundActionCreators: ActionCreatorsMapObject = {}\n\n  for (const key in actionCreators) {\n    const actionCreator = actionCreators[key]\n    if (typeof actionCreator === 'function') {\n      boundActionCreators[key] = (...args) => dispatch(actionCreator(...args))\n    }\n  }\n  return boundActionCreators\n}\n","/**\n * @param {any} obj The object to inspect.\n * @returns {boolean} True if the argument appears to be a plain object.\n */\nexport default function isPlainObject(obj: unknown) {\n  if (typeof obj !== 'object' || obj === null) return false\n\n  const proto = Object.getPrototypeOf(obj)\n  if (proto === null) return true\n\n  let baseProto = proto\n  while (Object.getPrototypeOf(baseProto) !== null) {\n    baseProto = Object.getPrototypeOf(baseProto)\n  }\n\n  return proto === baseProto\n}\n","import isPlainObject from './isPlainObject'\nimport warning from './warning'\n\nexport default function verifyPlainObject(\n  value: unknown,\n  displayName: string,\n  methodName: string,\n) {\n  if (!isPlainObject(value)) {\n    warning(\n      `${methodName}() in ${displayName} must return a plain object. Instead received ${value}.`,\n    )\n  }\n}\n","import type { ActionCreatorsMapObject, Dispatch, ActionCreator } from 'redux'\n\nimport type { FixTypeLater } from '../types'\nimport verifyPlainObject from '../utils/verifyPlainObject'\n\ntype AnyState = { [key: string]: any }\ntype StateOrDispatch<S extends AnyState = AnyState> = S | Dispatch\n\ntype AnyProps = { [key: string]: any }\n\nexport type MapToProps<P extends AnyProps = AnyProps> = {\n  // eslint-disable-next-line no-unused-vars\n  (stateOrDispatch: StateOrDispatch, ownProps?: P): FixTypeLater\n  dependsOnOwnProps?: boolean\n}\n\nexport function wrapMapToPropsConstant(\n  // * Note:\n  //  It seems that the dispatch argument\n  //  could be a dispatch function in some cases (ex: whenMapDispatchToPropsIsMissing)\n  //  and a state object in some others (ex: whenMapStateToPropsIsMissing)\n  // eslint-disable-next-line no-unused-vars\n  getConstant: (dispatch: Dispatch) =>\n    | {\n        dispatch?: Dispatch\n        dependsOnOwnProps?: boolean\n      }\n    | ActionCreatorsMapObject\n    | ActionCreator<any>,\n) {\n  return function initConstantSelector(dispatch: Dispatch) {\n    const constant = getConstant(dispatch)\n\n    function constantSelector() {\n      return constant\n    }\n    constantSelector.dependsOnOwnProps = false\n    return constantSelector\n  }\n}\n\n// dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args\n// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine\n// whether mapToProps needs to be invoked when props have changed.\n//\n// A length of one signals that mapToProps does not depend on props from the parent component.\n// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and\n// therefore not reporting its length accurately..\n// TODO Can this get pulled out so that we can subscribe directly to the store if we don't need ownProps?\nfunction getDependsOnOwnProps(mapToProps: MapToProps) {\n  return mapToProps.dependsOnOwnProps\n    ? Boolean(mapToProps.dependsOnOwnProps)\n    : mapToProps.length !== 1\n}\n\n// Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,\n// this function wraps mapToProps in a proxy function which does several things:\n//\n//  * Detects whether the mapToProps function being called depends on props, which\n//    is used by selectorFactory to decide if it should reinvoke on props changes.\n//\n//  * On first call, handles mapToProps if returns another function, and treats that\n//    new function as the true mapToProps for subsequent calls.\n//\n//  * On first call, verifies the first result is a plain object, in order to warn\n//    the developer that their mapToProps function is not returning a valid result.\n//\nexport function wrapMapToPropsFunc<P extends AnyProps = AnyProps>(\n  mapToProps: MapToProps,\n  methodName: string,\n) {\n  return function initProxySelector(\n    dispatch: Dispatch,\n    { displayName }: { displayName: string },\n  ) {\n    const proxy = function mapToPropsProxy(\n      stateOrDispatch: StateOrDispatch,\n      ownProps?: P,\n    ): MapToProps {\n      return proxy.dependsOnOwnProps\n        ? proxy.mapToProps(stateOrDispatch, ownProps)\n        : proxy.mapToProps(stateOrDispatch, undefined)\n    }\n\n    // allow detectFactoryAndVerify to get ownProps\n    proxy.dependsOnOwnProps = true\n\n    proxy.mapToProps = function detectFactoryAndVerify(\n      stateOrDispatch: StateOrDispatch,\n      ownProps?: P,\n    ): MapToProps {\n      proxy.mapToProps = mapToProps\n      proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps)\n      let props = proxy(stateOrDispatch, ownProps)\n\n      if (typeof props === 'function') {\n        proxy.mapToProps = props\n        proxy.dependsOnOwnProps = getDependsOnOwnProps(props)\n        props = proxy(stateOrDispatch, ownProps)\n      }\n\n      if (process.env.NODE_ENV !== 'production')\n        verifyPlainObject(props, displayName, methodName)\n\n      return props\n    }\n\n    return proxy\n  }\n}\n","import type { Action, Dispatch } from 'redux'\n\nexport function createInvalidArgFactory(arg: unknown, name: string) {\n  return (\n    dispatch: Dispatch<Action<string>>,\n    options: { readonly wrappedComponentName: string },\n  ) => {\n    throw new Error(\n      `Invalid value of type ${typeof arg} for ${name} argument when connecting component ${\n        options.wrappedComponentName\n      }.`,\n    )\n  }\n}\n","import type { Action, Dispatch } from 'redux'\nimport bindActionCreators from '../utils/bindActionCreators'\nimport { wrapMapToPropsConstant, wrapMapToPropsFunc } from './wrapMapToProps'\nimport { createInvalidArgFactory } from './invalidArgFactory'\nimport type { MapDispatchToPropsParam } from './selectorFactory'\n\nexport function mapDispatchToPropsFactory<TDispatchProps, TOwnProps>(\n  mapDispatchToProps:\n    | MapDispatchToPropsParam<TDispatchProps, TOwnProps>\n    | undefined,\n) {\n  return mapDispatchToProps && typeof mapDispatchToProps === 'object'\n    ? wrapMapToPropsConstant((dispatch: Dispatch<Action<string>>) =>\n        // @ts-ignore\n        bindActionCreators(mapDispatchToProps, dispatch),\n      )\n    : !mapDispatchToProps\n      ? wrapMapToPropsConstant((dispatch: Dispatch<Action<string>>) => ({\n          dispatch,\n        }))\n      : typeof mapDispatchToProps === 'function'\n        ? // @ts-ignore\n          wrapMapToPropsFunc(mapDispatchToProps, 'mapDispatchToProps')\n        : createInvalidArgFactory(mapDispatchToProps, 'mapDispatchToProps')\n}\n","import { wrapMapToPropsConstant, wrapMapToPropsFunc } from './wrapMapToProps'\nimport { createInvalidArgFactory } from './invalidArgFactory'\nimport type { MapStateToPropsParam } from './selectorFactory'\n\nexport function mapStateToPropsFactory<TStateProps, TOwnProps, State>(\n  mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n) {\n  return !mapStateToProps\n    ? wrapMapToPropsConstant(() => ({}))\n    : typeof mapStateToProps === 'function'\n      ? // @ts-ignore\n        wrapMapToPropsFunc(mapStateToProps, 'mapStateToProps')\n      : createInvalidArgFactory(mapStateToProps, 'mapStateToProps')\n}\n","import type { Action, Dispatch } from 'redux'\nimport verifyPlainObject from '../utils/verifyPlainObject'\nimport { createInvalidArgFactory } from './invalidArgFactory'\nimport type { MergeProps } from './selectorFactory'\nimport type { EqualityFn } from '../types'\n\nfunction defaultMergeProps<\n  TStateProps,\n  TDispatchProps,\n  TOwnProps,\n  TMergedProps,\n>(\n  stateProps: TStateProps,\n  dispatchProps: TDispatchProps,\n  ownProps: TOwnProps,\n): TMergedProps {\n  // @ts-ignore\n  return { ...ownProps, ...stateProps, ...dispatchProps }\n}\n\nfunction wrapMergePropsFunc<\n  TStateProps,\n  TDispatchProps,\n  TOwnProps,\n  TMergedProps,\n>(\n  mergeProps: MergeProps<TStateProps, TDispatchProps, TOwnProps, TMergedProps>,\n): (\n  dispatch: Dispatch<Action<string>>,\n  options: {\n    readonly displayName: string\n    readonly areMergedPropsEqual: EqualityFn<TMergedProps>\n  },\n) => MergeProps<TStateProps, TDispatchProps, TOwnProps, TMergedProps> {\n  return function initMergePropsProxy(\n    dispatch,\n    { displayName, areMergedPropsEqual },\n  ) {\n    let hasRunOnce = false\n    let mergedProps: TMergedProps\n\n    return function mergePropsProxy(\n      stateProps: TStateProps,\n      dispatchProps: TDispatchProps,\n      ownProps: TOwnProps,\n    ) {\n      const nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps)\n\n      if (hasRunOnce) {\n        if (!areMergedPropsEqual(nextMergedProps, mergedProps))\n          mergedProps = nextMergedProps\n      } else {\n        hasRunOnce = true\n        mergedProps = nextMergedProps\n\n        if (process.env.NODE_ENV !== 'production')\n          verifyPlainObject(mergedProps, displayName, 'mergeProps')\n      }\n\n      return mergedProps\n    }\n  }\n}\n\nexport function mergePropsFactory<\n  TStateProps,\n  TDispatchProps,\n  TOwnProps,\n  TMergedProps,\n>(\n  mergeProps?: MergeProps<TStateProps, TDispatchProps, TOwnProps, TMergedProps>,\n) {\n  return !mergeProps\n    ? () => defaultMergeProps\n    : typeof mergeProps === 'function'\n      ? wrapMergePropsFunc(mergeProps)\n      : createInvalidArgFactory(mergeProps, 'mergeProps')\n}\n","// Default to a dummy \"batch\" implementation that just runs the callback\r\nexport function defaultNoopBatch(callback: () => void) {\r\n  callback()\r\n}\r\n","import { defaultNoopBatch as batch } from './batch'\n\n// encapsulates the subscription logic for connecting a component to the redux store, as\n// well as nesting subscriptions of descendant components, so that we can ensure the\n// ancestor components re-render before descendants\n\ntype VoidFunc = () => void\n\ntype Listener = {\n  callback: VoidFunc\n  next: Listener | null\n  prev: Listener | null\n}\n\nfunction createListenerCollection() {\n  let first: Listener | null = null\n  let last: Listener | null = null\n\n  return {\n    clear() {\n      first = null\n      last = null\n    },\n\n    notify() {\n      batch(() => {\n        let listener = first\n        while (listener) {\n          listener.callback()\n          listener = listener.next\n        }\n      })\n    },\n\n    get() {\n      const listeners: Listener[] = []\n      let listener = first\n      while (listener) {\n        listeners.push(listener)\n        listener = listener.next\n      }\n      return listeners\n    },\n\n    subscribe(callback: () => void) {\n      let isSubscribed = true\n\n      const listener: Listener = (last = {\n        callback,\n        next: null,\n        prev: last,\n      })\n\n      if (listener.prev) {\n        listener.prev.next = listener\n      } else {\n        first = listener\n      }\n\n      return function unsubscribe() {\n        if (!isSubscribed || first === null) return\n        isSubscribed = false\n\n        if (listener.next) {\n          listener.next.prev = listener.prev\n        } else {\n          last = listener.prev\n        }\n        if (listener.prev) {\n          listener.prev.next = listener.next\n        } else {\n          first = listener.next\n        }\n      }\n    },\n  }\n}\n\ntype ListenerCollection = ReturnType<typeof createListenerCollection>\n\nexport interface Subscription {\n  addNestedSub: (listener: VoidFunc) => VoidFunc\n  notifyNestedSubs: VoidFunc\n  handleChangeWrapper: VoidFunc\n  isSubscribed: () => boolean\n  onStateChange?: VoidFunc | null\n  trySubscribe: VoidFunc\n  tryUnsubscribe: VoidFunc\n  getListeners: () => ListenerCollection\n}\n\nconst nullListeners = {\n  notify() {},\n  get: () => [],\n} as unknown as ListenerCollection\n\nexport function createSubscription(store: any, parentSub?: Subscription) {\n  let unsubscribe: VoidFunc | undefined\n  let listeners: ListenerCollection = nullListeners\n\n  // Reasons to keep the subscription active\n  let subscriptionsAmount = 0\n\n  // Is this specific subscription subscribed (or only nested ones?)\n  let selfSubscribed = false\n\n  function addNestedSub(listener: () => void) {\n    trySubscribe()\n\n    const cleanupListener = listeners.subscribe(listener)\n\n    // cleanup nested sub\n    let removed = false\n    return () => {\n      if (!removed) {\n        removed = true\n        cleanupListener()\n        tryUnsubscribe()\n      }\n    }\n  }\n\n  function notifyNestedSubs() {\n    listeners.notify()\n  }\n\n  function handleChangeWrapper() {\n    if (subscription.onStateChange) {\n      subscription.onStateChange()\n    }\n  }\n\n  function isSubscribed() {\n    return selfSubscribed\n  }\n\n  function trySubscribe() {\n    subscriptionsAmount++\n    if (!unsubscribe) {\n      unsubscribe = parentSub\n        ? parentSub.addNestedSub(handleChangeWrapper)\n        : store.subscribe(handleChangeWrapper)\n\n      listeners = createListenerCollection()\n    }\n  }\n\n  function tryUnsubscribe() {\n    subscriptionsAmount--\n    if (unsubscribe && subscriptionsAmount === 0) {\n      unsubscribe()\n      unsubscribe = undefined\n      listeners.clear()\n      listeners = nullListeners\n    }\n  }\n\n  function trySubscribeSelf() {\n    if (!selfSubscribed) {\n      selfSubscribed = true\n      trySubscribe()\n    }\n  }\n\n  function tryUnsubscribeSelf() {\n    if (selfSubscribed) {\n      selfSubscribed = false\n      tryUnsubscribe()\n    }\n  }\n\n  const subscription: Subscription = {\n    addNestedSub,\n    notifyNestedSubs,\n    handleChangeWrapper,\n    isSubscribed,\n    trySubscribe: trySubscribeSelf,\n    tryUnsubscribe: tryUnsubscribeSelf,\n    getListeners: () => listeners,\n  }\n\n  return subscription\n}\n","import { React } from '../utils/react'\n\n// React currently throws a warning when using useLayoutEffect on the server.\n// To get around it, we can conditionally useEffect on the server (no-op) and\n// useLayoutEffect in the browser. We need useLayoutEffect to ensure the store\n// subscription callback always has the selector from the latest render commit\n// available, otherwise a store update may happen between render and the effect,\n// which may cause missed updates; we also must ensure the store subscription\n// is created synchronously, otherwise a store update may occur before the\n// subscription is created and an inconsistent state may be observed\n\n// Matches logic in React's `shared/ExecutionEnvironment` file\nconst canUseDOM = () =>\n  !!(\n    typeof window !== 'undefined' &&\n    typeof window.document !== 'undefined' &&\n    typeof window.document.createElement !== 'undefined'\n  )\n\nconst isDOM = /* @__PURE__ */ canUseDOM()\n\n// Under React Native, we know that we always want to use useLayoutEffect\n\n/**\n * Checks if the code is running in a React Native environment.\n *\n * @returns Whether the code is running in a React Native environment.\n *\n * @see {@link https://github.com/facebook/react-native/issues/1331 Reference}\n */\nconst isRunningInReactNative = () =>\n  typeof navigator !== 'undefined' && navigator.product === 'ReactNative'\n\nconst isReactNative = /* @__PURE__ */ isRunningInReactNative()\n\nconst getUseIsomorphicLayoutEffect = () =>\n  isDOM || isReactNative ? React.useLayoutEffect : React.useEffect\n\nexport const useIsomorphicLayoutEffect =\n  /* @__PURE__ */ getUseIsomorphicLayoutEffect()\n","function is(x: unknown, y: unknown) {\r\n  if (x === y) {\r\n    return x !== 0 || y !== 0 || 1 / x === 1 / y\r\n  } else {\r\n    return x !== x && y !== y\r\n  }\r\n}\r\n\r\nexport default function shallowEqual(objA: any, objB: any) {\r\n  if (is(objA, objB)) return true\r\n\r\n  if (\r\n    typeof objA !== 'object' ||\r\n    objA === null ||\r\n    typeof objB !== 'object' ||\r\n    objB === null\r\n  ) {\r\n    return false\r\n  }\r\n\r\n  const keysA = Object.keys(objA)\r\n  const keysB = Object.keys(objB)\r\n\r\n  if (keysA.length !== keysB.length) return false\r\n\r\n  for (let i = 0; i < keysA.length; i++) {\r\n    if (\r\n      !Object.prototype.hasOwnProperty.call(objB, keysA[i]) ||\r\n      !is(objA[keysA[i]], objB[keysA[i]])\r\n    ) {\r\n      return false\r\n    }\r\n  }\r\n\r\n  return true\r\n}\r\n","// Copied directly from:\n// https://github.com/mridgway/hoist-non-react-statics/blob/main/src/index.js\n// https://unpkg.com/browse/@types/hoist-non-react-statics@3.3.6/index.d.ts\n\n/**\n * Copyright 2015, Yahoo! Inc.\n * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.\n */\nimport type { ForwardRefExoticComponent, MemoExoticComponent } from 'react'\nimport { ForwardRef, Memo, isMemo } from '../utils/react-is'\n\nconst REACT_STATICS = {\n  childContextTypes: true,\n  contextType: true,\n  contextTypes: true,\n  defaultProps: true,\n  displayName: true,\n  getDefaultProps: true,\n  getDerivedStateFromError: true,\n  getDerivedStateFromProps: true,\n  mixins: true,\n  propTypes: true,\n  type: true,\n} as const\n\nconst KNOWN_STATICS = {\n  name: true,\n  length: true,\n  prototype: true,\n  caller: true,\n  callee: true,\n  arguments: true,\n  arity: true,\n} as const\n\nconst FORWARD_REF_STATICS = {\n  $$typeof: true,\n  render: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true,\n} as const\n\nconst MEMO_STATICS = {\n  $$typeof: true,\n  compare: true,\n  defaultProps: true,\n  displayName: true,\n  propTypes: true,\n  type: true,\n} as const\n\nconst TYPE_STATICS = {\n  [ForwardRef]: FORWARD_REF_STATICS,\n  [Memo]: MEMO_STATICS,\n} as const\n\nfunction getStatics(component: any) {\n  // React v16.11 and below\n  if (isMemo(component)) {\n    return MEMO_STATICS\n  }\n\n  // React v16.12 and above\n  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS\n}\n\nexport type NonReactStatics<\n  Source,\n  C extends {\n    [key: string]: true\n  } = {},\n> = {\n  [key in Exclude<\n    keyof Source,\n    Source extends MemoExoticComponent<any>\n      ? keyof typeof MEMO_STATICS | keyof C\n      : Source extends ForwardRefExoticComponent<any>\n        ? keyof typeof FORWARD_REF_STATICS | keyof C\n        : keyof typeof REACT_STATICS | keyof typeof KNOWN_STATICS | keyof C\n  >]: Source[key]\n}\n\nconst defineProperty = Object.defineProperty\nconst getOwnPropertyNames = Object.getOwnPropertyNames\nconst getOwnPropertySymbols = Object.getOwnPropertySymbols\nconst getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor\nconst getPrototypeOf = Object.getPrototypeOf\nconst objectPrototype = Object.prototype\n\nexport default function hoistNonReactStatics<\n  Target,\n  Source,\n  CustomStatic extends {\n    [key: string]: true\n  } = {},\n>(\n  targetComponent: Target,\n  sourceComponent: Source,\n): Target & NonReactStatics<Source, CustomStatic> {\n  if (typeof sourceComponent !== 'string') {\n    // don't hoist over string (html) components\n\n    if (objectPrototype) {\n      const inheritedComponent = getPrototypeOf(sourceComponent)\n      if (inheritedComponent && inheritedComponent !== objectPrototype) {\n        hoistNonReactStatics(targetComponent, inheritedComponent)\n      }\n    }\n\n    let keys: (string | symbol)[] = getOwnPropertyNames(sourceComponent)\n\n    if (getOwnPropertySymbols) {\n      keys = keys.concat(getOwnPropertySymbols(sourceComponent))\n    }\n\n    const targetStatics = getStatics(targetComponent)\n    const sourceStatics = getStatics(sourceComponent)\n\n    for (let i = 0; i < keys.length; ++i) {\n      const key = keys[i]\n      if (\n        !KNOWN_STATICS[key as keyof typeof KNOWN_STATICS] &&\n        !(sourceStatics && sourceStatics[key as keyof typeof sourceStatics]) &&\n        !(targetStatics && targetStatics[key as keyof typeof targetStatics])\n      ) {\n        const descriptor = getOwnPropertyDescriptor(sourceComponent, key)\n        try {\n          // Avoid failures from read-only properties\n          defineProperty(targetComponent, key, descriptor!)\n        } catch (e) {\n          // ignore\n        }\n      }\n    }\n  }\n\n  return targetComponent as any\n}\n","import type { Context } from 'react'\nimport { React } from '../utils/react'\nimport type { Action, Store, UnknownAction } from 'redux'\nimport type { Subscription } from '../utils/Subscription'\nimport type { ProviderProps } from './Provider'\n\nexport interface ReactReduxContextValue<\n  SS = any,\n  A extends Action<string> = UnknownAction,\n> extends Pick<ProviderProps, 'stabilityCheck' | 'identityFunctionCheck'> {\n  store: Store<SS, A>\n  subscription: Subscription\n  getServerState?: () => SS\n}\n\nconst ContextKey = /* @__PURE__ */ Symbol.for(`react-redux-context`)\nconst gT: {\n  [ContextKey]?: Map<\n    typeof React.createContext,\n    Context<ReactReduxContextValue | null>\n  >\n} = (\n  typeof globalThis !== 'undefined'\n    ? globalThis\n    : /* fall back to a per-module scope (pre-8.1 behaviour) if `globalThis` is not available */ {}\n) as any\n\nfunction getContext(): Context<ReactReduxContextValue | null> {\n  if (!React.createContext) return {} as any\n\n  const contextMap = (gT[ContextKey] ??= new Map<\n    typeof React.createContext,\n    Context<ReactReduxContextValue | null>\n  >())\n  let realContext = contextMap.get(React.createContext)\n  if (!realContext) {\n    realContext = React.createContext<ReactReduxContextValue | null>(\n      null as any,\n    )\n    if (process.env.NODE_ENV !== 'production') {\n      realContext.displayName = 'ReactRedux'\n    }\n    contextMap.set(React.createContext, realContext)\n  }\n  return realContext\n}\n\nexport const ReactReduxContext = /*#__PURE__*/ getContext()\n\nexport type ReactReduxContextInstance = typeof ReactReduxContext\n","/* eslint-disable valid-jsdoc, @typescript-eslint/no-unused-vars */\nimport type { ComponentType } from 'react'\nimport { React } from '../utils/react'\nimport { isValidElementType, isContextConsumer } from '../utils/react-is'\n\nimport type { Store } from 'redux'\n\nimport type {\n  ConnectedComponent,\n  InferableComponentEnhancer,\n  InferableComponentEnhancerWithProps,\n  ResolveThunks,\n  DispatchProp,\n  ConnectPropsMaybeWithoutContext,\n} from '../types'\n\nimport type {\n  MapStateToPropsParam,\n  MapDispatchToPropsParam,\n  MergeProps,\n  MapDispatchToPropsNonObject,\n  SelectorFactoryOptions,\n} from '../connect/selectorFactory'\nimport defaultSelectorFactory from '../connect/selectorFactory'\nimport { mapDispatchToPropsFactory } from '../connect/mapDispatchToProps'\nimport { mapStateToPropsFactory } from '../connect/mapStateToProps'\nimport { mergePropsFactory } from '../connect/mergeProps'\n\nimport type { Subscription } from '../utils/Subscription'\nimport { createSubscription } from '../utils/Subscription'\nimport { useIsomorphicLayoutEffect } from '../utils/useIsomorphicLayoutEffect'\nimport shallowEqual from '../utils/shallowEqual'\nimport hoistStatics from '../utils/hoistStatics'\nimport warning from '../utils/warning'\n\nimport type {\n  ReactReduxContextValue,\n  ReactReduxContextInstance,\n} from './Context'\nimport { ReactReduxContext } from './Context'\n\n// Define some constant arrays just to avoid re-creating these\nconst EMPTY_ARRAY: [unknown, number] = [null, 0]\nconst NO_SUBSCRIPTION_ARRAY = [null, null]\n\n// Attempts to stringify whatever not-really-a-component value we were given\n// for logging in an error message\nconst stringifyComponent = (Comp: unknown) => {\n  try {\n    return JSON.stringify(Comp)\n  } catch (err) {\n    return String(Comp)\n  }\n}\n\ntype EffectFunc = (...args: any[]) => void | ReturnType<React.EffectCallback>\n\n// This is \"just\" a `useLayoutEffect`, but with two modifications:\n// - we need to fall back to `useEffect` in SSR to avoid annoying warnings\n// - we extract this to a separate function to avoid closing over values\n//   and causing memory leaks\nfunction useIsomorphicLayoutEffectWithArgs(\n  effectFunc: EffectFunc,\n  effectArgs: any[],\n  dependencies?: React.DependencyList,\n) {\n  useIsomorphicLayoutEffect(() => effectFunc(...effectArgs), dependencies)\n}\n\n// Effect callback, extracted: assign the latest props values to refs for later usage\nfunction captureWrapperProps(\n  lastWrapperProps: React.MutableRefObject<unknown>,\n  lastChildProps: React.MutableRefObject<unknown>,\n  renderIsScheduled: React.MutableRefObject<boolean>,\n  wrapperProps: unknown,\n  // actualChildProps: unknown,\n  childPropsFromStoreUpdate: React.MutableRefObject<unknown>,\n  notifyNestedSubs: () => void,\n) {\n  // We want to capture the wrapper props and child props we used for later comparisons\n  lastWrapperProps.current = wrapperProps\n  renderIsScheduled.current = false\n\n  // If the render was from a store update, clear out that reference and cascade the subscriber update\n  if (childPropsFromStoreUpdate.current) {\n    childPropsFromStoreUpdate.current = null\n    notifyNestedSubs()\n  }\n}\n\n// Effect callback, extracted: subscribe to the Redux store or nearest connected ancestor,\n// check for updates after dispatched actions, and trigger re-renders.\nfunction subscribeUpdates(\n  shouldHandleStateChanges: boolean,\n  store: Store,\n  subscription: Subscription,\n  childPropsSelector: (state: unknown, props: unknown) => unknown,\n  lastWrapperProps: React.MutableRefObject<unknown>,\n  lastChildProps: React.MutableRefObject<unknown>,\n  renderIsScheduled: React.MutableRefObject<boolean>,\n  isMounted: React.MutableRefObject<boolean>,\n  childPropsFromStoreUpdate: React.MutableRefObject<unknown>,\n  notifyNestedSubs: () => void,\n  // forceComponentUpdateDispatch: React.Dispatch<any>,\n  additionalSubscribeListener: () => void,\n) {\n  // If we're not subscribed to the store, nothing to do here\n  if (!shouldHandleStateChanges) return () => {}\n\n  // Capture values for checking if and when this component unmounts\n  let didUnsubscribe = false\n  let lastThrownError: Error | null = null\n\n  // We'll run this callback every time a store subscription update propagates to this component\n  const checkForUpdates = () => {\n    if (didUnsubscribe || !isMounted.current) {\n      // Don't run stale listeners.\n      // Redux doesn't guarantee unsubscriptions happen until next dispatch.\n      return\n    }\n\n    // TODO We're currently calling getState ourselves here, rather than letting `uSES` do it\n    const latestStoreState = store.getState()\n\n    let newChildProps, error\n    try {\n      // Actually run the selector with the most recent store state and wrapper props\n      // to determine what the child props should be\n      newChildProps = childPropsSelector(\n        latestStoreState,\n        lastWrapperProps.current,\n      )\n    } catch (e) {\n      error = e\n      lastThrownError = e as Error | null\n    }\n\n    if (!error) {\n      lastThrownError = null\n    }\n\n    // If the child props haven't changed, nothing to do here - cascade the subscription update\n    if (newChildProps === lastChildProps.current) {\n      if (!renderIsScheduled.current) {\n        notifyNestedSubs()\n      }\n    } else {\n      // Save references to the new child props.  Note that we track the \"child props from store update\"\n      // as a ref instead of a useState/useReducer because we need a way to determine if that value has\n      // been processed.  If this went into useState/useReducer, we couldn't clear out the value without\n      // forcing another re-render, which we don't want.\n      lastChildProps.current = newChildProps\n      childPropsFromStoreUpdate.current = newChildProps\n      renderIsScheduled.current = true\n\n      // TODO This is hacky and not how `uSES` is meant to be used\n      // Trigger the React `useSyncExternalStore` subscriber\n      additionalSubscribeListener()\n    }\n  }\n\n  // Actually subscribe to the nearest connected ancestor (or store)\n  subscription.onStateChange = checkForUpdates\n  subscription.trySubscribe()\n\n  // Pull data from the store after first render in case the store has\n  // changed since we began.\n  checkForUpdates()\n\n  const unsubscribeWrapper = () => {\n    didUnsubscribe = true\n    subscription.tryUnsubscribe()\n    subscription.onStateChange = null\n\n    if (lastThrownError) {\n      // It's possible that we caught an error due to a bad mapState function, but the\n      // parent re-rendered without this component and we're about to unmount.\n      // This shouldn't happen as long as we do top-down subscriptions correctly, but\n      // if we ever do those wrong, this throw will surface the error in our tests.\n      // In that case, throw the error from here so it doesn't get lost.\n      throw lastThrownError\n    }\n  }\n\n  return unsubscribeWrapper\n}\n\n// Reducer initial state creation for our update reducer\nconst initStateUpdates = () => EMPTY_ARRAY\n\nexport interface ConnectProps {\n  /** A custom Context instance that the component can use to access the store from an alternate Provider using that same Context instance */\n  context?: ReactReduxContextInstance\n  /** A Redux store instance to be used for subscriptions instead of the store from a Provider */\n  store?: Store\n}\n\ninterface InternalConnectProps extends ConnectProps {\n  reactReduxForwardedRef?: React.ForwardedRef<unknown>\n}\n\nfunction strictEqual(a: unknown, b: unknown) {\n  return a === b\n}\n\n/**\n * Infers the type of props that a connector will inject into a component.\n */\nexport type ConnectedProps<TConnector> =\n  TConnector extends InferableComponentEnhancerWithProps<\n    infer TInjectedProps,\n    any\n  >\n    ? unknown extends TInjectedProps\n      ? TConnector extends InferableComponentEnhancer<infer TInjectedProps>\n        ? TInjectedProps\n        : never\n      : TInjectedProps\n    : never\n\nexport interface ConnectOptions<\n  State = unknown,\n  TStateProps = {},\n  TOwnProps = {},\n  TMergedProps = {},\n> {\n  forwardRef?: boolean\n  context?: typeof ReactReduxContext\n  areStatesEqual?: (\n    nextState: State,\n    prevState: State,\n    nextOwnProps: TOwnProps,\n    prevOwnProps: TOwnProps,\n  ) => boolean\n\n  areOwnPropsEqual?: (\n    nextOwnProps: TOwnProps,\n    prevOwnProps: TOwnProps,\n  ) => boolean\n\n  areStatePropsEqual?: (\n    nextStateProps: TStateProps,\n    prevStateProps: TStateProps,\n  ) => boolean\n  areMergedPropsEqual?: (\n    nextMergedProps: TMergedProps,\n    prevMergedProps: TMergedProps,\n  ) => boolean\n}\n\n/**\n * Connects a React component to a Redux store.\n *\n * - Without arguments, just wraps the component, without changing the behavior / props\n *\n * - If 2 params are passed (3rd param, mergeProps, is skipped), default behavior\n * is to override ownProps (as stated in the docs), so what remains is everything that's\n * not a state or dispatch prop\n *\n * - When 3rd param is passed, we don't know if ownProps propagate and whether they\n * should be valid component props, because it depends on mergeProps implementation.\n * As such, it is the user's responsibility to extend ownProps interface from state or\n * dispatch props or both when applicable\n *\n * @param mapStateToProps\n * @param mapDispatchToProps\n * @param mergeProps\n * @param options\n */\nexport interface Connect<DefaultState = unknown> {\n  // tslint:disable:no-unnecessary-generics\n  (): InferableComponentEnhancer<DispatchProp>\n\n  /** mapState only */\n  <TStateProps = {}, no_dispatch = {}, TOwnProps = {}, State = DefaultState>(\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n  ): InferableComponentEnhancerWithProps<TStateProps & DispatchProp, TOwnProps>\n\n  /** mapDispatch only (as a function) */\n  <no_state = {}, TDispatchProps = {}, TOwnProps = {}>(\n    mapStateToProps: null | undefined,\n    mapDispatchToProps: MapDispatchToPropsNonObject<TDispatchProps, TOwnProps>,\n  ): InferableComponentEnhancerWithProps<TDispatchProps, TOwnProps>\n\n  /** mapDispatch only (as an object) */\n  <no_state = {}, TDispatchProps = {}, TOwnProps = {}>(\n    mapStateToProps: null | undefined,\n    mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\n  ): InferableComponentEnhancerWithProps<\n    ResolveThunks<TDispatchProps>,\n    TOwnProps\n  >\n\n  /** mapState and mapDispatch (as a function)*/\n  <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>(\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n    mapDispatchToProps: MapDispatchToPropsNonObject<TDispatchProps, TOwnProps>,\n  ): InferableComponentEnhancerWithProps<\n    TStateProps & TDispatchProps,\n    TOwnProps\n  >\n\n  /** mapState and mapDispatch (nullish) */\n  <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>(\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n    mapDispatchToProps: null | undefined,\n  ): InferableComponentEnhancerWithProps<TStateProps, TOwnProps>\n\n  /** mapState and mapDispatch (as an object) */\n  <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>(\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n    mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\n  ): InferableComponentEnhancerWithProps<\n    TStateProps & ResolveThunks<TDispatchProps>,\n    TOwnProps\n  >\n\n  /** mergeProps only */\n  <no_state = {}, no_dispatch = {}, TOwnProps = {}, TMergedProps = {}>(\n    mapStateToProps: null | undefined,\n    mapDispatchToProps: null | undefined,\n    mergeProps: MergeProps<undefined, DispatchProp, TOwnProps, TMergedProps>,\n  ): InferableComponentEnhancerWithProps<TMergedProps, TOwnProps>\n\n  /** mapState and mergeProps */\n  <\n    TStateProps = {},\n    no_dispatch = {},\n    TOwnProps = {},\n    TMergedProps = {},\n    State = DefaultState,\n  >(\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n    mapDispatchToProps: null | undefined,\n    mergeProps: MergeProps<TStateProps, DispatchProp, TOwnProps, TMergedProps>,\n  ): InferableComponentEnhancerWithProps<TMergedProps, TOwnProps>\n\n  /** mapDispatch (as a object) and mergeProps */\n  <no_state = {}, TDispatchProps = {}, TOwnProps = {}, TMergedProps = {}>(\n    mapStateToProps: null | undefined,\n    mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\n    mergeProps: MergeProps<undefined, TDispatchProps, TOwnProps, TMergedProps>,\n  ): InferableComponentEnhancerWithProps<TMergedProps, TOwnProps>\n\n  /** mapState and options */\n  <TStateProps = {}, no_dispatch = {}, TOwnProps = {}, State = DefaultState>(\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n    mapDispatchToProps: null | undefined,\n    mergeProps: null | undefined,\n    options: ConnectOptions<State, TStateProps, TOwnProps>,\n  ): InferableComponentEnhancerWithProps<DispatchProp & TStateProps, TOwnProps>\n\n  /** mapDispatch (as a function) and options */\n  <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}>(\n    mapStateToProps: null | undefined,\n    mapDispatchToProps: MapDispatchToPropsNonObject<TDispatchProps, TOwnProps>,\n    mergeProps: null | undefined,\n    options: ConnectOptions<{}, TStateProps, TOwnProps>,\n  ): InferableComponentEnhancerWithProps<TDispatchProps, TOwnProps>\n\n  /** mapDispatch (as an object) and options*/\n  <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}>(\n    mapStateToProps: null | undefined,\n    mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\n    mergeProps: null | undefined,\n    options: ConnectOptions<{}, TStateProps, TOwnProps>,\n  ): InferableComponentEnhancerWithProps<\n    ResolveThunks<TDispatchProps>,\n    TOwnProps\n  >\n\n  /** mapState,  mapDispatch (as a function), and options */\n  <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>(\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n    mapDispatchToProps: MapDispatchToPropsNonObject<TDispatchProps, TOwnProps>,\n    mergeProps: null | undefined,\n    options: ConnectOptions<State, TStateProps, TOwnProps>,\n  ): InferableComponentEnhancerWithProps<\n    TStateProps & TDispatchProps,\n    TOwnProps\n  >\n\n  /** mapState,  mapDispatch (as an object), and options */\n  <TStateProps = {}, TDispatchProps = {}, TOwnProps = {}, State = DefaultState>(\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n    mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\n    mergeProps: null | undefined,\n    options: ConnectOptions<State, TStateProps, TOwnProps>,\n  ): InferableComponentEnhancerWithProps<\n    TStateProps & ResolveThunks<TDispatchProps>,\n    TOwnProps\n  >\n\n  /** mapState, mapDispatch, mergeProps, and options */\n  <\n    TStateProps = {},\n    TDispatchProps = {},\n    TOwnProps = {},\n    TMergedProps = {},\n    State = DefaultState,\n  >(\n    mapStateToProps: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n    mapDispatchToProps: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\n    mergeProps: MergeProps<\n      TStateProps,\n      TDispatchProps,\n      TOwnProps,\n      TMergedProps\n    >,\n    options?: ConnectOptions<State, TStateProps, TOwnProps, TMergedProps>,\n  ): InferableComponentEnhancerWithProps<TMergedProps, TOwnProps>\n  // tslint:enable:no-unnecessary-generics\n}\n\nlet hasWarnedAboutDeprecatedPureOption = false\n\n/**\n * Connects a React component to a Redux store.\n *\n * - Without arguments, just wraps the component, without changing the behavior / props\n *\n * - If 2 params are passed (3rd param, mergeProps, is skipped), default behavior\n * is to override ownProps (as stated in the docs), so what remains is everything that's\n * not a state or dispatch prop\n *\n * - When 3rd param is passed, we don't know if ownProps propagate and whether they\n * should be valid component props, because it depends on mergeProps implementation.\n * As such, it is the user's responsibility to extend ownProps interface from state or\n * dispatch props or both when applicable\n *\n * @param mapStateToProps A function that extracts values from state\n * @param mapDispatchToProps Setup for dispatching actions\n * @param mergeProps Optional callback to merge state and dispatch props together\n * @param options Options for configuring the connection\n *\n */\nfunction connect<\n  TStateProps = {},\n  TDispatchProps = {},\n  TOwnProps = {},\n  TMergedProps = {},\n  State = unknown,\n>(\n  mapStateToProps?: MapStateToPropsParam<TStateProps, TOwnProps, State>,\n  mapDispatchToProps?: MapDispatchToPropsParam<TDispatchProps, TOwnProps>,\n  mergeProps?: MergeProps<TStateProps, TDispatchProps, TOwnProps, TMergedProps>,\n  {\n    // The `pure` option has been removed, so TS doesn't like us destructuring this to check its existence.\n    // @ts-ignore\n    pure,\n    areStatesEqual = strictEqual,\n    areOwnPropsEqual = shallowEqual,\n    areStatePropsEqual = shallowEqual,\n    areMergedPropsEqual = shallowEqual,\n\n    // use React's forwardRef to expose a ref of the wrapped component\n    forwardRef = false,\n\n    // the context consumer to use\n    context = ReactReduxContext,\n  }: ConnectOptions<unknown, unknown, unknown, unknown> = {},\n): unknown {\n  if (process.env.NODE_ENV !== 'production') {\n    if (pure !== undefined && !hasWarnedAboutDeprecatedPureOption) {\n      hasWarnedAboutDeprecatedPureOption = true\n      warning(\n        'The `pure` option has been removed. `connect` is now always a \"pure/memoized\" component',\n      )\n    }\n  }\n\n  const Context = context\n\n  const initMapStateToProps = mapStateToPropsFactory(mapStateToProps)\n  const initMapDispatchToProps = mapDispatchToPropsFactory(mapDispatchToProps)\n  const initMergeProps = mergePropsFactory(mergeProps)\n\n  const shouldHandleStateChanges = Boolean(mapStateToProps)\n\n  const wrapWithConnect = <TProps,>(\n    WrappedComponent: ComponentType<TProps>,\n  ) => {\n    type WrappedComponentProps = TProps &\n      ConnectPropsMaybeWithoutContext<TProps>\n\n    if (process.env.NODE_ENV !== 'production') {\n      const isValid = /*#__PURE__*/ isValidElementType(WrappedComponent)\n      if (!isValid)\n        throw new Error(\n          `You must pass a component to the function returned by connect. Instead received ${stringifyComponent(\n            WrappedComponent,\n          )}`,\n        )\n    }\n\n    const wrappedComponentName =\n      WrappedComponent.displayName || WrappedComponent.name || 'Component'\n\n    const displayName = `Connect(${wrappedComponentName})`\n\n    const selectorFactoryOptions: SelectorFactoryOptions<\n      any,\n      any,\n      any,\n      any,\n      State\n    > = {\n      shouldHandleStateChanges,\n      displayName,\n      wrappedComponentName,\n      WrappedComponent,\n      // @ts-ignore\n      initMapStateToProps,\n      initMapDispatchToProps,\n      initMergeProps,\n      areStatesEqual,\n      areStatePropsEqual,\n      areOwnPropsEqual,\n      areMergedPropsEqual,\n    }\n\n    function ConnectFunction<TOwnProps>(\n      props: InternalConnectProps & TOwnProps,\n    ) {\n      const [propsContext, reactReduxForwardedRef, wrapperProps] =\n        React.useMemo(() => {\n          // Distinguish between actual \"data\" props that were passed to the wrapper component,\n          // and values needed to control behavior (forwarded refs, alternate context instances).\n          // To maintain the wrapperProps object reference, memoize this destructuring.\n          const { reactReduxForwardedRef, ...wrapperProps } = props\n          return [props.context, reactReduxForwardedRef, wrapperProps]\n        }, [props])\n\n      const ContextToUse: ReactReduxContextInstance = React.useMemo(() => {\n        // Users may optionally pass in a custom context instance to use instead of our ReactReduxContext.\n        // Memoize the check that determines which context instance we should use.\n        let ResultContext = Context\n        if (propsContext?.Consumer) {\n          if (process.env.NODE_ENV !== 'production') {\n            const isValid = /*#__PURE__*/ isContextConsumer(\n              // @ts-ignore\n              <propsContext.Consumer />,\n            )\n            if (!isValid) {\n              throw new Error(\n                'You must pass a valid React context consumer as `props.context`',\n              )\n            }\n            ResultContext = propsContext\n          }\n        }\n        return ResultContext\n      }, [propsContext, Context])\n\n      // Retrieve the store and ancestor subscription via context, if available\n      const contextValue = React.useContext(ContextToUse)\n\n      // The store _must_ exist as either a prop or in context.\n      // We'll check to see if it _looks_ like a Redux store first.\n      // This allows us to pass through a `store` prop that is just a plain value.\n      const didStoreComeFromProps =\n        Boolean(props.store) &&\n        Boolean(props.store!.getState) &&\n        Boolean(props.store!.dispatch)\n      const didStoreComeFromContext =\n        Boolean(contextValue) && Boolean(contextValue!.store)\n\n      if (\n        process.env.NODE_ENV !== 'production' &&\n        !didStoreComeFromProps &&\n        !didStoreComeFromContext\n      ) {\n        throw new Error(\n          `Could not find \"store\" in the context of ` +\n            `\"${displayName}\". Either wrap the root component in a <Provider>, ` +\n            `or pass a custom React context provider to <Provider> and the corresponding ` +\n            `React context consumer to ${displayName} in connect options.`,\n        )\n      }\n\n      // Based on the previous check, one of these must be true\n      const store: Store = didStoreComeFromProps\n        ? props.store!\n        : contextValue!.store\n\n      const getServerState = didStoreComeFromContext\n        ? contextValue!.getServerState\n        : store.getState\n\n      const childPropsSelector = React.useMemo(() => {\n        // The child props selector needs the store reference as an input.\n        // Re-create this selector whenever the store changes.\n        return defaultSelectorFactory(store.dispatch, selectorFactoryOptions)\n      }, [store])\n\n      const [subscription, notifyNestedSubs] = React.useMemo(() => {\n        if (!shouldHandleStateChanges) return NO_SUBSCRIPTION_ARRAY\n\n        // This Subscription's source should match where store came from: props vs. context. A component\n        // connected to the store via props shouldn't use subscription from context, or vice versa.\n        const subscription = createSubscription(\n          store,\n          didStoreComeFromProps ? undefined : contextValue!.subscription,\n        )\n\n        // `notifyNestedSubs` is duplicated to handle the case where the component is unmounted in\n        // the middle of the notification loop, where `subscription` will then be null. This can\n        // probably be avoided if Subscription's listeners logic is changed to not call listeners\n        // that have been unsubscribed in the  middle of the notification loop.\n        const notifyNestedSubs =\n          subscription.notifyNestedSubs.bind(subscription)\n\n        return [subscription, notifyNestedSubs]\n      }, [store, didStoreComeFromProps, contextValue])\n\n      // Determine what {store, subscription} value should be put into nested context, if necessary,\n      // and memoize that value to avoid unnecessary context updates.\n      const overriddenContextValue = React.useMemo(() => {\n        if (didStoreComeFromProps) {\n          // This component is directly subscribed to a store from props.\n          // We don't want descendants reading from this store - pass down whatever\n          // the existing context value is from the nearest connected ancestor.\n          return contextValue!\n        }\n\n        // Otherwise, put this component's subscription instance into context, so that\n        // connected descendants won't update until after this component is done\n        return {\n          ...contextValue,\n          subscription,\n        } as ReactReduxContextValue\n      }, [didStoreComeFromProps, contextValue, subscription])\n\n      // Set up refs to coordinate values between the subscription effect and the render logic\n      const lastChildProps = React.useRef<unknown>(undefined)\n      const lastWrapperProps = React.useRef(wrapperProps)\n      const childPropsFromStoreUpdate = React.useRef<unknown>(undefined)\n      const renderIsScheduled = React.useRef(false)\n      const isMounted = React.useRef(false)\n\n      // TODO: Change this to `React.useRef<Error>(undefined)` after upgrading to React 19.\n      /**\n       * @todo Change this to `React.useRef<Error>(undefined)` after upgrading to React 19.\n       */\n      const latestSubscriptionCallbackError = React.useRef<Error | undefined>(\n        undefined,\n      )\n\n      useIsomorphicLayoutEffect(() => {\n        isMounted.current = true\n        return () => {\n          isMounted.current = false\n        }\n      }, [])\n\n      const actualChildPropsSelector = React.useMemo(() => {\n        const selector = () => {\n          // Tricky logic here:\n          // - This render may have been triggered by a Redux store update that produced new child props\n          // - However, we may have gotten new wrapper props after that\n          // If we have new child props, and the same wrapper props, we know we should use the new child props as-is.\n          // But, if we have new wrapper props, those might change the child props, so we have to recalculate things.\n          // So, we'll use the child props from store update only if the wrapper props are the same as last time.\n          if (\n            childPropsFromStoreUpdate.current &&\n            wrapperProps === lastWrapperProps.current\n          ) {\n            return childPropsFromStoreUpdate.current\n          }\n\n          // TODO We're reading the store directly in render() here. Bad idea?\n          // This will likely cause Bad Things (TM) to happen in Concurrent Mode.\n          // Note that we do this because on renders _not_ caused by store updates, we need the latest store state\n          // to determine what the child props should be.\n          return childPropsSelector(store.getState(), wrapperProps)\n        }\n        return selector\n      }, [store, wrapperProps])\n\n      // We need this to execute synchronously every time we re-render. However, React warns\n      // about useLayoutEffect in SSR, so we try to detect environment and fall back to\n      // just useEffect instead to avoid the warning, since neither will run anyway.\n\n      const subscribeForReact = React.useMemo(() => {\n        const subscribe = (reactListener: () => void) => {\n          if (!subscription) {\n            return () => {}\n          }\n\n          return subscribeUpdates(\n            shouldHandleStateChanges,\n            store,\n            subscription,\n            // @ts-ignore\n            childPropsSelector,\n            lastWrapperProps,\n            lastChildProps,\n            renderIsScheduled,\n            isMounted,\n            childPropsFromStoreUpdate,\n            notifyNestedSubs,\n            reactListener,\n          )\n        }\n\n        return subscribe\n      }, [subscription])\n\n      useIsomorphicLayoutEffectWithArgs(captureWrapperProps, [\n        lastWrapperProps,\n        lastChildProps,\n        renderIsScheduled,\n        wrapperProps,\n        childPropsFromStoreUpdate,\n        notifyNestedSubs,\n      ])\n\n      let actualChildProps: Record<string, unknown>\n\n      try {\n        actualChildProps = React.useSyncExternalStore(\n          // TODO We're passing through a big wrapper that does a bunch of extra side effects besides subscribing\n          subscribeForReact,\n          // TODO This is incredibly hacky. We've already processed the store update and calculated new child props,\n          // TODO and we're just passing that through so it triggers a re-render for us rather than relying on `uSES`.\n          actualChildPropsSelector,\n          getServerState\n            ? () => childPropsSelector(getServerState(), wrapperProps)\n            : actualChildPropsSelector,\n        )\n      } catch (err) {\n        if (latestSubscriptionCallbackError.current) {\n          // eslint-disable-next-line no-extra-semi\n          ;(err as Error).message +=\n            `\\nThe error may be correlated with this previous error:\\n${latestSubscriptionCallbackError.current.stack}\\n\\n`\n        }\n\n        throw err\n      }\n\n      useIsomorphicLayoutEffect(() => {\n        latestSubscriptionCallbackError.current = undefined\n        childPropsFromStoreUpdate.current = undefined\n        lastChildProps.current = actualChildProps\n      })\n\n      // Now that all that's done, we can finally try to actually render the child component.\n      // We memoize the elements for the rendered child component as an optimization.\n      const renderedWrappedComponent = React.useMemo(() => {\n        return (\n          // @ts-ignore\n          <WrappedComponent\n            {...actualChildProps}\n            ref={reactReduxForwardedRef}\n          />\n        )\n      }, [reactReduxForwardedRef, WrappedComponent, actualChildProps])\n\n      // If React sees the exact same element reference as last time, it bails out of re-rendering\n      // that child, same as if it was wrapped in React.memo() or returned false from shouldComponentUpdate.\n      const renderedChild = React.useMemo(() => {\n        if (shouldHandleStateChanges) {\n          // If this component is subscribed to store updates, we need to pass its own\n          // subscription instance down to our descendants. That means rendering the same\n          // Context instance, and putting a different value into the context.\n          return (\n            <ContextToUse.Provider value={overriddenContextValue}>\n              {renderedWrappedComponent}\n            </ContextToUse.Provider>\n          )\n        }\n\n        return renderedWrappedComponent\n      }, [ContextToUse, renderedWrappedComponent, overriddenContextValue])\n\n      return renderedChild\n    }\n\n    const _Connect = React.memo(ConnectFunction)\n\n    type ConnectedWrapperComponent = typeof _Connect & {\n      WrappedComponent: typeof WrappedComponent\n    }\n\n    // Add a hacky cast to get the right output type\n    const Connect = _Connect as unknown as ConnectedComponent<\n      typeof WrappedComponent,\n      WrappedComponentProps\n    >\n    Connect.WrappedComponent = WrappedComponent\n    Connect.displayName = ConnectFunction.displayName = displayName\n\n    if (forwardRef) {\n      const _forwarded = React.forwardRef(\n        function forwardConnectRef(props, ref) {\n          // @ts-ignore\n          return <Connect {...props} reactReduxForwardedRef={ref} />\n        },\n      )\n\n      const forwarded = _forwarded as ConnectedWrapperComponent\n      forwarded.displayName = displayName\n      forwarded.WrappedComponent = WrappedComponent\n      return /*#__PURE__*/ hoistStatics(forwarded, WrappedComponent)\n    }\n\n    return /*#__PURE__*/ hoistStatics(Connect, WrappedComponent)\n  }\n\n  return wrapWithConnect\n}\n\nexport default connect as Connect\n","import type { Context, ReactNode } from 'react'\nimport { React } from '../utils/react'\nimport type { Action, Store, UnknownAction } from 'redux'\nimport type { DevModeCheckFrequency } from '../hooks/useSelector'\nimport { createSubscription } from '../utils/Subscription'\nimport { useIsomorphicLayoutEffect } from '../utils/useIsomorphicLayoutEffect'\nimport type { ReactReduxContextValue } from './Context'\nimport { ReactReduxContext } from './Context'\n\nexport interface ProviderProps<\n  A extends Action<string> = UnknownAction,\n  S = unknown,\n> {\n  /**\n   * The single Redux store in your application.\n   */\n  store: Store<S, A>\n\n  /**\n   * An optional server state snapshot. Will be used during initial hydration render if available, to ensure that the UI output is consistent with the HTML generated on the server.\n   */\n  serverState?: S\n\n  /**\n   * Optional context to be used internally in react-redux. Use React.createContext() to create a context to be used.\n   * If this is used, you'll need to customize `connect` by supplying the same context provided to the Provider.\n   * Set the initial value to null, and the hooks will error\n   * if this is not overwritten by Provider.\n   */\n  context?: Context<ReactReduxContextValue<S, A> | null>\n\n  /**\n   * Determines the frequency of stability checks for all selectors.\n   * This setting overrides the global configuration for\n   * the `useSelector` stability check, allowing you to specify how often\n   * these checks should occur in development mode.\n   *\n   * @since 8.1.0\n   */\n  stabilityCheck?: DevModeCheckFrequency\n\n  /**\n   * Determines the frequency of identity function checks for all selectors.\n   * This setting overrides the global configuration for\n   * the `useSelector` identity function check, allowing you to specify how often\n   * these checks should occur in development mode.\n   *\n   * **Note**: Previously referred to as `noopCheck`.\n   *\n   * @since 9.0.0\n   */\n  identityFunctionCheck?: DevModeCheckFrequency\n\n  children: ReactNode\n}\n\nfunction Provider<A extends Action<string> = UnknownAction, S = unknown>(\n  providerProps: ProviderProps<A, S>,\n) {\n  const { children, context, serverState, store } = providerProps\n\n  const contextValue = React.useMemo(() => {\n    const subscription = createSubscription(store)\n\n    const baseContextValue = {\n      store,\n      subscription,\n      getServerState: serverState ? () => serverState : undefined,\n    }\n\n    if (process.env.NODE_ENV === 'production') {\n      return baseContextValue\n    } else {\n      const { identityFunctionCheck = 'once', stabilityCheck = 'once' } =\n        providerProps\n\n      return /* @__PURE__ */ Object.assign(baseContextValue, {\n        stabilityCheck,\n        identityFunctionCheck,\n      })\n    }\n  }, [store, serverState])\n\n  const previousState = React.useMemo(() => store.getState(), [store])\n\n  useIsomorphicLayoutEffect(() => {\n    const { subscription } = contextValue\n    subscription.onStateChange = subscription.notifyNestedSubs\n    subscription.trySubscribe()\n\n    if (previousState !== store.getState()) {\n      subscription.notifyNestedSubs()\n    }\n    return () => {\n      subscription.tryUnsubscribe()\n      subscription.onStateChange = undefined\n    }\n  }, [contextValue, previousState])\n\n  const Context = context || ReactReduxContext\n\n  return <Context.Provider value={contextValue}>{children}</Context.Provider>\n}\n\nexport default Provider\n","import { React } from '../utils/react'\nimport { ReactReduxContext } from '../components/Context'\nimport type { ReactReduxContextValue } from '../components/Context'\n\n/**\n * Hook factory, which creates a `useReduxContext` hook bound to a given context. This is a low-level\n * hook that you should usually not need to call directly.\n *\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\n * @returns {Function} A `useReduxContext` hook bound to the specified context.\n */\nexport function createReduxContextHook(context = ReactReduxContext) {\n  return function useReduxContext(): ReactReduxContextValue {\n    const contextValue = React.useContext(context)\n\n    if (process.env.NODE_ENV !== 'production' && !contextValue) {\n      throw new Error(\n        'could not find react-redux context value; please ensure the component is wrapped in a <Provider>',\n      )\n    }\n\n    return contextValue!\n  }\n}\n\n/**\n * A hook to access the value of the `ReactReduxContext`. This is a low-level\n * hook that you should usually not need to call directly.\n *\n * @returns {any} the value of the `ReactReduxContext`\n *\n * @example\n *\n * import React from 'react'\n * import { useReduxContext } from 'react-redux'\n *\n * export const CounterComponent = () => {\n *   const { store } = useReduxContext()\n *   return <div>{store.getState()}</div>\n * }\n */\nexport const useReduxContext = /*#__PURE__*/ createReduxContextHook()\n","import type { Context } from 'react'\nimport type { Action, Store } from 'redux'\nimport type { ReactReduxContextValue } from '../components/Context'\nimport { ReactReduxContext } from '../components/Context'\nimport {\n  createReduxContextHook,\n  useReduxContext as useDefaultReduxContext,\n} from './useReduxContext'\n\n/**\n * Represents a type that extracts the action type from a given Redux store.\n *\n * @template StoreType - The specific type of the Redux store.\n *\n * @since 9.1.0\n * @internal\n */\nexport type ExtractStoreActionType<StoreType extends Store> =\n  StoreType extends Store<any, infer ActionType> ? ActionType : never\n\n/**\n * Represents a custom hook that provides access to the Redux store.\n *\n * @template StoreType - The specific type of the Redux store that gets returned.\n *\n * @since 9.1.0\n * @public\n */\nexport interface UseStore<StoreType extends Store> {\n  /**\n   * Returns the Redux store instance.\n   *\n   * @returns The Redux store instance.\n   */\n  (): StoreType\n\n  /**\n   * Returns the Redux store instance with specific state and action types.\n   *\n   * @returns The Redux store with the specified state and action types.\n   *\n   * @template StateType - The specific type of the state used in the store.\n   * @template ActionType - The specific type of the actions used in the store.\n   */\n  <\n    StateType extends ReturnType<StoreType['getState']> = ReturnType<\n      StoreType['getState']\n    >,\n    ActionType extends Action = ExtractStoreActionType<Store>,\n  >(): Store<StateType, ActionType>\n\n  /**\n   * Creates a \"pre-typed\" version of {@linkcode useStore useStore}\n   * where the type of the Redux `store` is predefined.\n   *\n   * This allows you to set the `store` type once, eliminating the need to\n   * specify it with every {@linkcode useStore useStore} call.\n   *\n   * @returns A pre-typed `useStore` with the store type already defined.\n   *\n   * @example\n   * ```ts\n   * export const useAppStore = useStore.withTypes<AppStore>()\n   * ```\n   *\n   * @template OverrideStoreType - The specific type of the Redux store that gets returned.\n   *\n   * @since 9.1.0\n   */\n  withTypes: <\n    OverrideStoreType extends StoreType,\n  >() => UseStore<OverrideStoreType>\n}\n\n/**\n * Hook factory, which creates a `useStore` hook bound to a given context.\n *\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\n * @returns {Function} A `useStore` hook bound to the specified context.\n */\nexport function createStoreHook<\n  StateType = unknown,\n  ActionType extends Action = Action,\n>(\n  // @ts-ignore\n  context?: Context<ReactReduxContextValue<\n    StateType,\n    ActionType\n  > | null> = ReactReduxContext,\n) {\n  const useReduxContext =\n    context === ReactReduxContext\n      ? useDefaultReduxContext\n      : // @ts-ignore\n        createReduxContextHook(context)\n  const useStore = () => {\n    const { store } = useReduxContext()\n    return store\n  }\n\n  Object.assign(useStore, {\n    withTypes: () => useStore,\n  })\n\n  return useStore as UseStore<Store<StateType, ActionType>>\n}\n\n/**\n * A hook to access the redux store.\n *\n * @returns {any} the redux store\n *\n * @example\n *\n * import React from 'react'\n * import { useStore } from 'react-redux'\n *\n * export const ExampleComponent = () => {\n *   const store = useStore()\n *   return <div>{store.getState()}</div>\n * }\n */\nexport const useStore = /*#__PURE__*/ createStoreHook()\n","import type { Context } from 'react'\nimport type { Action, Dispatch, UnknownAction } from 'redux'\n\nimport type { ReactReduxContextValue } from '../components/Context'\nimport { ReactReduxContext } from '../components/Context'\nimport { createStoreHook, useStore as useDefaultStore } from './useStore'\n\n/**\n * Represents a custom hook that provides a dispatch function\n * from the Redux store.\n *\n * @template DispatchType - The specific type of the dispatch function.\n *\n * @since 9.1.0\n * @public\n */\nexport interface UseDispatch<\n  DispatchType extends Dispatch<UnknownAction> = Dispatch<UnknownAction>,\n> {\n  /**\n   * Returns the dispatch function from the Redux store.\n   *\n   * @returns The dispatch function from the Redux store.\n   *\n   * @template AppDispatch - The specific type of the dispatch function.\n   */\n  <AppDispatch extends DispatchType = DispatchType>(): AppDispatch\n\n  /**\n   * Creates a \"pre-typed\" version of {@linkcode useDispatch useDispatch}\n   * where the type of the `dispatch` function is predefined.\n   *\n   * This allows you to set the `dispatch` type once, eliminating the need to\n   * specify it with every {@linkcode useDispatch useDispatch} call.\n   *\n   * @returns A pre-typed `useDispatch` with the dispatch type already defined.\n   *\n   * @example\n   * ```ts\n   * export const useAppDispatch = useDispatch.withTypes<AppDispatch>()\n   * ```\n   *\n   * @template OverrideDispatchType - The specific type of the dispatch function.\n   *\n   * @since 9.1.0\n   */\n  withTypes: <\n    OverrideDispatchType extends DispatchType,\n  >() => UseDispatch<OverrideDispatchType>\n}\n\n/**\n * Hook factory, which creates a `useDispatch` hook bound to a given context.\n *\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\n * @returns {Function} A `useDispatch` hook bound to the specified context.\n */\nexport function createDispatchHook<\n  StateType = unknown,\n  ActionType extends Action = UnknownAction,\n>(\n  // @ts-ignore\n  context?: Context<ReactReduxContextValue<\n    StateType,\n    ActionType\n  > | null> = ReactReduxContext,\n) {\n  const useStore =\n    context === ReactReduxContext ? useDefaultStore : createStoreHook(context)\n\n  const useDispatch = () => {\n    const store = useStore()\n    return store.dispatch\n  }\n\n  Object.assign(useDispatch, {\n    withTypes: () => useDispatch,\n  })\n\n  return useDispatch as UseDispatch<Dispatch<ActionType>>\n}\n\n/**\n * A hook to access the redux `dispatch` function.\n *\n * @returns {any|function} redux store's `dispatch` function\n *\n * @example\n *\n * import React, { useCallback } from 'react'\n * import { useDispatch } from 'react-redux'\n *\n * export const CounterComponent = ({ value }) => {\n *   const dispatch = useDispatch()\n *   const increaseCounter = useCallback(() => dispatch({ type: 'increase-counter' }), [])\n *   return (\n *     <div>\n *       <span>{value}</span>\n *       <button onClick={increaseCounter}>Increase counter</button>\n *     </div>\n *   )\n * }\n */\nexport const useDispatch = /*#__PURE__*/ createDispatchHook()\n","//import * as React from 'react'\nimport { React } from '../utils/react'\nimport { useSyncExternalStoreWithSelector } from 'use-sync-external-store/with-selector.js'\nimport type { ReactReduxContextValue } from '../components/Context'\nimport { ReactReduxContext } from '../components/Context'\nimport type { EqualityFn, NoInfer } from '../types'\nimport {\n  createReduxContextHook,\n  useReduxContext as useDefaultReduxContext,\n} from './useReduxContext'\n\n/**\n * The frequency of development mode checks.\n *\n * @since 8.1.0\n * @internal\n */\nexport type DevModeCheckFrequency = 'never' | 'once' | 'always'\n\n/**\n * Represents the configuration for development mode checks.\n *\n * @since 9.0.0\n * @internal\n */\nexport interface DevModeChecks {\n  /**\n   * Overrides the global stability check for the selector.\n   * - `once` - Run only the first time the selector is called.\n   * - `always` - Run every time the selector is called.\n   * - `never` - Never run the stability check.\n   *\n   * @default 'once'\n   *\n   * @since 8.1.0\n   */\n  stabilityCheck: DevModeCheckFrequency\n\n  /**\n   * Overrides the global identity function check for the selector.\n   * - `once` - Run only the first time the selector is called.\n   * - `always` - Run every time the selector is called.\n   * - `never` - Never run the identity function check.\n   *\n   * **Note**: Previously referred to as `noopCheck`.\n   *\n   * @default 'once'\n   *\n   * @since 9.0.0\n   */\n  identityFunctionCheck: DevModeCheckFrequency\n}\n\nexport interface UseSelectorOptions<Selected = unknown> {\n  equalityFn?: EqualityFn<Selected>\n\n  /**\n   * `useSelector` performs additional checks in development mode to help\n   * identify and warn about potential issues in selector behavior. This\n   * option allows you to customize the behavior of these checks per selector.\n   *\n   * @since 9.0.0\n   */\n  devModeChecks?: Partial<DevModeChecks>\n}\n\n/**\n * Represents a custom hook that allows you to extract data from the\n * Redux store state, using a selector function. The selector function\n * takes the current state as an argument and returns a part of the state\n * or some derived data. The hook also supports an optional equality\n * function or options object to customize its behavior.\n *\n * @template StateType - The specific type of state this hook operates on.\n *\n * @public\n */\nexport interface UseSelector<StateType = unknown> {\n  /**\n   * A function that takes a selector function as its first argument.\n   * The selector function is responsible for selecting a part of\n   * the Redux store's state or computing derived data.\n   *\n   * @param selector - A function that receives the current state and returns a part of the state or some derived data.\n   * @param equalityFnOrOptions - An optional equality function or options object for customizing the behavior of the selector.\n   * @returns The selected part of the state or derived data.\n   *\n   * @template TState - The specific type of state this hook operates on.\n   * @template Selected - The type of the value that the selector function will return.\n   */\n  <TState extends StateType = StateType, Selected = unknown>(\n    selector: (state: TState) => Selected,\n    equalityFnOrOptions?: EqualityFn<Selected> | UseSelectorOptions<Selected>,\n  ): Selected\n\n  /**\n   * Creates a \"pre-typed\" version of {@linkcode useSelector useSelector}\n   * where the `state` type is predefined.\n   *\n   * This allows you to set the `state` type once, eliminating the need to\n   * specify it with every {@linkcode useSelector useSelector} call.\n   *\n   * @returns A pre-typed `useSelector` with the state type already defined.\n   *\n   * @example\n   * ```ts\n   * export const useAppSelector = useSelector.withTypes<RootState>()\n   * ```\n   *\n   * @template OverrideStateType - The specific type of state this hook operates on.\n   *\n   * @since 9.1.0\n   */\n  withTypes: <\n    OverrideStateType extends StateType,\n  >() => UseSelector<OverrideStateType>\n}\n\nconst refEquality: EqualityFn<any> = (a, b) => a === b\n\n/**\n * Hook factory, which creates a `useSelector` hook bound to a given context.\n *\n * @param {React.Context} [context=ReactReduxContext] Context passed to your `<Provider>`.\n * @returns {Function} A `useSelector` hook bound to the specified context.\n */\nexport function createSelectorHook(\n  context: React.Context<ReactReduxContextValue<\n    any,\n    any\n  > | null> = ReactReduxContext,\n): UseSelector {\n  const useReduxContext =\n    context === ReactReduxContext\n      ? useDefaultReduxContext\n      : createReduxContextHook(context)\n\n  const useSelector = <TState, Selected>(\n    selector: (state: TState) => Selected,\n    equalityFnOrOptions:\n      | EqualityFn<NoInfer<Selected>>\n      | UseSelectorOptions<NoInfer<Selected>> = {},\n  ): Selected => {\n    const { equalityFn = refEquality } =\n      typeof equalityFnOrOptions === 'function'\n        ? { equalityFn: equalityFnOrOptions }\n        : equalityFnOrOptions\n    if (process.env.NODE_ENV !== 'production') {\n      if (!selector) {\n        throw new Error(`You must pass a selector to useSelector`)\n      }\n      if (typeof selector !== 'function') {\n        throw new Error(`You must pass a function as a selector to useSelector`)\n      }\n      if (typeof equalityFn !== 'function') {\n        throw new Error(\n          `You must pass a function as an equality function to useSelector`,\n        )\n      }\n    }\n\n    const reduxContext = useReduxContext()\n\n    const { store, subscription, getServerState } = reduxContext\n\n    const firstRun = React.useRef(true)\n\n    const wrappedSelector = React.useCallback<typeof selector>(\n      {\n        [selector.name](state: TState) {\n          const selected = selector(state)\n          if (process.env.NODE_ENV !== 'production') {\n            const { devModeChecks = {} } =\n              typeof equalityFnOrOptions === 'function'\n                ? {}\n                : equalityFnOrOptions\n            const { identityFunctionCheck, stabilityCheck } = reduxContext\n            const {\n              identityFunctionCheck: finalIdentityFunctionCheck,\n              stabilityCheck: finalStabilityCheck,\n            } = {\n              stabilityCheck,\n              identityFunctionCheck,\n              ...devModeChecks,\n            }\n            if (\n              finalStabilityCheck === 'always' ||\n              (finalStabilityCheck === 'once' && firstRun.current)\n            ) {\n              const toCompare = selector(state)\n              if (!equalityFn(selected, toCompare)) {\n                let stack: string | undefined = undefined\n                try {\n                  throw new Error()\n                } catch (e) {\n                  // eslint-disable-next-line no-extra-semi\n                  ;({ stack } = e as Error)\n                }\n                console.warn(\n                  'Selector ' +\n                    (selector.name || 'unknown') +\n                    ' returned a different result when called with the same parameters. This can lead to unnecessary rerenders.' +\n                    '\\nSelectors that return a new reference (such as an object or an array) should be memoized: https://redux.js.org/usage/deriving-data-selectors#optimizing-selectors-with-memoization',\n                  {\n                    state,\n                    selected,\n                    selected2: toCompare,\n                    stack,\n                  },\n                )\n              }\n            }\n            if (\n              finalIdentityFunctionCheck === 'always' ||\n              (finalIdentityFunctionCheck === 'once' && firstRun.current)\n            ) {\n              // @ts-ignore\n              if (selected === state) {\n                let stack: string | undefined = undefined\n                try {\n                  throw new Error()\n                } catch (e) {\n                  // eslint-disable-next-line no-extra-semi\n                  ;({ stack } = e as Error)\n                }\n                console.warn(\n                  'Selector ' +\n                    (selector.name || 'unknown') +\n                    ' returned the root state when called. This can lead to unnecessary rerenders.' +\n                    '\\nSelectors that return the entire state are almost certainly a mistake, as they will cause a rerender whenever *anything* in state changes.',\n                  { stack },\n                )\n              }\n            }\n            if (firstRun.current) firstRun.current = false\n          }\n          return selected\n        },\n      }[selector.name],\n      [selector],\n    )\n\n    const selectedState = useSyncExternalStoreWithSelector(\n      subscription.addNestedSub,\n      store.getState,\n      getServerState || store.getState,\n      wrappedSelector,\n      equalityFn,\n    )\n\n    React.useDebugValue(selectedState)\n\n    return selectedState\n  }\n\n  Object.assign(useSelector, {\n    withTypes: () => useSelector,\n  })\n\n  return useSelector as UseSelector\n}\n\n/**\n * A hook to access the redux store's state. This hook takes a selector function\n * as an argument. The selector is called with the store state.\n *\n * This hook takes an optional equality comparison function as the second parameter\n * that allows you to customize the way the selected state is compared to determine\n * whether the component needs to be re-rendered.\n *\n * @param {Function} selector the selector function\n * @param {Function=} equalityFn the function that will be used to determine equality\n *\n * @returns {any} the selected state\n *\n * @example\n *\n * import React from 'react'\n * import { useSelector } from 'react-redux'\n *\n * export const CounterComponent = () => {\n *   const counter = useSelector(state => state.counter)\n *   return <div>{counter}</div>\n * }\n */\nexport const useSelector = /*#__PURE__*/ createSelectorHook()\n","import connect from './components/connect'\nexport type {\n  Connect,\n  ConnectProps,\n  ConnectedProps,\n} from './components/connect'\n\nimport shallowEqual from './utils/shallowEqual'\n\nimport Provider from './components/Provider'\nimport { defaultNoopBatch } from './utils/batch'\n\nexport { ReactReduxContext } from './components/Context'\nexport type { ReactReduxContextValue } from './components/Context'\n\nexport type { ProviderProps } from './components/Provider'\n\nexport type {\n  MapDispatchToProps,\n  MapDispatchToPropsFactory,\n  MapDispatchToPropsFunction,\n  MapDispatchToPropsNonObject,\n  MapDispatchToPropsParam,\n  MapStateToProps,\n  MapStateToPropsFactory,\n  MapStateToPropsParam,\n  MergeProps,\n  Selector,\n  SelectorFactory,\n} from './connect/selectorFactory'\n\nexport { createDispatchHook, useDispatch } from './hooks/useDispatch'\nexport type { UseDispatch } from './hooks/useDispatch'\n\nexport { createSelectorHook, useSelector } from './hooks/useSelector'\nexport type { UseSelector } from './hooks/useSelector'\n\nexport { createStoreHook, useStore } from './hooks/useStore'\nexport type { UseStore } from './hooks/useStore'\n\nexport type { Subscription } from './utils/Subscription'\n\nexport * from './types'\n\n/**\n * @deprecated As of React 18, batching is enabled by default for ReactDOM and React Native.\n * This is now a no-op that immediately runs the callback.\n */\nconst batch = defaultNoopBatch\n\nexport { Provider, batch, connect, shallowEqual }\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}