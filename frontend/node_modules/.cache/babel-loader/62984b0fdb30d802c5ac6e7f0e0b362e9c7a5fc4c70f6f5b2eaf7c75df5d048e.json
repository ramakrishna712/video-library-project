{"ast":null,"code":"import platform from\"../platform/index.js\";import utils from\"../utils.js\";import isURLSameOrigin from\"./isURLSameOrigin.js\";import cookies from\"./cookies.js\";import buildFullPath from\"../core/buildFullPath.js\";import mergeConfig from\"../core/mergeConfig.js\";import AxiosHeaders from\"../core/AxiosHeaders.js\";import buildURL from\"./buildURL.js\";export default config=>{const newConfig=mergeConfig({},config);let{data,withXSRFToken,xsrfHeaderName,xsrfCookieName,headers,auth}=newConfig;newConfig.headers=headers=AxiosHeaders.from(headers);newConfig.url=buildURL(buildFullPath(newConfig.baseURL,newConfig.url),config.params,config.paramsSerializer);// HTTP basic authentication\nif(auth){headers.set('Authorization','Basic '+btoa((auth.username||'')+':'+(auth.password?unescape(encodeURIComponent(auth.password)):'')));}let contentType;if(utils.isFormData(data)){if(platform.hasStandardBrowserEnv||platform.hasStandardBrowserWebWorkerEnv){headers.setContentType(undefined);// Let the browser set it\n}else if((contentType=headers.getContentType())!==false){// fix semicolon duplication issue for ReactNative FormData implementation\nconst[type,...tokens]=contentType?contentType.split(';').map(token=>token.trim()).filter(Boolean):[];headers.setContentType([type||'multipart/form-data',...tokens].join('; '));}}// Add xsrf header\n// This is only done if running in a standard browser environment.\n// Specifically not if we're in a web worker, or react-native.\nif(platform.hasStandardBrowserEnv){withXSRFToken&&utils.isFunction(withXSRFToken)&&(withXSRFToken=withXSRFToken(newConfig));if(withXSRFToken||withXSRFToken!==false&&isURLSameOrigin(newConfig.url)){// Add xsrf header\nconst xsrfValue=xsrfHeaderName&&xsrfCookieName&&cookies.read(xsrfCookieName);if(xsrfValue){headers.set(xsrfHeaderName,xsrfValue);}}}return newConfig;};","map":{"version":3,"names":["platform","utils","isURLSameOrigin","cookies","buildFullPath","mergeConfig","AxiosHeaders","buildURL","config","newConfig","data","withXSRFToken","xsrfHeaderName","xsrfCookieName","headers","auth","from","url","baseURL","params","paramsSerializer","set","btoa","username","password","unescape","encodeURIComponent","contentType","isFormData","hasStandardBrowserEnv","hasStandardBrowserWebWorkerEnv","setContentType","undefined","getContentType","type","tokens","split","map","token","trim","filter","Boolean","join","isFunction","xsrfValue","read"],"sources":["C:/Users/Rama Krishna/videolibrary-app/frontend/src/node_modules/axios/lib/helpers/resolveConfig.js"],"sourcesContent":["import platform from \"../platform/index.js\";\nimport utils from \"../utils.js\";\nimport isURLSameOrigin from \"./isURLSameOrigin.js\";\nimport cookies from \"./cookies.js\";\nimport buildFullPath from \"../core/buildFullPath.js\";\nimport mergeConfig from \"../core/mergeConfig.js\";\nimport AxiosHeaders from \"../core/AxiosHeaders.js\";\nimport buildURL from \"./buildURL.js\";\n\nexport default (config) => {\n  const newConfig = mergeConfig({}, config);\n\n  let {data, withXSRFToken, xsrfHeaderName, xsrfCookieName, headers, auth} = newConfig;\n\n  newConfig.headers = headers = AxiosHeaders.from(headers);\n\n  newConfig.url = buildURL(buildFullPath(newConfig.baseURL, newConfig.url), config.params, config.paramsSerializer);\n\n  // HTTP basic authentication\n  if (auth) {\n    headers.set('Authorization', 'Basic ' +\n      btoa((auth.username || '') + ':' + (auth.password ? unescape(encodeURIComponent(auth.password)) : ''))\n    );\n  }\n\n  let contentType;\n\n  if (utils.isFormData(data)) {\n    if (platform.hasStandardBrowserEnv || platform.hasStandardBrowserWebWorkerEnv) {\n      headers.setContentType(undefined); // Let the browser set it\n    } else if ((contentType = headers.getContentType()) !== false) {\n      // fix semicolon duplication issue for ReactNative FormData implementation\n      const [type, ...tokens] = contentType ? contentType.split(';').map(token => token.trim()).filter(Boolean) : [];\n      headers.setContentType([type || 'multipart/form-data', ...tokens].join('; '));\n    }\n  }\n\n  // Add xsrf header\n  // This is only done if running in a standard browser environment.\n  // Specifically not if we're in a web worker, or react-native.\n\n  if (platform.hasStandardBrowserEnv) {\n    withXSRFToken && utils.isFunction(withXSRFToken) && (withXSRFToken = withXSRFToken(newConfig));\n\n    if (withXSRFToken || (withXSRFToken !== false && isURLSameOrigin(newConfig.url))) {\n      // Add xsrf header\n      const xsrfValue = xsrfHeaderName && xsrfCookieName && cookies.read(xsrfCookieName);\n\n      if (xsrfValue) {\n        headers.set(xsrfHeaderName, xsrfValue);\n      }\n    }\n  }\n\n  return newConfig;\n}\n\n"],"mappings":"AAAA,MAAO,CAAAA,QAAQ,KAAM,sBAAsB,CAC3C,MAAO,CAAAC,KAAK,KAAM,aAAa,CAC/B,MAAO,CAAAC,eAAe,KAAM,sBAAsB,CAClD,MAAO,CAAAC,OAAO,KAAM,cAAc,CAClC,MAAO,CAAAC,aAAa,KAAM,0BAA0B,CACpD,MAAO,CAAAC,WAAW,KAAM,wBAAwB,CAChD,MAAO,CAAAC,YAAY,KAAM,yBAAyB,CAClD,MAAO,CAAAC,QAAQ,KAAM,eAAe,CAEpC,cAAgB,CAAAC,MAAM,EAAK,CACzB,KAAM,CAAAC,SAAS,CAAGJ,WAAW,CAAC,CAAC,CAAC,CAAEG,MAAM,CAAC,CAEzC,GAAI,CAACE,IAAI,CAAEC,aAAa,CAAEC,cAAc,CAAEC,cAAc,CAAEC,OAAO,CAAEC,IAAI,CAAC,CAAGN,SAAS,CAEpFA,SAAS,CAACK,OAAO,CAAGA,OAAO,CAAGR,YAAY,CAACU,IAAI,CAACF,OAAO,CAAC,CAExDL,SAAS,CAACQ,GAAG,CAAGV,QAAQ,CAACH,aAAa,CAACK,SAAS,CAACS,OAAO,CAAET,SAAS,CAACQ,GAAG,CAAC,CAAET,MAAM,CAACW,MAAM,CAAEX,MAAM,CAACY,gBAAgB,CAAC,CAEjH;AACA,GAAIL,IAAI,CAAE,CACRD,OAAO,CAACO,GAAG,CAAC,eAAe,CAAE,QAAQ,CACnCC,IAAI,CAAC,CAACP,IAAI,CAACQ,QAAQ,EAAI,EAAE,EAAI,GAAG,EAAIR,IAAI,CAACS,QAAQ,CAAGC,QAAQ,CAACC,kBAAkB,CAACX,IAAI,CAACS,QAAQ,CAAC,CAAC,CAAG,EAAE,CAAC,CACvG,CAAC,CACH,CAEA,GAAI,CAAAG,WAAW,CAEf,GAAI1B,KAAK,CAAC2B,UAAU,CAAClB,IAAI,CAAC,CAAE,CAC1B,GAAIV,QAAQ,CAAC6B,qBAAqB,EAAI7B,QAAQ,CAAC8B,8BAA8B,CAAE,CAC7EhB,OAAO,CAACiB,cAAc,CAACC,SAAS,CAAC,CAAE;AACrC,CAAC,IAAM,IAAI,CAACL,WAAW,CAAGb,OAAO,CAACmB,cAAc,CAAC,CAAC,IAAM,KAAK,CAAE,CAC7D;AACA,KAAM,CAACC,IAAI,CAAE,GAAGC,MAAM,CAAC,CAAGR,WAAW,CAAGA,WAAW,CAACS,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,KAAK,EAAIA,KAAK,CAACC,IAAI,CAAC,CAAC,CAAC,CAACC,MAAM,CAACC,OAAO,CAAC,CAAG,EAAE,CAC9G3B,OAAO,CAACiB,cAAc,CAAC,CAACG,IAAI,EAAI,qBAAqB,CAAE,GAAGC,MAAM,CAAC,CAACO,IAAI,CAAC,IAAI,CAAC,CAAC,CAC/E,CACF,CAEA;AACA;AACA;AAEA,GAAI1C,QAAQ,CAAC6B,qBAAqB,CAAE,CAClClB,aAAa,EAAIV,KAAK,CAAC0C,UAAU,CAAChC,aAAa,CAAC,GAAKA,aAAa,CAAGA,aAAa,CAACF,SAAS,CAAC,CAAC,CAE9F,GAAIE,aAAa,EAAKA,aAAa,GAAK,KAAK,EAAIT,eAAe,CAACO,SAAS,CAACQ,GAAG,CAAE,CAAE,CAChF;AACA,KAAM,CAAA2B,SAAS,CAAGhC,cAAc,EAAIC,cAAc,EAAIV,OAAO,CAAC0C,IAAI,CAAChC,cAAc,CAAC,CAElF,GAAI+B,SAAS,CAAE,CACb9B,OAAO,CAACO,GAAG,CAACT,cAAc,CAAEgC,SAAS,CAAC,CACxC,CACF,CACF,CAEA,MAAO,CAAAnC,SAAS,CAClB,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}